'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


'
'This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
'
Namespace LiveMonitoring
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute([Namespace]:="", ConfigurationName:="LiveMonitoring.SLIPmonInterfaceSVC")>  _
    Public Interface SLIPmonInterfaceSVC
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetConfigSetting", ReplyAction:="urn:SLIPmonInterfaceSVC/GetConfigSettingResponse")>  _
        Function BeginGetConfigSetting(ByVal SettingName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetConfigSetting(ByVal result As System.IAsyncResult) As String
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetRemoteAlertHistory", ReplyAction:="urn:SLIPmonInterfaceSVC/GetRemoteAlertHistoryResponse")>  _
        Function BeginGetRemoteAlertHistory(ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetRemoteAlertHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/LogIt", ReplyAction:="urn:SLIPmonInterfaceSVC/LogItResponse")>  _
        Function BeginLogIt(ByVal LogType As String, ByVal LogEntry As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndLogIt(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSetting", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSettingResponse")>  _
        Function BeginGetSetting(ByVal KeyName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSetting(ByVal result As System.IAsyncResult) As String
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetAll", ReplyAction:="urn:SLIPmonInterfaceSVC/GetAllResponse")>  _
        Function BeginGetAll(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetAll(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSites", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSitesResponse")>  _
        Function BeginGetSites(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSites(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetDisplays", ReplyAction:="urn:SLIPmonInterfaceSVC/GetDisplaysResponse")>  _
        Function BeginGetDisplays(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetDisplays(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/DelDisplayGroup", ReplyAction:="urn:SLIPmonInterfaceSVC/DelDisplayGroupResponse")>  _
        Function BeginDelDisplayGroup(ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndDelDisplayGroup(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetDisplayGroup", ReplyAction:="urn:SLIPmonInterfaceSVC/GetDisplayGroupResponse")>  _
        Function BeginGetDisplayGroup(ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetDisplayGroup(ByVal result As System.IAsyncResult) As String
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetDisplayGroups", ReplyAction:="urn:SLIPmonInterfaceSVC/GetDisplayGroupsResponse")>  _
        Function BeginGetDisplayGroups(ByVal DisplayID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetDisplayGroups(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/ReturnDisplayFiles", ReplyAction:="urn:SLIPmonInterfaceSVC/ReturnDisplayFilesResponse")>  _
        Function BeginReturnDisplayFiles(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndReturnDisplayFiles(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/DeleteDisplayFiles", ReplyAction:="urn:SLIPmonInterfaceSVC/DeleteDisplayFilesResponse")>  _
        Function BeginDeleteDisplayFiles(ByVal FileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndDeleteDisplayFiles(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/UploadDisplayFileBin", ReplyAction:="urn:SLIPmonInterfaceSVC/UploadDisplayFileBinResponse")>  _
        Function BeginUploadDisplayFileBin(ByVal _SerialFile As String, ByVal FileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUploadDisplayFileBin(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/AddDisplay", ReplyAction:="urn:SLIPmonInterfaceSVC/AddDisplayResponse")>  _
        Function BeginAddDisplay(ByVal DisplayName As String, ByVal DisplayType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndAddDisplay(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/AddDisplayGroupPage", ReplyAction:="urn:SLIPmonInterfaceSVC/AddDisplayGroupPageResponse")>  _
        Function BeginAddDisplayGroupPage(ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndAddDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/EditDisplayGroupPage", ReplyAction:="urn:SLIPmonInterfaceSVC/EditDisplayGroupPageResponse")>  _
        Function BeginEditDisplayGroupPage( _
                    ByVal ID As Integer,  _
                    ByVal DisplayID As Integer,  _
                    ByVal GroupName As String,  _
                    ByVal DisplayType As Integer,  _
                    ByVal DisplayImage As String,  _
                    ByVal DisplayWidth As Double,  _
                    ByVal DisplayHeight As Double,  _
                    ByVal Screen As Integer,  _
                    ByVal PanelPos As Integer,  _
                    ByVal PanelNo As Integer,  _
                    ByVal Extra1 As String,  _
                    ByVal Extra2 As String,  _
                    ByVal ExtraVal1 As Double,  _
                    ByVal ExtraVal2 As Double,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndEditDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/ChangeDisplayGroupPage", ReplyAction:="urn:SLIPmonInterfaceSVC/ChangeDisplayGroupPageResponse")>  _
        Function BeginChangeDisplayGroupPage(ByVal ID As Integer, ByVal NewScreen As Integer, ByVal OldScreen As Integer, ByVal DisplayGroup As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndChangeDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/SetDisplaySensorPosition", ReplyAction:="urn:SLIPmonInterfaceSVC/SetDisplaySensorPositionResponse")>  _
        Function BeginSetDisplaySensorPosition(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal SensorTop As Double, ByVal SensorLeft As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndSetDisplaySensorPosition(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/SetDisplayBackImage", ReplyAction:="urn:SLIPmonInterfaceSVC/SetDisplayBackImageResponse")>  _
        Function BeginSetDisplayBackImage(ByVal DisplayID As Integer, ByVal BackImage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndSetDisplayBackImage(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/RemoveSensor", ReplyAction:="urn:SLIPmonInterfaceSVC/RemoveSensorResponse")>  _
        Function BeginRemoveSensor(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndRemoveSensor(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetAllSensors", ReplyAction:="urn:SLIPmonInterfaceSVC/GetAllSensorsResponse")>  _
        Function BeginGetAllSensors(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetAllSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSpecificSensorDisplay", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSpecificSensorDisplayResponse")>  _
        Function BeginGetSpecificSensorDisplay(ByVal SensorId As Integer, ByVal DisplayID As Integer, ByVal SensorScale As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSpecificSensorDisplay(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetListSensors", ReplyAction:="urn:SLIPmonInterfaceSVC/GetListSensorsResponse")>  _
        Function BeginGetListSensors(ByVal SensorIds As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetListSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetGroupSensors", ReplyAction:="urn:SLIPmonInterfaceSVC/GetGroupSensorsResponse")>  _
        Function BeginGetGroupSensors(ByVal GroupId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetGroupSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetGroupSensorsStatus", ReplyAction:="urn:SLIPmonInterfaceSVC/GetGroupSensorsStatusResponse")>  _
        Function BeginGetGroupSensorsStatus(ByVal GroupID As Integer, ByVal Sensors As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetGroupSensorsStatus(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSiteSensors", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSiteSensorsResponse")>  _
        Function BeginGetSiteSensors(ByVal SiteId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSiteSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSiteSensorsStatus", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSiteSensorsStatusResponse")>  _
        Function BeginGetSiteSensorsStatus(ByVal SiteId As Integer, ByVal Sensors As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSiteSensorsStatus(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSensors", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSensorsResponse")>  _
        Function BeginGetSensors(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/CheckLogin", ReplyAction:="urn:SLIPmonInterfaceSVC/CheckLoginResponse")>  _
        Function BeginCheckLogin(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndCheckLogin(ByVal result As System.IAsyncResult) As String
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSensorValues", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSensorValuesResponse")>  _
        Function BeginGetSensorValues(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSensorValues(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSensorsStatus", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSensorsStatusResponse")>  _
        Function BeginGetSensorsStatus(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSensorsStatus(ByVal result As System.IAsyncResult) As String
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSensorStatus", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSensorStatusResponse")>  _
        Function BeginGetSensorStatus(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSensorStatus(ByVal result As System.IAsyncResult) As Integer
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSensorHistory", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSensorHistoryResponse"),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of String))),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of Object)))>  _
        Function BeginGetSensorHistory(ByVal SensorID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSensorHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetMeteringKWh", ReplyAction:="urn:SLIPmonInterfaceSVC/GetMeteringKWhResponse"),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of String))),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of Object)))>  _
        Function BeginGetMeteringKWh(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetMeteringKWh(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetMeteringProfileRecordHistory", ReplyAction:="urn:SLIPmonInterfaceSVC/GetMeteringProfileRecordHistoryResponse"),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of String))),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of Object)))>  _
        Function BeginGetMeteringProfileRecordHistory(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetMeteringProfileRecordHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetMeteringProfileMarkerHistory", ReplyAction:="urn:SLIPmonInterfaceSVC/GetMeteringProfileMarkerHistoryResponse"),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of String))),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(System.Collections.ObjectModel.ObservableCollection(Of Object)))>  _
        Function BeginGetMeteringProfileMarkerHistory(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetMeteringProfileMarkerHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetMeteringTarrif", ReplyAction:="urn:SLIPmonInterfaceSVC/GetMeteringTarrifResponse")>  _
        Function BeginGetMeteringTarrif(ByVal TarrifID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetMeteringTarrif(ByVal result As System.IAsyncResult) As String
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetMeteringTarrifNames", ReplyAction:="urn:SLIPmonInterfaceSVC/GetMeteringTarrifNamesResponse")>  _
        Function BeginGetMeteringTarrifNames(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetMeteringTarrifNames(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetCameras", ReplyAction:="urn:SLIPmonInterfaceSVC/GetCamerasResponse")>  _
        Function BeginGetCameras(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetCameras(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetCameraImage", ReplyAction:="urn:SLIPmonInterfaceSVC/GetCameraImageResponse")>  _
        Function BeginGetCameraImage(ByVal CameraID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetCameraImage(ByVal result As System.IAsyncResult) As Byte()
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetIPDevicesDetails", ReplyAction:="urn:SLIPmonInterfaceSVC/GetIPDevicesDetailsResponse")>  _
        Function BeginGetIPDevicesDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetIPDevicesDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetOtherDevicesDetails", ReplyAction:="urn:SLIPmonInterfaceSVC/GetOtherDevicesDetailsResponse")>  _
        Function BeginGetOtherDevicesDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetOtherDevicesDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="urn:SLIPmonInterfaceSVC/GetSNMPManagerDetails", ReplyAction:="urn:SLIPmonInterfaceSVC/GetSNMPManagerDetailsResponse")>  _
        Function BeginGetSNMPManagerDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetSNMPManagerDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String)
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface SLIPmonInterfaceSVCChannel
        Inherits LiveMonitoring.SLIPmonInterfaceSVC, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetConfigSettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetRemoteAlertHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSitesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetDisplaysCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetDisplayGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetDisplayGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ReturnDisplayFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class DeleteDisplayFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class AddDisplayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class AddDisplayGroupPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class EditDisplayGroupPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ChangeDisplayGroupPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class RemoveSensorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetAllSensorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSpecificSensorDisplayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetListSensorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetGroupSensorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetGroupSensorsStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSiteSensorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSiteSensorsStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSensorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class CheckLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSensorValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSensorsStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSensorStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Integer
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSensorHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of Object)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of Object))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetMeteringKWhCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of Object)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of Object))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetMeteringProfileRecordHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of Object)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of Object))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetMeteringProfileMarkerHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of Object)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of Object))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetMeteringTarrifCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetMeteringTarrifNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetCamerasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetCameraImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Byte()
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetIPDevicesDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetOtherDevicesDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetSNMPManagerDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As System.Collections.ObjectModel.ObservableCollection(Of String)
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Collections.ObjectModel.ObservableCollection(Of String))
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class SLIPmonInterfaceSVCClient
        Inherits System.ServiceModel.ClientBase(Of LiveMonitoring.SLIPmonInterfaceSVC)
        Implements LiveMonitoring.SLIPmonInterfaceSVC
        
        Private onBeginGetConfigSettingDelegate As BeginOperationDelegate
        
        Private onEndGetConfigSettingDelegate As EndOperationDelegate
        
        Private onGetConfigSettingCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetRemoteAlertHistoryDelegate As BeginOperationDelegate
        
        Private onEndGetRemoteAlertHistoryDelegate As EndOperationDelegate
        
        Private onGetRemoteAlertHistoryCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginLogItDelegate As BeginOperationDelegate
        
        Private onEndLogItDelegate As EndOperationDelegate
        
        Private onLogItCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSettingDelegate As BeginOperationDelegate
        
        Private onEndGetSettingDelegate As EndOperationDelegate
        
        Private onGetSettingCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetAllDelegate As BeginOperationDelegate
        
        Private onEndGetAllDelegate As EndOperationDelegate
        
        Private onGetAllCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSitesDelegate As BeginOperationDelegate
        
        Private onEndGetSitesDelegate As EndOperationDelegate
        
        Private onGetSitesCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetDisplaysDelegate As BeginOperationDelegate
        
        Private onEndGetDisplaysDelegate As EndOperationDelegate
        
        Private onGetDisplaysCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginDelDisplayGroupDelegate As BeginOperationDelegate
        
        Private onEndDelDisplayGroupDelegate As EndOperationDelegate
        
        Private onDelDisplayGroupCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetDisplayGroupDelegate As BeginOperationDelegate
        
        Private onEndGetDisplayGroupDelegate As EndOperationDelegate
        
        Private onGetDisplayGroupCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetDisplayGroupsDelegate As BeginOperationDelegate
        
        Private onEndGetDisplayGroupsDelegate As EndOperationDelegate
        
        Private onGetDisplayGroupsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginReturnDisplayFilesDelegate As BeginOperationDelegate
        
        Private onEndReturnDisplayFilesDelegate As EndOperationDelegate
        
        Private onReturnDisplayFilesCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginDeleteDisplayFilesDelegate As BeginOperationDelegate
        
        Private onEndDeleteDisplayFilesDelegate As EndOperationDelegate
        
        Private onDeleteDisplayFilesCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUploadDisplayFileBinDelegate As BeginOperationDelegate
        
        Private onEndUploadDisplayFileBinDelegate As EndOperationDelegate
        
        Private onUploadDisplayFileBinCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginAddDisplayDelegate As BeginOperationDelegate
        
        Private onEndAddDisplayDelegate As EndOperationDelegate
        
        Private onAddDisplayCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginAddDisplayGroupPageDelegate As BeginOperationDelegate
        
        Private onEndAddDisplayGroupPageDelegate As EndOperationDelegate
        
        Private onAddDisplayGroupPageCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginEditDisplayGroupPageDelegate As BeginOperationDelegate
        
        Private onEndEditDisplayGroupPageDelegate As EndOperationDelegate
        
        Private onEditDisplayGroupPageCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginChangeDisplayGroupPageDelegate As BeginOperationDelegate
        
        Private onEndChangeDisplayGroupPageDelegate As EndOperationDelegate
        
        Private onChangeDisplayGroupPageCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginSetDisplaySensorPositionDelegate As BeginOperationDelegate
        
        Private onEndSetDisplaySensorPositionDelegate As EndOperationDelegate
        
        Private onSetDisplaySensorPositionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginSetDisplayBackImageDelegate As BeginOperationDelegate
        
        Private onEndSetDisplayBackImageDelegate As EndOperationDelegate
        
        Private onSetDisplayBackImageCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginRemoveSensorDelegate As BeginOperationDelegate
        
        Private onEndRemoveSensorDelegate As EndOperationDelegate
        
        Private onRemoveSensorCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetAllSensorsDelegate As BeginOperationDelegate
        
        Private onEndGetAllSensorsDelegate As EndOperationDelegate
        
        Private onGetAllSensorsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSpecificSensorDisplayDelegate As BeginOperationDelegate
        
        Private onEndGetSpecificSensorDisplayDelegate As EndOperationDelegate
        
        Private onGetSpecificSensorDisplayCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetListSensorsDelegate As BeginOperationDelegate
        
        Private onEndGetListSensorsDelegate As EndOperationDelegate
        
        Private onGetListSensorsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetGroupSensorsDelegate As BeginOperationDelegate
        
        Private onEndGetGroupSensorsDelegate As EndOperationDelegate
        
        Private onGetGroupSensorsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetGroupSensorsStatusDelegate As BeginOperationDelegate
        
        Private onEndGetGroupSensorsStatusDelegate As EndOperationDelegate
        
        Private onGetGroupSensorsStatusCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSiteSensorsDelegate As BeginOperationDelegate
        
        Private onEndGetSiteSensorsDelegate As EndOperationDelegate
        
        Private onGetSiteSensorsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSiteSensorsStatusDelegate As BeginOperationDelegate
        
        Private onEndGetSiteSensorsStatusDelegate As EndOperationDelegate
        
        Private onGetSiteSensorsStatusCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSensorsDelegate As BeginOperationDelegate
        
        Private onEndGetSensorsDelegate As EndOperationDelegate
        
        Private onGetSensorsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginCheckLoginDelegate As BeginOperationDelegate
        
        Private onEndCheckLoginDelegate As EndOperationDelegate
        
        Private onCheckLoginCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSensorValuesDelegate As BeginOperationDelegate
        
        Private onEndGetSensorValuesDelegate As EndOperationDelegate
        
        Private onGetSensorValuesCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSensorsStatusDelegate As BeginOperationDelegate
        
        Private onEndGetSensorsStatusDelegate As EndOperationDelegate
        
        Private onGetSensorsStatusCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSensorStatusDelegate As BeginOperationDelegate
        
        Private onEndGetSensorStatusDelegate As EndOperationDelegate
        
        Private onGetSensorStatusCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSensorHistoryDelegate As BeginOperationDelegate
        
        Private onEndGetSensorHistoryDelegate As EndOperationDelegate
        
        Private onGetSensorHistoryCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetMeteringKWhDelegate As BeginOperationDelegate
        
        Private onEndGetMeteringKWhDelegate As EndOperationDelegate
        
        Private onGetMeteringKWhCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetMeteringProfileRecordHistoryDelegate As BeginOperationDelegate
        
        Private onEndGetMeteringProfileRecordHistoryDelegate As EndOperationDelegate
        
        Private onGetMeteringProfileRecordHistoryCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetMeteringProfileMarkerHistoryDelegate As BeginOperationDelegate
        
        Private onEndGetMeteringProfileMarkerHistoryDelegate As EndOperationDelegate
        
        Private onGetMeteringProfileMarkerHistoryCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetMeteringTarrifDelegate As BeginOperationDelegate
        
        Private onEndGetMeteringTarrifDelegate As EndOperationDelegate
        
        Private onGetMeteringTarrifCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetMeteringTarrifNamesDelegate As BeginOperationDelegate
        
        Private onEndGetMeteringTarrifNamesDelegate As EndOperationDelegate
        
        Private onGetMeteringTarrifNamesCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetCamerasDelegate As BeginOperationDelegate
        
        Private onEndGetCamerasDelegate As EndOperationDelegate
        
        Private onGetCamerasCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetCameraImageDelegate As BeginOperationDelegate
        
        Private onEndGetCameraImageDelegate As EndOperationDelegate
        
        Private onGetCameraImageCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetIPDevicesDetailsDelegate As BeginOperationDelegate
        
        Private onEndGetIPDevicesDetailsDelegate As EndOperationDelegate
        
        Private onGetIPDevicesDetailsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetOtherDevicesDetailsDelegate As BeginOperationDelegate
        
        Private onEndGetOtherDevicesDetailsDelegate As EndOperationDelegate
        
        Private onGetOtherDevicesDetailsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetSNMPManagerDetailsDelegate As BeginOperationDelegate
        
        Private onEndGetSNMPManagerDetailsDelegate As EndOperationDelegate
        
        Private onGetSNMPManagerDetailsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginOpenDelegate As BeginOperationDelegate
        
        Private onEndOpenDelegate As EndOperationDelegate
        
        Private onOpenCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginCloseDelegate As BeginOperationDelegate
        
        Private onEndCloseDelegate As EndOperationDelegate
        
        Private onCloseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Property CookieContainer() As System.Net.CookieContainer
            Get
                Dim httpCookieContainerManager As System.ServiceModel.Channels.IHttpCookieContainerManager = Me.InnerChannel.GetProperty(Of System.ServiceModel.Channels.IHttpCookieContainerManager)
                If (Not (httpCookieContainerManager) Is Nothing) Then
                    Return httpCookieContainerManager.CookieContainer
                Else
                    Return Nothing
                End If
            End Get
            Set
                Dim httpCookieContainerManager As System.ServiceModel.Channels.IHttpCookieContainerManager = Me.InnerChannel.GetProperty(Of System.ServiceModel.Channels.IHttpCookieContainerManager)
                If (Not (httpCookieContainerManager) Is Nothing) Then
                    httpCookieContainerManager.CookieContainer = value
                Else
                    Throw New System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC"& _ 
                            "ookieContainerBindingElement.")
                End If
            End Set
        End Property
        
        Public Event GetConfigSettingCompleted As System.EventHandler(Of GetConfigSettingCompletedEventArgs)
        
        Public Event GetRemoteAlertHistoryCompleted As System.EventHandler(Of GetRemoteAlertHistoryCompletedEventArgs)
        
        Public Event LogItCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event GetSettingCompleted As System.EventHandler(Of GetSettingCompletedEventArgs)
        
        Public Event GetAllCompleted As System.EventHandler(Of GetAllCompletedEventArgs)
        
        Public Event GetSitesCompleted As System.EventHandler(Of GetSitesCompletedEventArgs)
        
        Public Event GetDisplaysCompleted As System.EventHandler(Of GetDisplaysCompletedEventArgs)
        
        Public Event DelDisplayGroupCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event GetDisplayGroupCompleted As System.EventHandler(Of GetDisplayGroupCompletedEventArgs)
        
        Public Event GetDisplayGroupsCompleted As System.EventHandler(Of GetDisplayGroupsCompletedEventArgs)
        
        Public Event ReturnDisplayFilesCompleted As System.EventHandler(Of ReturnDisplayFilesCompletedEventArgs)
        
        Public Event DeleteDisplayFilesCompleted As System.EventHandler(Of DeleteDisplayFilesCompletedEventArgs)
        
        Public Event UploadDisplayFileBinCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event AddDisplayCompleted As System.EventHandler(Of AddDisplayCompletedEventArgs)
        
        Public Event AddDisplayGroupPageCompleted As System.EventHandler(Of AddDisplayGroupPageCompletedEventArgs)
        
        Public Event EditDisplayGroupPageCompleted As System.EventHandler(Of EditDisplayGroupPageCompletedEventArgs)
        
        Public Event ChangeDisplayGroupPageCompleted As System.EventHandler(Of ChangeDisplayGroupPageCompletedEventArgs)
        
        Public Event SetDisplaySensorPositionCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event SetDisplayBackImageCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event RemoveSensorCompleted As System.EventHandler(Of RemoveSensorCompletedEventArgs)
        
        Public Event GetAllSensorsCompleted As System.EventHandler(Of GetAllSensorsCompletedEventArgs)
        
        Public Event GetSpecificSensorDisplayCompleted As System.EventHandler(Of GetSpecificSensorDisplayCompletedEventArgs)
        
        Public Event GetListSensorsCompleted As System.EventHandler(Of GetListSensorsCompletedEventArgs)
        
        Public Event GetGroupSensorsCompleted As System.EventHandler(Of GetGroupSensorsCompletedEventArgs)
        
        Public Event GetGroupSensorsStatusCompleted As System.EventHandler(Of GetGroupSensorsStatusCompletedEventArgs)
        
        Public Event GetSiteSensorsCompleted As System.EventHandler(Of GetSiteSensorsCompletedEventArgs)
        
        Public Event GetSiteSensorsStatusCompleted As System.EventHandler(Of GetSiteSensorsStatusCompletedEventArgs)
        
        Public Event GetSensorsCompleted As System.EventHandler(Of GetSensorsCompletedEventArgs)
        
        Public Event CheckLoginCompleted As System.EventHandler(Of CheckLoginCompletedEventArgs)
        
        Public Event GetSensorValuesCompleted As System.EventHandler(Of GetSensorValuesCompletedEventArgs)
        
        Public Event GetSensorsStatusCompleted As System.EventHandler(Of GetSensorsStatusCompletedEventArgs)
        
        Public Event GetSensorStatusCompleted As System.EventHandler(Of GetSensorStatusCompletedEventArgs)
        
        Public Event GetSensorHistoryCompleted As System.EventHandler(Of GetSensorHistoryCompletedEventArgs)
        
        Public Event GetMeteringKWhCompleted As System.EventHandler(Of GetMeteringKWhCompletedEventArgs)
        
        Public Event GetMeteringProfileRecordHistoryCompleted As System.EventHandler(Of GetMeteringProfileRecordHistoryCompletedEventArgs)
        
        Public Event GetMeteringProfileMarkerHistoryCompleted As System.EventHandler(Of GetMeteringProfileMarkerHistoryCompletedEventArgs)
        
        Public Event GetMeteringTarrifCompleted As System.EventHandler(Of GetMeteringTarrifCompletedEventArgs)
        
        Public Event GetMeteringTarrifNamesCompleted As System.EventHandler(Of GetMeteringTarrifNamesCompletedEventArgs)
        
        Public Event GetCamerasCompleted As System.EventHandler(Of GetCamerasCompletedEventArgs)
        
        Public Event GetCameraImageCompleted As System.EventHandler(Of GetCameraImageCompletedEventArgs)
        
        Public Event GetIPDevicesDetailsCompleted As System.EventHandler(Of GetIPDevicesDetailsCompletedEventArgs)
        
        Public Event GetOtherDevicesDetailsCompleted As System.EventHandler(Of GetOtherDevicesDetailsCompletedEventArgs)
        
        Public Event GetSNMPManagerDetailsCompleted As System.EventHandler(Of GetSNMPManagerDetailsCompletedEventArgs)
        
        Public Event OpenCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event CloseCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetConfigSetting(ByVal SettingName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetConfigSetting
            Return MyBase.Channel.BeginGetConfigSetting(SettingName, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetConfigSetting(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetConfigSetting
            Return MyBase.Channel.EndGetConfigSetting(result)
        End Function
        
        Private Function OnBeginGetConfigSetting(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SettingName As String = CType(inValues(0),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetConfigSetting(SettingName, callback, asyncState)
        End Function
        
        Private Function OnEndGetConfigSetting(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As String = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetConfigSetting(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetConfigSettingCompleted(ByVal state As Object)
            If (Not (Me.GetConfigSettingCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetConfigSettingCompleted(Me, New GetConfigSettingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetConfigSettingAsync(ByVal SettingName As String)
            Me.GetConfigSettingAsync(SettingName, Nothing)
        End Sub
        
        Public Overloads Sub GetConfigSettingAsync(ByVal SettingName As String, ByVal userState As Object)
            If (Me.onBeginGetConfigSettingDelegate Is Nothing) Then
                Me.onBeginGetConfigSettingDelegate = AddressOf Me.OnBeginGetConfigSetting
            End If
            If (Me.onEndGetConfigSettingDelegate Is Nothing) Then
                Me.onEndGetConfigSettingDelegate = AddressOf Me.OnEndGetConfigSetting
            End If
            If (Me.onGetConfigSettingCompletedDelegate Is Nothing) Then
                Me.onGetConfigSettingCompletedDelegate = AddressOf Me.OnGetConfigSettingCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetConfigSettingDelegate, New Object() {SettingName}, Me.onEndGetConfigSettingDelegate, Me.onGetConfigSettingCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetRemoteAlertHistory(ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetRemoteAlertHistory
            Return MyBase.Channel.BeginGetRemoteAlertHistory(StartDate, EndDate, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetRemoteAlertHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetRemoteAlertHistory
            Return MyBase.Channel.EndGetRemoteAlertHistory(result)
        End Function
        
        Private Function OnBeginGetRemoteAlertHistory(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim StartDate As Date = CType(inValues(0),Date)
            Dim EndDate As Date = CType(inValues(1),Date)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetRemoteAlertHistory(StartDate, EndDate, callback, asyncState)
        End Function
        
        Private Function OnEndGetRemoteAlertHistory(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetRemoteAlertHistory(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetRemoteAlertHistoryCompleted(ByVal state As Object)
            If (Not (Me.GetRemoteAlertHistoryCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetRemoteAlertHistoryCompleted(Me, New GetRemoteAlertHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetRemoteAlertHistoryAsync(ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetRemoteAlertHistoryAsync(StartDate, EndDate, Nothing)
        End Sub
        
        Public Overloads Sub GetRemoteAlertHistoryAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.onBeginGetRemoteAlertHistoryDelegate Is Nothing) Then
                Me.onBeginGetRemoteAlertHistoryDelegate = AddressOf Me.OnBeginGetRemoteAlertHistory
            End If
            If (Me.onEndGetRemoteAlertHistoryDelegate Is Nothing) Then
                Me.onEndGetRemoteAlertHistoryDelegate = AddressOf Me.OnEndGetRemoteAlertHistory
            End If
            If (Me.onGetRemoteAlertHistoryCompletedDelegate Is Nothing) Then
                Me.onGetRemoteAlertHistoryCompletedDelegate = AddressOf Me.OnGetRemoteAlertHistoryCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetRemoteAlertHistoryDelegate, New Object() {StartDate, EndDate}, Me.onEndGetRemoteAlertHistoryDelegate, Me.onGetRemoteAlertHistoryCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginLogIt(ByVal LogType As String, ByVal LogEntry As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginLogIt
            Return MyBase.Channel.BeginLogIt(LogType, LogEntry, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Sub LiveMonitoring_SLIPmonInterfaceSVC_EndLogIt(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndLogIt
            MyBase.Channel.EndLogIt(result)
        End Sub
        
        Private Function OnBeginLogIt(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim LogType As String = CType(inValues(0),String)
            Dim LogEntry As String = CType(inValues(1),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginLogIt(LogType, LogEntry, callback, asyncState)
        End Function
        
        Private Function OnEndLogIt(ByVal result As System.IAsyncResult) As Object()
            CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndLogIt(result)
            Return Nothing
        End Function
        
        Private Sub OnLogItCompleted(ByVal state As Object)
            If (Not (Me.LogItCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent LogItCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub LogItAsync(ByVal LogType As String, ByVal LogEntry As String)
            Me.LogItAsync(LogType, LogEntry, Nothing)
        End Sub
        
        Public Overloads Sub LogItAsync(ByVal LogType As String, ByVal LogEntry As String, ByVal userState As Object)
            If (Me.onBeginLogItDelegate Is Nothing) Then
                Me.onBeginLogItDelegate = AddressOf Me.OnBeginLogIt
            End If
            If (Me.onEndLogItDelegate Is Nothing) Then
                Me.onEndLogItDelegate = AddressOf Me.OnEndLogIt
            End If
            If (Me.onLogItCompletedDelegate Is Nothing) Then
                Me.onLogItCompletedDelegate = AddressOf Me.OnLogItCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginLogItDelegate, New Object() {LogType, LogEntry}, Me.onEndLogItDelegate, Me.onLogItCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSetting(ByVal KeyName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSetting
            Return MyBase.Channel.BeginGetSetting(KeyName, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSetting(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSetting
            Return MyBase.Channel.EndGetSetting(result)
        End Function
        
        Private Function OnBeginGetSetting(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim KeyName As String = CType(inValues(0),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSetting(KeyName, callback, asyncState)
        End Function
        
        Private Function OnEndGetSetting(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As String = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSetting(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSettingCompleted(ByVal state As Object)
            If (Not (Me.GetSettingCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSettingCompleted(Me, New GetSettingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSettingAsync(ByVal KeyName As String)
            Me.GetSettingAsync(KeyName, Nothing)
        End Sub
        
        Public Overloads Sub GetSettingAsync(ByVal KeyName As String, ByVal userState As Object)
            If (Me.onBeginGetSettingDelegate Is Nothing) Then
                Me.onBeginGetSettingDelegate = AddressOf Me.OnBeginGetSetting
            End If
            If (Me.onEndGetSettingDelegate Is Nothing) Then
                Me.onEndGetSettingDelegate = AddressOf Me.OnEndGetSetting
            End If
            If (Me.onGetSettingCompletedDelegate Is Nothing) Then
                Me.onGetSettingCompletedDelegate = AddressOf Me.OnGetSettingCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSettingDelegate, New Object() {KeyName}, Me.onEndGetSettingDelegate, Me.onGetSettingCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetAll(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetAll
            Return MyBase.Channel.BeginGetAll(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetAll(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetAll
            Return MyBase.Channel.EndGetAll(result)
        End Function
        
        Private Function OnBeginGetAll(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetAll(callback, asyncState)
        End Function
        
        Private Function OnEndGetAll(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetAll(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetAllCompleted(ByVal state As Object)
            If (Not (Me.GetAllCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetAllCompleted(Me, New GetAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetAllAsync()
            Me.GetAllAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetAllAsync(ByVal userState As Object)
            If (Me.onBeginGetAllDelegate Is Nothing) Then
                Me.onBeginGetAllDelegate = AddressOf Me.OnBeginGetAll
            End If
            If (Me.onEndGetAllDelegate Is Nothing) Then
                Me.onEndGetAllDelegate = AddressOf Me.OnEndGetAll
            End If
            If (Me.onGetAllCompletedDelegate Is Nothing) Then
                Me.onGetAllCompletedDelegate = AddressOf Me.OnGetAllCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetAllDelegate, Nothing, Me.onEndGetAllDelegate, Me.onGetAllCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSites(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSites
            Return MyBase.Channel.BeginGetSites(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSites(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSites
            Return MyBase.Channel.EndGetSites(result)
        End Function
        
        Private Function OnBeginGetSites(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSites(callback, asyncState)
        End Function
        
        Private Function OnEndGetSites(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSites(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSitesCompleted(ByVal state As Object)
            If (Not (Me.GetSitesCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSitesCompleted(Me, New GetSitesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSitesAsync()
            Me.GetSitesAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetSitesAsync(ByVal userState As Object)
            If (Me.onBeginGetSitesDelegate Is Nothing) Then
                Me.onBeginGetSitesDelegate = AddressOf Me.OnBeginGetSites
            End If
            If (Me.onEndGetSitesDelegate Is Nothing) Then
                Me.onEndGetSitesDelegate = AddressOf Me.OnEndGetSites
            End If
            If (Me.onGetSitesCompletedDelegate Is Nothing) Then
                Me.onGetSitesCompletedDelegate = AddressOf Me.OnGetSitesCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSitesDelegate, Nothing, Me.onEndGetSitesDelegate, Me.onGetSitesCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetDisplays(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetDisplays
            Return MyBase.Channel.BeginGetDisplays(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetDisplays(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetDisplays
            Return MyBase.Channel.EndGetDisplays(result)
        End Function
        
        Private Function OnBeginGetDisplays(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetDisplays(callback, asyncState)
        End Function
        
        Private Function OnEndGetDisplays(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetDisplays(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetDisplaysCompleted(ByVal state As Object)
            If (Not (Me.GetDisplaysCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetDisplaysCompleted(Me, New GetDisplaysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetDisplaysAsync()
            Me.GetDisplaysAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetDisplaysAsync(ByVal userState As Object)
            If (Me.onBeginGetDisplaysDelegate Is Nothing) Then
                Me.onBeginGetDisplaysDelegate = AddressOf Me.OnBeginGetDisplays
            End If
            If (Me.onEndGetDisplaysDelegate Is Nothing) Then
                Me.onEndGetDisplaysDelegate = AddressOf Me.OnEndGetDisplays
            End If
            If (Me.onGetDisplaysCompletedDelegate Is Nothing) Then
                Me.onGetDisplaysCompletedDelegate = AddressOf Me.OnGetDisplaysCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetDisplaysDelegate, Nothing, Me.onEndGetDisplaysDelegate, Me.onGetDisplaysCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginDelDisplayGroup(ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginDelDisplayGroup
            Return MyBase.Channel.BeginDelDisplayGroup(ID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Sub LiveMonitoring_SLIPmonInterfaceSVC_EndDelDisplayGroup(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndDelDisplayGroup
            MyBase.Channel.EndDelDisplayGroup(result)
        End Sub
        
        Private Function OnBeginDelDisplayGroup(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim ID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginDelDisplayGroup(ID, callback, asyncState)
        End Function
        
        Private Function OnEndDelDisplayGroup(ByVal result As System.IAsyncResult) As Object()
            CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndDelDisplayGroup(result)
            Return Nothing
        End Function
        
        Private Sub OnDelDisplayGroupCompleted(ByVal state As Object)
            If (Not (Me.DelDisplayGroupCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent DelDisplayGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub DelDisplayGroupAsync(ByVal ID As Integer)
            Me.DelDisplayGroupAsync(ID, Nothing)
        End Sub
        
        Public Overloads Sub DelDisplayGroupAsync(ByVal ID As Integer, ByVal userState As Object)
            If (Me.onBeginDelDisplayGroupDelegate Is Nothing) Then
                Me.onBeginDelDisplayGroupDelegate = AddressOf Me.OnBeginDelDisplayGroup
            End If
            If (Me.onEndDelDisplayGroupDelegate Is Nothing) Then
                Me.onEndDelDisplayGroupDelegate = AddressOf Me.OnEndDelDisplayGroup
            End If
            If (Me.onDelDisplayGroupCompletedDelegate Is Nothing) Then
                Me.onDelDisplayGroupCompletedDelegate = AddressOf Me.OnDelDisplayGroupCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginDelDisplayGroupDelegate, New Object() {ID}, Me.onEndDelDisplayGroupDelegate, Me.onDelDisplayGroupCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetDisplayGroup(ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetDisplayGroup
            Return MyBase.Channel.BeginGetDisplayGroup(ID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetDisplayGroup(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetDisplayGroup
            Return MyBase.Channel.EndGetDisplayGroup(result)
        End Function
        
        Private Function OnBeginGetDisplayGroup(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim ID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetDisplayGroup(ID, callback, asyncState)
        End Function
        
        Private Function OnEndGetDisplayGroup(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As String = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetDisplayGroup(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetDisplayGroupCompleted(ByVal state As Object)
            If (Not (Me.GetDisplayGroupCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetDisplayGroupCompleted(Me, New GetDisplayGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetDisplayGroupAsync(ByVal ID As Integer)
            Me.GetDisplayGroupAsync(ID, Nothing)
        End Sub
        
        Public Overloads Sub GetDisplayGroupAsync(ByVal ID As Integer, ByVal userState As Object)
            If (Me.onBeginGetDisplayGroupDelegate Is Nothing) Then
                Me.onBeginGetDisplayGroupDelegate = AddressOf Me.OnBeginGetDisplayGroup
            End If
            If (Me.onEndGetDisplayGroupDelegate Is Nothing) Then
                Me.onEndGetDisplayGroupDelegate = AddressOf Me.OnEndGetDisplayGroup
            End If
            If (Me.onGetDisplayGroupCompletedDelegate Is Nothing) Then
                Me.onGetDisplayGroupCompletedDelegate = AddressOf Me.OnGetDisplayGroupCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetDisplayGroupDelegate, New Object() {ID}, Me.onEndGetDisplayGroupDelegate, Me.onGetDisplayGroupCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetDisplayGroups(ByVal DisplayID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetDisplayGroups
            Return MyBase.Channel.BeginGetDisplayGroups(DisplayID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetDisplayGroups(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetDisplayGroups
            Return MyBase.Channel.EndGetDisplayGroups(result)
        End Function
        
        Private Function OnBeginGetDisplayGroups(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim DisplayID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetDisplayGroups(DisplayID, callback, asyncState)
        End Function
        
        Private Function OnEndGetDisplayGroups(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetDisplayGroups(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetDisplayGroupsCompleted(ByVal state As Object)
            If (Not (Me.GetDisplayGroupsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetDisplayGroupsCompleted(Me, New GetDisplayGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetDisplayGroupsAsync(ByVal DisplayID As Integer)
            Me.GetDisplayGroupsAsync(DisplayID, Nothing)
        End Sub
        
        Public Overloads Sub GetDisplayGroupsAsync(ByVal DisplayID As Integer, ByVal userState As Object)
            If (Me.onBeginGetDisplayGroupsDelegate Is Nothing) Then
                Me.onBeginGetDisplayGroupsDelegate = AddressOf Me.OnBeginGetDisplayGroups
            End If
            If (Me.onEndGetDisplayGroupsDelegate Is Nothing) Then
                Me.onEndGetDisplayGroupsDelegate = AddressOf Me.OnEndGetDisplayGroups
            End If
            If (Me.onGetDisplayGroupsCompletedDelegate Is Nothing) Then
                Me.onGetDisplayGroupsCompletedDelegate = AddressOf Me.OnGetDisplayGroupsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetDisplayGroupsDelegate, New Object() {DisplayID}, Me.onEndGetDisplayGroupsDelegate, Me.onGetDisplayGroupsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginReturnDisplayFiles(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginReturnDisplayFiles
            Return MyBase.Channel.BeginReturnDisplayFiles(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndReturnDisplayFiles(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndReturnDisplayFiles
            Return MyBase.Channel.EndReturnDisplayFiles(result)
        End Function
        
        Private Function OnBeginReturnDisplayFiles(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginReturnDisplayFiles(callback, asyncState)
        End Function
        
        Private Function OnEndReturnDisplayFiles(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndReturnDisplayFiles(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnReturnDisplayFilesCompleted(ByVal state As Object)
            If (Not (Me.ReturnDisplayFilesCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent ReturnDisplayFilesCompleted(Me, New ReturnDisplayFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub ReturnDisplayFilesAsync()
            Me.ReturnDisplayFilesAsync(Nothing)
        End Sub
        
        Public Overloads Sub ReturnDisplayFilesAsync(ByVal userState As Object)
            If (Me.onBeginReturnDisplayFilesDelegate Is Nothing) Then
                Me.onBeginReturnDisplayFilesDelegate = AddressOf Me.OnBeginReturnDisplayFiles
            End If
            If (Me.onEndReturnDisplayFilesDelegate Is Nothing) Then
                Me.onEndReturnDisplayFilesDelegate = AddressOf Me.OnEndReturnDisplayFiles
            End If
            If (Me.onReturnDisplayFilesCompletedDelegate Is Nothing) Then
                Me.onReturnDisplayFilesCompletedDelegate = AddressOf Me.OnReturnDisplayFilesCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginReturnDisplayFilesDelegate, Nothing, Me.onEndReturnDisplayFilesDelegate, Me.onReturnDisplayFilesCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginDeleteDisplayFiles(ByVal FileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginDeleteDisplayFiles
            Return MyBase.Channel.BeginDeleteDisplayFiles(FileName, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndDeleteDisplayFiles(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndDeleteDisplayFiles
            Return MyBase.Channel.EndDeleteDisplayFiles(result)
        End Function
        
        Private Function OnBeginDeleteDisplayFiles(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim FileName As String = CType(inValues(0),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginDeleteDisplayFiles(FileName, callback, asyncState)
        End Function
        
        Private Function OnEndDeleteDisplayFiles(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndDeleteDisplayFiles(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnDeleteDisplayFilesCompleted(ByVal state As Object)
            If (Not (Me.DeleteDisplayFilesCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent DeleteDisplayFilesCompleted(Me, New DeleteDisplayFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub DeleteDisplayFilesAsync(ByVal FileName As String)
            Me.DeleteDisplayFilesAsync(FileName, Nothing)
        End Sub
        
        Public Overloads Sub DeleteDisplayFilesAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.onBeginDeleteDisplayFilesDelegate Is Nothing) Then
                Me.onBeginDeleteDisplayFilesDelegate = AddressOf Me.OnBeginDeleteDisplayFiles
            End If
            If (Me.onEndDeleteDisplayFilesDelegate Is Nothing) Then
                Me.onEndDeleteDisplayFilesDelegate = AddressOf Me.OnEndDeleteDisplayFiles
            End If
            If (Me.onDeleteDisplayFilesCompletedDelegate Is Nothing) Then
                Me.onDeleteDisplayFilesCompletedDelegate = AddressOf Me.OnDeleteDisplayFilesCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginDeleteDisplayFilesDelegate, New Object() {FileName}, Me.onEndDeleteDisplayFilesDelegate, Me.onDeleteDisplayFilesCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginUploadDisplayFileBin(ByVal _SerialFile As String, ByVal FileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginUploadDisplayFileBin
            Return MyBase.Channel.BeginUploadDisplayFileBin(_SerialFile, FileName, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Sub LiveMonitoring_SLIPmonInterfaceSVC_EndUploadDisplayFileBin(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndUploadDisplayFileBin
            MyBase.Channel.EndUploadDisplayFileBin(result)
        End Sub
        
        Private Function OnBeginUploadDisplayFileBin(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim _SerialFile As String = CType(inValues(0),String)
            Dim FileName As String = CType(inValues(1),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginUploadDisplayFileBin(_SerialFile, FileName, callback, asyncState)
        End Function
        
        Private Function OnEndUploadDisplayFileBin(ByVal result As System.IAsyncResult) As Object()
            CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndUploadDisplayFileBin(result)
            Return Nothing
        End Function
        
        Private Sub OnUploadDisplayFileBinCompleted(ByVal state As Object)
            If (Not (Me.UploadDisplayFileBinCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UploadDisplayFileBinCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UploadDisplayFileBinAsync(ByVal _SerialFile As String, ByVal FileName As String)
            Me.UploadDisplayFileBinAsync(_SerialFile, FileName, Nothing)
        End Sub
        
        Public Overloads Sub UploadDisplayFileBinAsync(ByVal _SerialFile As String, ByVal FileName As String, ByVal userState As Object)
            If (Me.onBeginUploadDisplayFileBinDelegate Is Nothing) Then
                Me.onBeginUploadDisplayFileBinDelegate = AddressOf Me.OnBeginUploadDisplayFileBin
            End If
            If (Me.onEndUploadDisplayFileBinDelegate Is Nothing) Then
                Me.onEndUploadDisplayFileBinDelegate = AddressOf Me.OnEndUploadDisplayFileBin
            End If
            If (Me.onUploadDisplayFileBinCompletedDelegate Is Nothing) Then
                Me.onUploadDisplayFileBinCompletedDelegate = AddressOf Me.OnUploadDisplayFileBinCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUploadDisplayFileBinDelegate, New Object() {_SerialFile, FileName}, Me.onEndUploadDisplayFileBinDelegate, Me.onUploadDisplayFileBinCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginAddDisplay(ByVal DisplayName As String, ByVal DisplayType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginAddDisplay
            Return MyBase.Channel.BeginAddDisplay(DisplayName, DisplayType, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndAddDisplay(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndAddDisplay
            Return MyBase.Channel.EndAddDisplay(result)
        End Function
        
        Private Function OnBeginAddDisplay(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim DisplayName As String = CType(inValues(0),String)
            Dim DisplayType As Integer = CType(inValues(1),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginAddDisplay(DisplayName, DisplayType, callback, asyncState)
        End Function
        
        Private Function OnEndAddDisplay(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndAddDisplay(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnAddDisplayCompleted(ByVal state As Object)
            If (Not (Me.AddDisplayCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent AddDisplayCompleted(Me, New AddDisplayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub AddDisplayAsync(ByVal DisplayName As String, ByVal DisplayType As Integer)
            Me.AddDisplayAsync(DisplayName, DisplayType, Nothing)
        End Sub
        
        Public Overloads Sub AddDisplayAsync(ByVal DisplayName As String, ByVal DisplayType As Integer, ByVal userState As Object)
            If (Me.onBeginAddDisplayDelegate Is Nothing) Then
                Me.onBeginAddDisplayDelegate = AddressOf Me.OnBeginAddDisplay
            End If
            If (Me.onEndAddDisplayDelegate Is Nothing) Then
                Me.onEndAddDisplayDelegate = AddressOf Me.OnEndAddDisplay
            End If
            If (Me.onAddDisplayCompletedDelegate Is Nothing) Then
                Me.onAddDisplayCompletedDelegate = AddressOf Me.OnAddDisplayCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginAddDisplayDelegate, New Object() {DisplayName, DisplayType}, Me.onEndAddDisplayDelegate, Me.onAddDisplayCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginAddDisplayGroupPage(ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginAddDisplayGroupPage
            Return MyBase.Channel.BeginAddDisplayGroupPage(DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndAddDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndAddDisplayGroupPage
            Return MyBase.Channel.EndAddDisplayGroupPage(result)
        End Function
        
        Private Function OnBeginAddDisplayGroupPage(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim DisplayID As Integer = CType(inValues(0),Integer)
            Dim GroupName As String = CType(inValues(1),String)
            Dim DisplayType As Integer = CType(inValues(2),Integer)
            Dim DisplayImage As String = CType(inValues(3),String)
            Dim DisplayWidth As Double = CType(inValues(4),Double)
            Dim DisplayHeight As Double = CType(inValues(5),Double)
            Dim Screen As Integer = CType(inValues(6),Integer)
            Dim PanelPos As Integer = CType(inValues(7),Integer)
            Dim PanelNo As Integer = CType(inValues(8),Integer)
            Dim Extra1 As String = CType(inValues(9),String)
            Dim Extra2 As String = CType(inValues(10),String)
            Dim ExtraVal1 As Double = CType(inValues(11),Double)
            Dim ExtraVal2 As Double = CType(inValues(12),Double)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginAddDisplayGroupPage(DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2, callback, asyncState)
        End Function
        
        Private Function OnEndAddDisplayGroupPage(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndAddDisplayGroupPage(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnAddDisplayGroupPageCompleted(ByVal state As Object)
            If (Not (Me.AddDisplayGroupPageCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent AddDisplayGroupPageCompleted(Me, New AddDisplayGroupPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub AddDisplayGroupPageAsync(ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double)
            Me.AddDisplayGroupPageAsync(DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2, Nothing)
        End Sub
        
        Public Overloads Sub AddDisplayGroupPageAsync(ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double, ByVal userState As Object)
            If (Me.onBeginAddDisplayGroupPageDelegate Is Nothing) Then
                Me.onBeginAddDisplayGroupPageDelegate = AddressOf Me.OnBeginAddDisplayGroupPage
            End If
            If (Me.onEndAddDisplayGroupPageDelegate Is Nothing) Then
                Me.onEndAddDisplayGroupPageDelegate = AddressOf Me.OnEndAddDisplayGroupPage
            End If
            If (Me.onAddDisplayGroupPageCompletedDelegate Is Nothing) Then
                Me.onAddDisplayGroupPageCompletedDelegate = AddressOf Me.OnAddDisplayGroupPageCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginAddDisplayGroupPageDelegate, New Object() {DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2}, Me.onEndAddDisplayGroupPageDelegate, Me.onAddDisplayGroupPageCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginEditDisplayGroupPage( _
                    ByVal ID As Integer,  _
                    ByVal DisplayID As Integer,  _
                    ByVal GroupName As String,  _
                    ByVal DisplayType As Integer,  _
                    ByVal DisplayImage As String,  _
                    ByVal DisplayWidth As Double,  _
                    ByVal DisplayHeight As Double,  _
                    ByVal Screen As Integer,  _
                    ByVal PanelPos As Integer,  _
                    ByVal PanelNo As Integer,  _
                    ByVal Extra1 As String,  _
                    ByVal Extra2 As String,  _
                    ByVal ExtraVal1 As Double,  _
                    ByVal ExtraVal2 As Double,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginEditDisplayGroupPage
            Return MyBase.Channel.BeginEditDisplayGroupPage(ID, DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndEditDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndEditDisplayGroupPage
            Return MyBase.Channel.EndEditDisplayGroupPage(result)
        End Function
        
        Private Function OnBeginEditDisplayGroupPage(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim ID As Integer = CType(inValues(0),Integer)
            Dim DisplayID As Integer = CType(inValues(1),Integer)
            Dim GroupName As String = CType(inValues(2),String)
            Dim DisplayType As Integer = CType(inValues(3),Integer)
            Dim DisplayImage As String = CType(inValues(4),String)
            Dim DisplayWidth As Double = CType(inValues(5),Double)
            Dim DisplayHeight As Double = CType(inValues(6),Double)
            Dim Screen As Integer = CType(inValues(7),Integer)
            Dim PanelPos As Integer = CType(inValues(8),Integer)
            Dim PanelNo As Integer = CType(inValues(9),Integer)
            Dim Extra1 As String = CType(inValues(10),String)
            Dim Extra2 As String = CType(inValues(11),String)
            Dim ExtraVal1 As Double = CType(inValues(12),Double)
            Dim ExtraVal2 As Double = CType(inValues(13),Double)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginEditDisplayGroupPage(ID, DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2, callback, asyncState)
        End Function
        
        Private Function OnEndEditDisplayGroupPage(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndEditDisplayGroupPage(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnEditDisplayGroupPageCompleted(ByVal state As Object)
            If (Not (Me.EditDisplayGroupPageCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent EditDisplayGroupPageCompleted(Me, New EditDisplayGroupPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub EditDisplayGroupPageAsync(ByVal ID As Integer, ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double)
            Me.EditDisplayGroupPageAsync(ID, DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2, Nothing)
        End Sub
        
        Public Overloads Sub EditDisplayGroupPageAsync(ByVal ID As Integer, ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double, ByVal userState As Object)
            If (Me.onBeginEditDisplayGroupPageDelegate Is Nothing) Then
                Me.onBeginEditDisplayGroupPageDelegate = AddressOf Me.OnBeginEditDisplayGroupPage
            End If
            If (Me.onEndEditDisplayGroupPageDelegate Is Nothing) Then
                Me.onEndEditDisplayGroupPageDelegate = AddressOf Me.OnEndEditDisplayGroupPage
            End If
            If (Me.onEditDisplayGroupPageCompletedDelegate Is Nothing) Then
                Me.onEditDisplayGroupPageCompletedDelegate = AddressOf Me.OnEditDisplayGroupPageCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginEditDisplayGroupPageDelegate, New Object() {ID, DisplayID, GroupName, DisplayType, DisplayImage, DisplayWidth, DisplayHeight, Screen, PanelPos, PanelNo, Extra1, Extra2, ExtraVal1, ExtraVal2}, Me.onEndEditDisplayGroupPageDelegate, Me.onEditDisplayGroupPageCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginChangeDisplayGroupPage(ByVal ID As Integer, ByVal NewScreen As Integer, ByVal OldScreen As Integer, ByVal DisplayGroup As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginChangeDisplayGroupPage
            Return MyBase.Channel.BeginChangeDisplayGroupPage(ID, NewScreen, OldScreen, DisplayGroup, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndChangeDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndChangeDisplayGroupPage
            Return MyBase.Channel.EndChangeDisplayGroupPage(result)
        End Function
        
        Private Function OnBeginChangeDisplayGroupPage(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim ID As Integer = CType(inValues(0),Integer)
            Dim NewScreen As Integer = CType(inValues(1),Integer)
            Dim OldScreen As Integer = CType(inValues(2),Integer)
            Dim DisplayGroup As Integer = CType(inValues(3),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginChangeDisplayGroupPage(ID, NewScreen, OldScreen, DisplayGroup, callback, asyncState)
        End Function
        
        Private Function OnEndChangeDisplayGroupPage(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndChangeDisplayGroupPage(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnChangeDisplayGroupPageCompleted(ByVal state As Object)
            If (Not (Me.ChangeDisplayGroupPageCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent ChangeDisplayGroupPageCompleted(Me, New ChangeDisplayGroupPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub ChangeDisplayGroupPageAsync(ByVal ID As Integer, ByVal NewScreen As Integer, ByVal OldScreen As Integer, ByVal DisplayGroup As Integer)
            Me.ChangeDisplayGroupPageAsync(ID, NewScreen, OldScreen, DisplayGroup, Nothing)
        End Sub
        
        Public Overloads Sub ChangeDisplayGroupPageAsync(ByVal ID As Integer, ByVal NewScreen As Integer, ByVal OldScreen As Integer, ByVal DisplayGroup As Integer, ByVal userState As Object)
            If (Me.onBeginChangeDisplayGroupPageDelegate Is Nothing) Then
                Me.onBeginChangeDisplayGroupPageDelegate = AddressOf Me.OnBeginChangeDisplayGroupPage
            End If
            If (Me.onEndChangeDisplayGroupPageDelegate Is Nothing) Then
                Me.onEndChangeDisplayGroupPageDelegate = AddressOf Me.OnEndChangeDisplayGroupPage
            End If
            If (Me.onChangeDisplayGroupPageCompletedDelegate Is Nothing) Then
                Me.onChangeDisplayGroupPageCompletedDelegate = AddressOf Me.OnChangeDisplayGroupPageCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginChangeDisplayGroupPageDelegate, New Object() {ID, NewScreen, OldScreen, DisplayGroup}, Me.onEndChangeDisplayGroupPageDelegate, Me.onChangeDisplayGroupPageCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginSetDisplaySensorPosition(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal SensorTop As Double, ByVal SensorLeft As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginSetDisplaySensorPosition
            Return MyBase.Channel.BeginSetDisplaySensorPosition(DisplayID, SensorID, SensorTop, SensorLeft, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Sub LiveMonitoring_SLIPmonInterfaceSVC_EndSetDisplaySensorPosition(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndSetDisplaySensorPosition
            MyBase.Channel.EndSetDisplaySensorPosition(result)
        End Sub
        
        Private Function OnBeginSetDisplaySensorPosition(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim DisplayID As Integer = CType(inValues(0),Integer)
            Dim SensorID As Integer = CType(inValues(1),Integer)
            Dim SensorTop As Double = CType(inValues(2),Double)
            Dim SensorLeft As Double = CType(inValues(3),Double)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginSetDisplaySensorPosition(DisplayID, SensorID, SensorTop, SensorLeft, callback, asyncState)
        End Function
        
        Private Function OnEndSetDisplaySensorPosition(ByVal result As System.IAsyncResult) As Object()
            CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndSetDisplaySensorPosition(result)
            Return Nothing
        End Function
        
        Private Sub OnSetDisplaySensorPositionCompleted(ByVal state As Object)
            If (Not (Me.SetDisplaySensorPositionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent SetDisplaySensorPositionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub SetDisplaySensorPositionAsync(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal SensorTop As Double, ByVal SensorLeft As Double)
            Me.SetDisplaySensorPositionAsync(DisplayID, SensorID, SensorTop, SensorLeft, Nothing)
        End Sub
        
        Public Overloads Sub SetDisplaySensorPositionAsync(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal SensorTop As Double, ByVal SensorLeft As Double, ByVal userState As Object)
            If (Me.onBeginSetDisplaySensorPositionDelegate Is Nothing) Then
                Me.onBeginSetDisplaySensorPositionDelegate = AddressOf Me.OnBeginSetDisplaySensorPosition
            End If
            If (Me.onEndSetDisplaySensorPositionDelegate Is Nothing) Then
                Me.onEndSetDisplaySensorPositionDelegate = AddressOf Me.OnEndSetDisplaySensorPosition
            End If
            If (Me.onSetDisplaySensorPositionCompletedDelegate Is Nothing) Then
                Me.onSetDisplaySensorPositionCompletedDelegate = AddressOf Me.OnSetDisplaySensorPositionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginSetDisplaySensorPositionDelegate, New Object() {DisplayID, SensorID, SensorTop, SensorLeft}, Me.onEndSetDisplaySensorPositionDelegate, Me.onSetDisplaySensorPositionCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginSetDisplayBackImage(ByVal DisplayID As Integer, ByVal BackImage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginSetDisplayBackImage
            Return MyBase.Channel.BeginSetDisplayBackImage(DisplayID, BackImage, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Sub LiveMonitoring_SLIPmonInterfaceSVC_EndSetDisplayBackImage(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndSetDisplayBackImage
            MyBase.Channel.EndSetDisplayBackImage(result)
        End Sub
        
        Private Function OnBeginSetDisplayBackImage(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim DisplayID As Integer = CType(inValues(0),Integer)
            Dim BackImage As String = CType(inValues(1),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginSetDisplayBackImage(DisplayID, BackImage, callback, asyncState)
        End Function
        
        Private Function OnEndSetDisplayBackImage(ByVal result As System.IAsyncResult) As Object()
            CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndSetDisplayBackImage(result)
            Return Nothing
        End Function
        
        Private Sub OnSetDisplayBackImageCompleted(ByVal state As Object)
            If (Not (Me.SetDisplayBackImageCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent SetDisplayBackImageCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub SetDisplayBackImageAsync(ByVal DisplayID As Integer, ByVal BackImage As String)
            Me.SetDisplayBackImageAsync(DisplayID, BackImage, Nothing)
        End Sub
        
        Public Overloads Sub SetDisplayBackImageAsync(ByVal DisplayID As Integer, ByVal BackImage As String, ByVal userState As Object)
            If (Me.onBeginSetDisplayBackImageDelegate Is Nothing) Then
                Me.onBeginSetDisplayBackImageDelegate = AddressOf Me.OnBeginSetDisplayBackImage
            End If
            If (Me.onEndSetDisplayBackImageDelegate Is Nothing) Then
                Me.onEndSetDisplayBackImageDelegate = AddressOf Me.OnEndSetDisplayBackImage
            End If
            If (Me.onSetDisplayBackImageCompletedDelegate Is Nothing) Then
                Me.onSetDisplayBackImageCompletedDelegate = AddressOf Me.OnSetDisplayBackImageCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginSetDisplayBackImageDelegate, New Object() {DisplayID, BackImage}, Me.onEndSetDisplayBackImageDelegate, Me.onSetDisplayBackImageCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginRemoveSensor(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginRemoveSensor
            Return MyBase.Channel.BeginRemoveSensor(DisplayID, SensorID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndRemoveSensor(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndRemoveSensor
            Return MyBase.Channel.EndRemoveSensor(result)
        End Function
        
        Private Function OnBeginRemoveSensor(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim DisplayID As Integer = CType(inValues(0),Integer)
            Dim SensorID As Integer = CType(inValues(1),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginRemoveSensor(DisplayID, SensorID, callback, asyncState)
        End Function
        
        Private Function OnEndRemoveSensor(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndRemoveSensor(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnRemoveSensorCompleted(ByVal state As Object)
            If (Not (Me.RemoveSensorCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent RemoveSensorCompleted(Me, New RemoveSensorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub RemoveSensorAsync(ByVal DisplayID As Integer, ByVal SensorID As Integer)
            Me.RemoveSensorAsync(DisplayID, SensorID, Nothing)
        End Sub
        
        Public Overloads Sub RemoveSensorAsync(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal userState As Object)
            If (Me.onBeginRemoveSensorDelegate Is Nothing) Then
                Me.onBeginRemoveSensorDelegate = AddressOf Me.OnBeginRemoveSensor
            End If
            If (Me.onEndRemoveSensorDelegate Is Nothing) Then
                Me.onEndRemoveSensorDelegate = AddressOf Me.OnEndRemoveSensor
            End If
            If (Me.onRemoveSensorCompletedDelegate Is Nothing) Then
                Me.onRemoveSensorCompletedDelegate = AddressOf Me.OnRemoveSensorCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginRemoveSensorDelegate, New Object() {DisplayID, SensorID}, Me.onEndRemoveSensorDelegate, Me.onRemoveSensorCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetAllSensors(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetAllSensors
            Return MyBase.Channel.BeginGetAllSensors(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetAllSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetAllSensors
            Return MyBase.Channel.EndGetAllSensors(result)
        End Function
        
        Private Function OnBeginGetAllSensors(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetAllSensors(callback, asyncState)
        End Function
        
        Private Function OnEndGetAllSensors(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetAllSensors(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetAllSensorsCompleted(ByVal state As Object)
            If (Not (Me.GetAllSensorsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetAllSensorsCompleted(Me, New GetAllSensorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetAllSensorsAsync()
            Me.GetAllSensorsAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetAllSensorsAsync(ByVal userState As Object)
            If (Me.onBeginGetAllSensorsDelegate Is Nothing) Then
                Me.onBeginGetAllSensorsDelegate = AddressOf Me.OnBeginGetAllSensors
            End If
            If (Me.onEndGetAllSensorsDelegate Is Nothing) Then
                Me.onEndGetAllSensorsDelegate = AddressOf Me.OnEndGetAllSensors
            End If
            If (Me.onGetAllSensorsCompletedDelegate Is Nothing) Then
                Me.onGetAllSensorsCompletedDelegate = AddressOf Me.OnGetAllSensorsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetAllSensorsDelegate, Nothing, Me.onEndGetAllSensorsDelegate, Me.onGetAllSensorsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSpecificSensorDisplay(ByVal SensorId As Integer, ByVal DisplayID As Integer, ByVal SensorScale As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSpecificSensorDisplay
            Return MyBase.Channel.BeginGetSpecificSensorDisplay(SensorId, DisplayID, SensorScale, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSpecificSensorDisplay(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSpecificSensorDisplay
            Return MyBase.Channel.EndGetSpecificSensorDisplay(result)
        End Function
        
        Private Function OnBeginGetSpecificSensorDisplay(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SensorId As Integer = CType(inValues(0),Integer)
            Dim DisplayID As Integer = CType(inValues(1),Integer)
            Dim SensorScale As Integer = CType(inValues(2),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSpecificSensorDisplay(SensorId, DisplayID, SensorScale, callback, asyncState)
        End Function
        
        Private Function OnEndGetSpecificSensorDisplay(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSpecificSensorDisplay(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSpecificSensorDisplayCompleted(ByVal state As Object)
            If (Not (Me.GetSpecificSensorDisplayCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSpecificSensorDisplayCompleted(Me, New GetSpecificSensorDisplayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSpecificSensorDisplayAsync(ByVal SensorId As Integer, ByVal DisplayID As Integer, ByVal SensorScale As Integer)
            Me.GetSpecificSensorDisplayAsync(SensorId, DisplayID, SensorScale, Nothing)
        End Sub
        
        Public Overloads Sub GetSpecificSensorDisplayAsync(ByVal SensorId As Integer, ByVal DisplayID As Integer, ByVal SensorScale As Integer, ByVal userState As Object)
            If (Me.onBeginGetSpecificSensorDisplayDelegate Is Nothing) Then
                Me.onBeginGetSpecificSensorDisplayDelegate = AddressOf Me.OnBeginGetSpecificSensorDisplay
            End If
            If (Me.onEndGetSpecificSensorDisplayDelegate Is Nothing) Then
                Me.onEndGetSpecificSensorDisplayDelegate = AddressOf Me.OnEndGetSpecificSensorDisplay
            End If
            If (Me.onGetSpecificSensorDisplayCompletedDelegate Is Nothing) Then
                Me.onGetSpecificSensorDisplayCompletedDelegate = AddressOf Me.OnGetSpecificSensorDisplayCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSpecificSensorDisplayDelegate, New Object() {SensorId, DisplayID, SensorScale}, Me.onEndGetSpecificSensorDisplayDelegate, Me.onGetSpecificSensorDisplayCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetListSensors(ByVal SensorIds As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetListSensors
            Return MyBase.Channel.BeginGetListSensors(SensorIds, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetListSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetListSensors
            Return MyBase.Channel.EndGetListSensors(result)
        End Function
        
        Private Function OnBeginGetListSensors(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SensorIds As String = CType(inValues(0),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetListSensors(SensorIds, callback, asyncState)
        End Function
        
        Private Function OnEndGetListSensors(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetListSensors(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetListSensorsCompleted(ByVal state As Object)
            If (Not (Me.GetListSensorsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetListSensorsCompleted(Me, New GetListSensorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetListSensorsAsync(ByVal SensorIds As String)
            Me.GetListSensorsAsync(SensorIds, Nothing)
        End Sub
        
        Public Overloads Sub GetListSensorsAsync(ByVal SensorIds As String, ByVal userState As Object)
            If (Me.onBeginGetListSensorsDelegate Is Nothing) Then
                Me.onBeginGetListSensorsDelegate = AddressOf Me.OnBeginGetListSensors
            End If
            If (Me.onEndGetListSensorsDelegate Is Nothing) Then
                Me.onEndGetListSensorsDelegate = AddressOf Me.OnEndGetListSensors
            End If
            If (Me.onGetListSensorsCompletedDelegate Is Nothing) Then
                Me.onGetListSensorsCompletedDelegate = AddressOf Me.OnGetListSensorsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetListSensorsDelegate, New Object() {SensorIds}, Me.onEndGetListSensorsDelegate, Me.onGetListSensorsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetGroupSensors(ByVal GroupId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetGroupSensors
            Return MyBase.Channel.BeginGetGroupSensors(GroupId, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetGroupSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetGroupSensors
            Return MyBase.Channel.EndGetGroupSensors(result)
        End Function
        
        Private Function OnBeginGetGroupSensors(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim GroupId As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetGroupSensors(GroupId, callback, asyncState)
        End Function
        
        Private Function OnEndGetGroupSensors(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetGroupSensors(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetGroupSensorsCompleted(ByVal state As Object)
            If (Not (Me.GetGroupSensorsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetGroupSensorsCompleted(Me, New GetGroupSensorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetGroupSensorsAsync(ByVal GroupId As Integer)
            Me.GetGroupSensorsAsync(GroupId, Nothing)
        End Sub
        
        Public Overloads Sub GetGroupSensorsAsync(ByVal GroupId As Integer, ByVal userState As Object)
            If (Me.onBeginGetGroupSensorsDelegate Is Nothing) Then
                Me.onBeginGetGroupSensorsDelegate = AddressOf Me.OnBeginGetGroupSensors
            End If
            If (Me.onEndGetGroupSensorsDelegate Is Nothing) Then
                Me.onEndGetGroupSensorsDelegate = AddressOf Me.OnEndGetGroupSensors
            End If
            If (Me.onGetGroupSensorsCompletedDelegate Is Nothing) Then
                Me.onGetGroupSensorsCompletedDelegate = AddressOf Me.OnGetGroupSensorsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetGroupSensorsDelegate, New Object() {GroupId}, Me.onEndGetGroupSensorsDelegate, Me.onGetGroupSensorsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetGroupSensorsStatus(ByVal GroupID As Integer, ByVal Sensors As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetGroupSensorsStatus
            Return MyBase.Channel.BeginGetGroupSensorsStatus(GroupID, Sensors, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetGroupSensorsStatus(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetGroupSensorsStatus
            Return MyBase.Channel.EndGetGroupSensorsStatus(result)
        End Function
        
        Private Function OnBeginGetGroupSensorsStatus(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim GroupID As Integer = CType(inValues(0),Integer)
            Dim Sensors As String = CType(inValues(1),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetGroupSensorsStatus(GroupID, Sensors, callback, asyncState)
        End Function
        
        Private Function OnEndGetGroupSensorsStatus(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetGroupSensorsStatus(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetGroupSensorsStatusCompleted(ByVal state As Object)
            If (Not (Me.GetGroupSensorsStatusCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetGroupSensorsStatusCompleted(Me, New GetGroupSensorsStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetGroupSensorsStatusAsync(ByVal GroupID As Integer, ByVal Sensors As String)
            Me.GetGroupSensorsStatusAsync(GroupID, Sensors, Nothing)
        End Sub
        
        Public Overloads Sub GetGroupSensorsStatusAsync(ByVal GroupID As Integer, ByVal Sensors As String, ByVal userState As Object)
            If (Me.onBeginGetGroupSensorsStatusDelegate Is Nothing) Then
                Me.onBeginGetGroupSensorsStatusDelegate = AddressOf Me.OnBeginGetGroupSensorsStatus
            End If
            If (Me.onEndGetGroupSensorsStatusDelegate Is Nothing) Then
                Me.onEndGetGroupSensorsStatusDelegate = AddressOf Me.OnEndGetGroupSensorsStatus
            End If
            If (Me.onGetGroupSensorsStatusCompletedDelegate Is Nothing) Then
                Me.onGetGroupSensorsStatusCompletedDelegate = AddressOf Me.OnGetGroupSensorsStatusCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetGroupSensorsStatusDelegate, New Object() {GroupID, Sensors}, Me.onEndGetGroupSensorsStatusDelegate, Me.onGetGroupSensorsStatusCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSiteSensors(ByVal SiteId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSiteSensors
            Return MyBase.Channel.BeginGetSiteSensors(SiteId, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSiteSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSiteSensors
            Return MyBase.Channel.EndGetSiteSensors(result)
        End Function
        
        Private Function OnBeginGetSiteSensors(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SiteId As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSiteSensors(SiteId, callback, asyncState)
        End Function
        
        Private Function OnEndGetSiteSensors(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSiteSensors(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSiteSensorsCompleted(ByVal state As Object)
            If (Not (Me.GetSiteSensorsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSiteSensorsCompleted(Me, New GetSiteSensorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSiteSensorsAsync(ByVal SiteId As Integer)
            Me.GetSiteSensorsAsync(SiteId, Nothing)
        End Sub
        
        Public Overloads Sub GetSiteSensorsAsync(ByVal SiteId As Integer, ByVal userState As Object)
            If (Me.onBeginGetSiteSensorsDelegate Is Nothing) Then
                Me.onBeginGetSiteSensorsDelegate = AddressOf Me.OnBeginGetSiteSensors
            End If
            If (Me.onEndGetSiteSensorsDelegate Is Nothing) Then
                Me.onEndGetSiteSensorsDelegate = AddressOf Me.OnEndGetSiteSensors
            End If
            If (Me.onGetSiteSensorsCompletedDelegate Is Nothing) Then
                Me.onGetSiteSensorsCompletedDelegate = AddressOf Me.OnGetSiteSensorsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSiteSensorsDelegate, New Object() {SiteId}, Me.onEndGetSiteSensorsDelegate, Me.onGetSiteSensorsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSiteSensorsStatus(ByVal SiteId As Integer, ByVal Sensors As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSiteSensorsStatus
            Return MyBase.Channel.BeginGetSiteSensorsStatus(SiteId, Sensors, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSiteSensorsStatus(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSiteSensorsStatus
            Return MyBase.Channel.EndGetSiteSensorsStatus(result)
        End Function
        
        Private Function OnBeginGetSiteSensorsStatus(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SiteId As Integer = CType(inValues(0),Integer)
            Dim Sensors As String = CType(inValues(1),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSiteSensorsStatus(SiteId, Sensors, callback, asyncState)
        End Function
        
        Private Function OnEndGetSiteSensorsStatus(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSiteSensorsStatus(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSiteSensorsStatusCompleted(ByVal state As Object)
            If (Not (Me.GetSiteSensorsStatusCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSiteSensorsStatusCompleted(Me, New GetSiteSensorsStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSiteSensorsStatusAsync(ByVal SiteId As Integer, ByVal Sensors As String)
            Me.GetSiteSensorsStatusAsync(SiteId, Sensors, Nothing)
        End Sub
        
        Public Overloads Sub GetSiteSensorsStatusAsync(ByVal SiteId As Integer, ByVal Sensors As String, ByVal userState As Object)
            If (Me.onBeginGetSiteSensorsStatusDelegate Is Nothing) Then
                Me.onBeginGetSiteSensorsStatusDelegate = AddressOf Me.OnBeginGetSiteSensorsStatus
            End If
            If (Me.onEndGetSiteSensorsStatusDelegate Is Nothing) Then
                Me.onEndGetSiteSensorsStatusDelegate = AddressOf Me.OnEndGetSiteSensorsStatus
            End If
            If (Me.onGetSiteSensorsStatusCompletedDelegate Is Nothing) Then
                Me.onGetSiteSensorsStatusCompletedDelegate = AddressOf Me.OnGetSiteSensorsStatusCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSiteSensorsStatusDelegate, New Object() {SiteId, Sensors}, Me.onEndGetSiteSensorsStatusDelegate, Me.onGetSiteSensorsStatusCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSensors(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensors
            Return MyBase.Channel.BeginGetSensors(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensors
            Return MyBase.Channel.EndGetSensors(result)
        End Function
        
        Private Function OnBeginGetSensors(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSensors(callback, asyncState)
        End Function
        
        Private Function OnEndGetSensors(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSensors(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSensorsCompleted(ByVal state As Object)
            If (Not (Me.GetSensorsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSensorsCompleted(Me, New GetSensorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSensorsAsync()
            Me.GetSensorsAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetSensorsAsync(ByVal userState As Object)
            If (Me.onBeginGetSensorsDelegate Is Nothing) Then
                Me.onBeginGetSensorsDelegate = AddressOf Me.OnBeginGetSensors
            End If
            If (Me.onEndGetSensorsDelegate Is Nothing) Then
                Me.onEndGetSensorsDelegate = AddressOf Me.OnEndGetSensors
            End If
            If (Me.onGetSensorsCompletedDelegate Is Nothing) Then
                Me.onGetSensorsCompletedDelegate = AddressOf Me.OnGetSensorsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSensorsDelegate, Nothing, Me.onEndGetSensorsDelegate, Me.onGetSensorsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginCheckLogin(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginCheckLogin
            Return MyBase.Channel.BeginCheckLogin(UserName, Password, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndCheckLogin(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndCheckLogin
            Return MyBase.Channel.EndCheckLogin(result)
        End Function
        
        Private Function OnBeginCheckLogin(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim UserName As String = CType(inValues(0),String)
            Dim Password As String = CType(inValues(1),String)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginCheckLogin(UserName, Password, callback, asyncState)
        End Function
        
        Private Function OnEndCheckLogin(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As String = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndCheckLogin(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnCheckLoginCompleted(ByVal state As Object)
            If (Not (Me.CheckLoginCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent CheckLoginCompleted(Me, New CheckLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub CheckLoginAsync(ByVal UserName As String, ByVal Password As String)
            Me.CheckLoginAsync(UserName, Password, Nothing)
        End Sub
        
        Public Overloads Sub CheckLoginAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.onBeginCheckLoginDelegate Is Nothing) Then
                Me.onBeginCheckLoginDelegate = AddressOf Me.OnBeginCheckLogin
            End If
            If (Me.onEndCheckLoginDelegate Is Nothing) Then
                Me.onEndCheckLoginDelegate = AddressOf Me.OnEndCheckLogin
            End If
            If (Me.onCheckLoginCompletedDelegate Is Nothing) Then
                Me.onCheckLoginCompletedDelegate = AddressOf Me.OnCheckLoginCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginCheckLoginDelegate, New Object() {UserName, Password}, Me.onEndCheckLoginDelegate, Me.onCheckLoginCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSensorValues(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorValues
            Return MyBase.Channel.BeginGetSensorValues(SensorID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSensorValues(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorValues
            Return MyBase.Channel.EndGetSensorValues(result)
        End Function
        
        Private Function OnBeginGetSensorValues(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SensorID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSensorValues(SensorID, callback, asyncState)
        End Function
        
        Private Function OnEndGetSensorValues(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSensorValues(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSensorValuesCompleted(ByVal state As Object)
            If (Not (Me.GetSensorValuesCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSensorValuesCompleted(Me, New GetSensorValuesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSensorValuesAsync(ByVal SensorID As Integer)
            Me.GetSensorValuesAsync(SensorID, Nothing)
        End Sub
        
        Public Overloads Sub GetSensorValuesAsync(ByVal SensorID As Integer, ByVal userState As Object)
            If (Me.onBeginGetSensorValuesDelegate Is Nothing) Then
                Me.onBeginGetSensorValuesDelegate = AddressOf Me.OnBeginGetSensorValues
            End If
            If (Me.onEndGetSensorValuesDelegate Is Nothing) Then
                Me.onEndGetSensorValuesDelegate = AddressOf Me.OnEndGetSensorValues
            End If
            If (Me.onGetSensorValuesCompletedDelegate Is Nothing) Then
                Me.onGetSensorValuesCompletedDelegate = AddressOf Me.OnGetSensorValuesCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSensorValuesDelegate, New Object() {SensorID}, Me.onEndGetSensorValuesDelegate, Me.onGetSensorValuesCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSensorsStatus(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorsStatus
            Return MyBase.Channel.BeginGetSensorsStatus(SensorID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSensorsStatus(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorsStatus
            Return MyBase.Channel.EndGetSensorsStatus(result)
        End Function
        
        Private Function OnBeginGetSensorsStatus(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SensorID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSensorsStatus(SensorID, callback, asyncState)
        End Function
        
        Private Function OnEndGetSensorsStatus(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As String = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSensorsStatus(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSensorsStatusCompleted(ByVal state As Object)
            If (Not (Me.GetSensorsStatusCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSensorsStatusCompleted(Me, New GetSensorsStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSensorsStatusAsync(ByVal SensorID As Integer)
            Me.GetSensorsStatusAsync(SensorID, Nothing)
        End Sub
        
        Public Overloads Sub GetSensorsStatusAsync(ByVal SensorID As Integer, ByVal userState As Object)
            If (Me.onBeginGetSensorsStatusDelegate Is Nothing) Then
                Me.onBeginGetSensorsStatusDelegate = AddressOf Me.OnBeginGetSensorsStatus
            End If
            If (Me.onEndGetSensorsStatusDelegate Is Nothing) Then
                Me.onEndGetSensorsStatusDelegate = AddressOf Me.OnEndGetSensorsStatus
            End If
            If (Me.onGetSensorsStatusCompletedDelegate Is Nothing) Then
                Me.onGetSensorsStatusCompletedDelegate = AddressOf Me.OnGetSensorsStatusCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSensorsStatusDelegate, New Object() {SensorID}, Me.onEndGetSensorsStatusDelegate, Me.onGetSensorsStatusCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSensorStatus(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorStatus
            Return MyBase.Channel.BeginGetSensorStatus(SensorID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSensorStatus(ByVal result As System.IAsyncResult) As Integer Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorStatus
            Return MyBase.Channel.EndGetSensorStatus(result)
        End Function
        
        Private Function OnBeginGetSensorStatus(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SensorID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSensorStatus(SensorID, callback, asyncState)
        End Function
        
        Private Function OnEndGetSensorStatus(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Integer = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSensorStatus(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSensorStatusCompleted(ByVal state As Object)
            If (Not (Me.GetSensorStatusCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSensorStatusCompleted(Me, New GetSensorStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSensorStatusAsync(ByVal SensorID As Integer)
            Me.GetSensorStatusAsync(SensorID, Nothing)
        End Sub
        
        Public Overloads Sub GetSensorStatusAsync(ByVal SensorID As Integer, ByVal userState As Object)
            If (Me.onBeginGetSensorStatusDelegate Is Nothing) Then
                Me.onBeginGetSensorStatusDelegate = AddressOf Me.OnBeginGetSensorStatus
            End If
            If (Me.onEndGetSensorStatusDelegate Is Nothing) Then
                Me.onEndGetSensorStatusDelegate = AddressOf Me.OnEndGetSensorStatus
            End If
            If (Me.onGetSensorStatusCompletedDelegate Is Nothing) Then
                Me.onGetSensorStatusCompletedDelegate = AddressOf Me.OnGetSensorStatusCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSensorStatusDelegate, New Object() {SensorID}, Me.onEndGetSensorStatusDelegate, Me.onGetSensorStatusCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSensorHistory(ByVal SensorID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorHistory
            Return MyBase.Channel.BeginGetSensorHistory(SensorID, StartDate, EndDate, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSensorHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorHistory
            Return MyBase.Channel.EndGetSensorHistory(result)
        End Function
        
        Private Function OnBeginGetSensorHistory(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim SensorID As Integer = CType(inValues(0),Integer)
            Dim StartDate As Date = CType(inValues(1),Date)
            Dim EndDate As Date = CType(inValues(2),Date)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSensorHistory(SensorID, StartDate, EndDate, callback, asyncState)
        End Function
        
        Private Function OnEndGetSensorHistory(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSensorHistory(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSensorHistoryCompleted(ByVal state As Object)
            If (Not (Me.GetSensorHistoryCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSensorHistoryCompleted(Me, New GetSensorHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSensorHistoryAsync(ByVal SensorID As Integer, ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetSensorHistoryAsync(SensorID, StartDate, EndDate, Nothing)
        End Sub
        
        Public Overloads Sub GetSensorHistoryAsync(ByVal SensorID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.onBeginGetSensorHistoryDelegate Is Nothing) Then
                Me.onBeginGetSensorHistoryDelegate = AddressOf Me.OnBeginGetSensorHistory
            End If
            If (Me.onEndGetSensorHistoryDelegate Is Nothing) Then
                Me.onEndGetSensorHistoryDelegate = AddressOf Me.OnEndGetSensorHistory
            End If
            If (Me.onGetSensorHistoryCompletedDelegate Is Nothing) Then
                Me.onGetSensorHistoryCompletedDelegate = AddressOf Me.OnGetSensorHistoryCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSensorHistoryDelegate, New Object() {SensorID, StartDate, EndDate}, Me.onEndGetSensorHistoryDelegate, Me.onGetSensorHistoryCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetMeteringKWh(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringKWh
            Return MyBase.Channel.BeginGetMeteringKWh(MeterID, StartDate, EndDate, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetMeteringKWh(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringKWh
            Return MyBase.Channel.EndGetMeteringKWh(result)
        End Function
        
        Private Function OnBeginGetMeteringKWh(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim MeterID As Integer = CType(inValues(0),Integer)
            Dim StartDate As Date = CType(inValues(1),Date)
            Dim EndDate As Date = CType(inValues(2),Date)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetMeteringKWh(MeterID, StartDate, EndDate, callback, asyncState)
        End Function
        
        Private Function OnEndGetMeteringKWh(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetMeteringKWh(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetMeteringKWhCompleted(ByVal state As Object)
            If (Not (Me.GetMeteringKWhCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetMeteringKWhCompleted(Me, New GetMeteringKWhCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetMeteringKWhAsync(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetMeteringKWhAsync(MeterID, StartDate, EndDate, Nothing)
        End Sub
        
        Public Overloads Sub GetMeteringKWhAsync(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.onBeginGetMeteringKWhDelegate Is Nothing) Then
                Me.onBeginGetMeteringKWhDelegate = AddressOf Me.OnBeginGetMeteringKWh
            End If
            If (Me.onEndGetMeteringKWhDelegate Is Nothing) Then
                Me.onEndGetMeteringKWhDelegate = AddressOf Me.OnEndGetMeteringKWh
            End If
            If (Me.onGetMeteringKWhCompletedDelegate Is Nothing) Then
                Me.onGetMeteringKWhCompletedDelegate = AddressOf Me.OnGetMeteringKWhCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetMeteringKWhDelegate, New Object() {MeterID, StartDate, EndDate}, Me.onEndGetMeteringKWhDelegate, Me.onGetMeteringKWhCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetMeteringProfileRecordHistory(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringProfileRecordHistory
            Return MyBase.Channel.BeginGetMeteringProfileRecordHistory(MeterID, StartDate, EndDate, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetMeteringProfileRecordHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringProfileRecordHistory
            Return MyBase.Channel.EndGetMeteringProfileRecordHistory(result)
        End Function
        
        Private Function OnBeginGetMeteringProfileRecordHistory(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim MeterID As Integer = CType(inValues(0),Integer)
            Dim StartDate As Date = CType(inValues(1),Date)
            Dim EndDate As Date = CType(inValues(2),Date)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetMeteringProfileRecordHistory(MeterID, StartDate, EndDate, callback, asyncState)
        End Function
        
        Private Function OnEndGetMeteringProfileRecordHistory(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetMeteringProfileRecordHistory(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetMeteringProfileRecordHistoryCompleted(ByVal state As Object)
            If (Not (Me.GetMeteringProfileRecordHistoryCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetMeteringProfileRecordHistoryCompleted(Me, New GetMeteringProfileRecordHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetMeteringProfileRecordHistoryAsync(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetMeteringProfileRecordHistoryAsync(MeterID, StartDate, EndDate, Nothing)
        End Sub
        
        Public Overloads Sub GetMeteringProfileRecordHistoryAsync(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.onBeginGetMeteringProfileRecordHistoryDelegate Is Nothing) Then
                Me.onBeginGetMeteringProfileRecordHistoryDelegate = AddressOf Me.OnBeginGetMeteringProfileRecordHistory
            End If
            If (Me.onEndGetMeteringProfileRecordHistoryDelegate Is Nothing) Then
                Me.onEndGetMeteringProfileRecordHistoryDelegate = AddressOf Me.OnEndGetMeteringProfileRecordHistory
            End If
            If (Me.onGetMeteringProfileRecordHistoryCompletedDelegate Is Nothing) Then
                Me.onGetMeteringProfileRecordHistoryCompletedDelegate = AddressOf Me.OnGetMeteringProfileRecordHistoryCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetMeteringProfileRecordHistoryDelegate, New Object() {MeterID, StartDate, EndDate}, Me.onEndGetMeteringProfileRecordHistoryDelegate, Me.onGetMeteringProfileRecordHistoryCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetMeteringProfileMarkerHistory(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringProfileMarkerHistory
            Return MyBase.Channel.BeginGetMeteringProfileMarkerHistory(MeterID, StartDate, EndDate, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetMeteringProfileMarkerHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringProfileMarkerHistory
            Return MyBase.Channel.EndGetMeteringProfileMarkerHistory(result)
        End Function
        
        Private Function OnBeginGetMeteringProfileMarkerHistory(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim MeterID As Integer = CType(inValues(0),Integer)
            Dim StartDate As Date = CType(inValues(1),Date)
            Dim EndDate As Date = CType(inValues(2),Date)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetMeteringProfileMarkerHistory(MeterID, StartDate, EndDate, callback, asyncState)
        End Function
        
        Private Function OnEndGetMeteringProfileMarkerHistory(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetMeteringProfileMarkerHistory(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetMeteringProfileMarkerHistoryCompleted(ByVal state As Object)
            If (Not (Me.GetMeteringProfileMarkerHistoryCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetMeteringProfileMarkerHistoryCompleted(Me, New GetMeteringProfileMarkerHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetMeteringProfileMarkerHistoryAsync(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetMeteringProfileMarkerHistoryAsync(MeterID, StartDate, EndDate, Nothing)
        End Sub
        
        Public Overloads Sub GetMeteringProfileMarkerHistoryAsync(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.onBeginGetMeteringProfileMarkerHistoryDelegate Is Nothing) Then
                Me.onBeginGetMeteringProfileMarkerHistoryDelegate = AddressOf Me.OnBeginGetMeteringProfileMarkerHistory
            End If
            If (Me.onEndGetMeteringProfileMarkerHistoryDelegate Is Nothing) Then
                Me.onEndGetMeteringProfileMarkerHistoryDelegate = AddressOf Me.OnEndGetMeteringProfileMarkerHistory
            End If
            If (Me.onGetMeteringProfileMarkerHistoryCompletedDelegate Is Nothing) Then
                Me.onGetMeteringProfileMarkerHistoryCompletedDelegate = AddressOf Me.OnGetMeteringProfileMarkerHistoryCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetMeteringProfileMarkerHistoryDelegate, New Object() {MeterID, StartDate, EndDate}, Me.onEndGetMeteringProfileMarkerHistoryDelegate, Me.onGetMeteringProfileMarkerHistoryCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetMeteringTarrif(ByVal TarrifID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringTarrif
            Return MyBase.Channel.BeginGetMeteringTarrif(TarrifID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetMeteringTarrif(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringTarrif
            Return MyBase.Channel.EndGetMeteringTarrif(result)
        End Function
        
        Private Function OnBeginGetMeteringTarrif(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim TarrifID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetMeteringTarrif(TarrifID, callback, asyncState)
        End Function
        
        Private Function OnEndGetMeteringTarrif(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As String = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetMeteringTarrif(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetMeteringTarrifCompleted(ByVal state As Object)
            If (Not (Me.GetMeteringTarrifCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetMeteringTarrifCompleted(Me, New GetMeteringTarrifCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetMeteringTarrifAsync(ByVal TarrifID As Integer)
            Me.GetMeteringTarrifAsync(TarrifID, Nothing)
        End Sub
        
        Public Overloads Sub GetMeteringTarrifAsync(ByVal TarrifID As Integer, ByVal userState As Object)
            If (Me.onBeginGetMeteringTarrifDelegate Is Nothing) Then
                Me.onBeginGetMeteringTarrifDelegate = AddressOf Me.OnBeginGetMeteringTarrif
            End If
            If (Me.onEndGetMeteringTarrifDelegate Is Nothing) Then
                Me.onEndGetMeteringTarrifDelegate = AddressOf Me.OnEndGetMeteringTarrif
            End If
            If (Me.onGetMeteringTarrifCompletedDelegate Is Nothing) Then
                Me.onGetMeteringTarrifCompletedDelegate = AddressOf Me.OnGetMeteringTarrifCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetMeteringTarrifDelegate, New Object() {TarrifID}, Me.onEndGetMeteringTarrifDelegate, Me.onGetMeteringTarrifCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetMeteringTarrifNames(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringTarrifNames
            Return MyBase.Channel.BeginGetMeteringTarrifNames(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetMeteringTarrifNames(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringTarrifNames
            Return MyBase.Channel.EndGetMeteringTarrifNames(result)
        End Function
        
        Private Function OnBeginGetMeteringTarrifNames(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetMeteringTarrifNames(callback, asyncState)
        End Function
        
        Private Function OnEndGetMeteringTarrifNames(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetMeteringTarrifNames(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetMeteringTarrifNamesCompleted(ByVal state As Object)
            If (Not (Me.GetMeteringTarrifNamesCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetMeteringTarrifNamesCompleted(Me, New GetMeteringTarrifNamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetMeteringTarrifNamesAsync()
            Me.GetMeteringTarrifNamesAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetMeteringTarrifNamesAsync(ByVal userState As Object)
            If (Me.onBeginGetMeteringTarrifNamesDelegate Is Nothing) Then
                Me.onBeginGetMeteringTarrifNamesDelegate = AddressOf Me.OnBeginGetMeteringTarrifNames
            End If
            If (Me.onEndGetMeteringTarrifNamesDelegate Is Nothing) Then
                Me.onEndGetMeteringTarrifNamesDelegate = AddressOf Me.OnEndGetMeteringTarrifNames
            End If
            If (Me.onGetMeteringTarrifNamesCompletedDelegate Is Nothing) Then
                Me.onGetMeteringTarrifNamesCompletedDelegate = AddressOf Me.OnGetMeteringTarrifNamesCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetMeteringTarrifNamesDelegate, Nothing, Me.onEndGetMeteringTarrifNamesDelegate, Me.onGetMeteringTarrifNamesCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetCameras(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetCameras
            Return MyBase.Channel.BeginGetCameras(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetCameras(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetCameras
            Return MyBase.Channel.EndGetCameras(result)
        End Function
        
        Private Function OnBeginGetCameras(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetCameras(callback, asyncState)
        End Function
        
        Private Function OnEndGetCameras(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetCameras(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetCamerasCompleted(ByVal state As Object)
            If (Not (Me.GetCamerasCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetCamerasCompleted(Me, New GetCamerasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetCamerasAsync()
            Me.GetCamerasAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetCamerasAsync(ByVal userState As Object)
            If (Me.onBeginGetCamerasDelegate Is Nothing) Then
                Me.onBeginGetCamerasDelegate = AddressOf Me.OnBeginGetCameras
            End If
            If (Me.onEndGetCamerasDelegate Is Nothing) Then
                Me.onEndGetCamerasDelegate = AddressOf Me.OnEndGetCameras
            End If
            If (Me.onGetCamerasCompletedDelegate Is Nothing) Then
                Me.onGetCamerasCompletedDelegate = AddressOf Me.OnGetCamerasCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetCamerasDelegate, Nothing, Me.onEndGetCamerasDelegate, Me.onGetCamerasCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetCameraImage(ByVal CameraID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetCameraImage
            Return MyBase.Channel.BeginGetCameraImage(CameraID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetCameraImage(ByVal result As System.IAsyncResult) As Byte() Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetCameraImage
            Return MyBase.Channel.EndGetCameraImage(result)
        End Function
        
        Private Function OnBeginGetCameraImage(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim CameraID As Integer = CType(inValues(0),Integer)
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetCameraImage(CameraID, callback, asyncState)
        End Function
        
        Private Function OnEndGetCameraImage(ByVal result As System.IAsyncResult) As Object()
            Dim retVal() As Byte = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetCameraImage(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetCameraImageCompleted(ByVal state As Object)
            If (Not (Me.GetCameraImageCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetCameraImageCompleted(Me, New GetCameraImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetCameraImageAsync(ByVal CameraID As Integer)
            Me.GetCameraImageAsync(CameraID, Nothing)
        End Sub
        
        Public Overloads Sub GetCameraImageAsync(ByVal CameraID As Integer, ByVal userState As Object)
            If (Me.onBeginGetCameraImageDelegate Is Nothing) Then
                Me.onBeginGetCameraImageDelegate = AddressOf Me.OnBeginGetCameraImage
            End If
            If (Me.onEndGetCameraImageDelegate Is Nothing) Then
                Me.onEndGetCameraImageDelegate = AddressOf Me.OnEndGetCameraImage
            End If
            If (Me.onGetCameraImageCompletedDelegate Is Nothing) Then
                Me.onGetCameraImageCompletedDelegate = AddressOf Me.OnGetCameraImageCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetCameraImageDelegate, New Object() {CameraID}, Me.onEndGetCameraImageDelegate, Me.onGetCameraImageCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetIPDevicesDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetIPDevicesDetails
            Return MyBase.Channel.BeginGetIPDevicesDetails(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetIPDevicesDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetIPDevicesDetails
            Return MyBase.Channel.EndGetIPDevicesDetails(result)
        End Function
        
        Private Function OnBeginGetIPDevicesDetails(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetIPDevicesDetails(callback, asyncState)
        End Function
        
        Private Function OnEndGetIPDevicesDetails(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetIPDevicesDetails(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetIPDevicesDetailsCompleted(ByVal state As Object)
            If (Not (Me.GetIPDevicesDetailsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetIPDevicesDetailsCompleted(Me, New GetIPDevicesDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetIPDevicesDetailsAsync()
            Me.GetIPDevicesDetailsAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetIPDevicesDetailsAsync(ByVal userState As Object)
            If (Me.onBeginGetIPDevicesDetailsDelegate Is Nothing) Then
                Me.onBeginGetIPDevicesDetailsDelegate = AddressOf Me.OnBeginGetIPDevicesDetails
            End If
            If (Me.onEndGetIPDevicesDetailsDelegate Is Nothing) Then
                Me.onEndGetIPDevicesDetailsDelegate = AddressOf Me.OnEndGetIPDevicesDetails
            End If
            If (Me.onGetIPDevicesDetailsCompletedDelegate Is Nothing) Then
                Me.onGetIPDevicesDetailsCompletedDelegate = AddressOf Me.OnGetIPDevicesDetailsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetIPDevicesDetailsDelegate, Nothing, Me.onEndGetIPDevicesDetailsDelegate, Me.onGetIPDevicesDetailsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetOtherDevicesDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetOtherDevicesDetails
            Return MyBase.Channel.BeginGetOtherDevicesDetails(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetOtherDevicesDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetOtherDevicesDetails
            Return MyBase.Channel.EndGetOtherDevicesDetails(result)
        End Function
        
        Private Function OnBeginGetOtherDevicesDetails(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetOtherDevicesDetails(callback, asyncState)
        End Function
        
        Private Function OnEndGetOtherDevicesDetails(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetOtherDevicesDetails(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetOtherDevicesDetailsCompleted(ByVal state As Object)
            If (Not (Me.GetOtherDevicesDetailsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetOtherDevicesDetailsCompleted(Me, New GetOtherDevicesDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetOtherDevicesDetailsAsync()
            Me.GetOtherDevicesDetailsAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetOtherDevicesDetailsAsync(ByVal userState As Object)
            If (Me.onBeginGetOtherDevicesDetailsDelegate Is Nothing) Then
                Me.onBeginGetOtherDevicesDetailsDelegate = AddressOf Me.OnBeginGetOtherDevicesDetails
            End If
            If (Me.onEndGetOtherDevicesDetailsDelegate Is Nothing) Then
                Me.onEndGetOtherDevicesDetailsDelegate = AddressOf Me.OnEndGetOtherDevicesDetails
            End If
            If (Me.onGetOtherDevicesDetailsCompletedDelegate Is Nothing) Then
                Me.onGetOtherDevicesDetailsCompletedDelegate = AddressOf Me.OnGetOtherDevicesDetailsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetOtherDevicesDetailsDelegate, Nothing, Me.onEndGetOtherDevicesDetailsDelegate, Me.onGetOtherDevicesDetailsCompletedDelegate, userState)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_BeginGetSNMPManagerDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSNMPManagerDetails
            Return MyBase.Channel.BeginGetSNMPManagerDetails(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function LiveMonitoring_SLIPmonInterfaceSVC_EndGetSNMPManagerDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSNMPManagerDetails
            Return MyBase.Channel.EndGetSNMPManagerDetails(result)
        End Function
        
        Private Function OnBeginGetSNMPManagerDetails(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).BeginGetSNMPManagerDetails(callback, asyncState)
        End Function
        
        Private Function OnEndGetSNMPManagerDetails(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(Me,LiveMonitoring.SLIPmonInterfaceSVC).EndGetSNMPManagerDetails(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetSNMPManagerDetailsCompleted(ByVal state As Object)
            If (Not (Me.GetSNMPManagerDetailsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetSNMPManagerDetailsCompleted(Me, New GetSNMPManagerDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetSNMPManagerDetailsAsync()
            Me.GetSNMPManagerDetailsAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetSNMPManagerDetailsAsync(ByVal userState As Object)
            If (Me.onBeginGetSNMPManagerDetailsDelegate Is Nothing) Then
                Me.onBeginGetSNMPManagerDetailsDelegate = AddressOf Me.OnBeginGetSNMPManagerDetails
            End If
            If (Me.onEndGetSNMPManagerDetailsDelegate Is Nothing) Then
                Me.onEndGetSNMPManagerDetailsDelegate = AddressOf Me.OnEndGetSNMPManagerDetails
            End If
            If (Me.onGetSNMPManagerDetailsCompletedDelegate Is Nothing) Then
                Me.onGetSNMPManagerDetailsCompletedDelegate = AddressOf Me.OnGetSNMPManagerDetailsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetSNMPManagerDetailsDelegate, Nothing, Me.onEndGetSNMPManagerDetailsDelegate, Me.onGetSNMPManagerDetailsCompletedDelegate, userState)
        End Sub
        
        Private Function OnBeginOpen(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,System.ServiceModel.ICommunicationObject).BeginOpen(callback, asyncState)
        End Function
        
        Private Function OnEndOpen(ByVal result As System.IAsyncResult) As Object()
            CType(Me,System.ServiceModel.ICommunicationObject).EndOpen(result)
            Return Nothing
        End Function
        
        Private Sub OnOpenCompleted(ByVal state As Object)
            If (Not (Me.OpenCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent OpenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.[Error], e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub OpenAsync()
            Me.OpenAsync(Nothing)
        End Sub
        
        Public Overloads Sub OpenAsync(ByVal userState As Object)
            If (Me.onBeginOpenDelegate Is Nothing) Then
                Me.onBeginOpenDelegate = AddressOf Me.OnBeginOpen
            End If
            If (Me.onEndOpenDelegate Is Nothing) Then
                Me.onEndOpenDelegate = AddressOf Me.OnEndOpen
            End If
            If (Me.onOpenCompletedDelegate Is Nothing) Then
                Me.onOpenCompletedDelegate = AddressOf Me.OnOpenCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginOpenDelegate, Nothing, Me.onEndOpenDelegate, Me.onOpenCompletedDelegate, userState)
        End Sub
        
        Private Function OnBeginClose(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,System.ServiceModel.ICommunicationObject).BeginClose(callback, asyncState)
        End Function
        
        Private Function OnEndClose(ByVal result As System.IAsyncResult) As Object()
            CType(Me,System.ServiceModel.ICommunicationObject).EndClose(result)
            Return Nothing
        End Function
        
        Private Sub OnCloseCompleted(ByVal state As Object)
            If (Not (Me.CloseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent CloseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.[Error], e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub CloseAsync()
            Me.CloseAsync(Nothing)
        End Sub
        
        Public Overloads Sub CloseAsync(ByVal userState As Object)
            If (Me.onBeginCloseDelegate Is Nothing) Then
                Me.onBeginCloseDelegate = AddressOf Me.OnBeginClose
            End If
            If (Me.onEndCloseDelegate Is Nothing) Then
                Me.onEndCloseDelegate = AddressOf Me.OnEndClose
            End If
            If (Me.onCloseCompletedDelegate Is Nothing) Then
                Me.onCloseCompletedDelegate = AddressOf Me.OnCloseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginCloseDelegate, Nothing, Me.onEndCloseDelegate, Me.onCloseCompletedDelegate, userState)
        End Sub
        
        Protected Overrides Function CreateChannel() As LiveMonitoring.SLIPmonInterfaceSVC
            Return New SLIPmonInterfaceSVCClientChannel(Me)
        End Function
        
        Private Class SLIPmonInterfaceSVCClientChannel
            Inherits ChannelBase(Of LiveMonitoring.SLIPmonInterfaceSVC)
            Implements LiveMonitoring.SLIPmonInterfaceSVC
            
            Public Sub New(ByVal client As System.ServiceModel.ClientBase(Of LiveMonitoring.SLIPmonInterfaceSVC))
                MyBase.New(client)
            End Sub
            
            Public Function BeginGetConfigSetting(ByVal SettingName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetConfigSetting
                Dim _args((1) - 1) As Object
                _args(0) = SettingName
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetConfigSetting", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetConfigSetting(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetConfigSetting
                Dim _args((0) - 1) As Object
                Dim _result As String = CType(MyBase.EndInvoke("GetConfigSetting", _args, result),String)
                Return _result
            End Function
            
            Public Function BeginGetRemoteAlertHistory(ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetRemoteAlertHistory
                Dim _args((2) - 1) As Object
                _args(0) = StartDate
                _args(1) = EndDate
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetRemoteAlertHistory", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetRemoteAlertHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetRemoteAlertHistory
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetRemoteAlertHistory", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginLogIt(ByVal LogType As String, ByVal LogEntry As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginLogIt
                Dim _args((2) - 1) As Object
                _args(0) = LogType
                _args(1) = LogEntry
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("LogIt", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndLogIt(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndLogIt
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("LogIt", _args, result)
            End Sub
            
            Public Function BeginGetSetting(ByVal KeyName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSetting
                Dim _args((1) - 1) As Object
                _args(0) = KeyName
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSetting", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSetting(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSetting
                Dim _args((0) - 1) As Object
                Dim _result As String = CType(MyBase.EndInvoke("GetSetting", _args, result),String)
                Return _result
            End Function
            
            Public Function BeginGetAll(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetAll
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetAll", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetAll(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetAll
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetAll", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSites(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSites
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSites", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSites(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSites
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSites", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetDisplays(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetDisplays
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetDisplays", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetDisplays(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetDisplays
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetDisplays", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginDelDisplayGroup(ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginDelDisplayGroup
                Dim _args((1) - 1) As Object
                _args(0) = ID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("DelDisplayGroup", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndDelDisplayGroup(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndDelDisplayGroup
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("DelDisplayGroup", _args, result)
            End Sub
            
            Public Function BeginGetDisplayGroup(ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetDisplayGroup
                Dim _args((1) - 1) As Object
                _args(0) = ID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetDisplayGroup", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetDisplayGroup(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetDisplayGroup
                Dim _args((0) - 1) As Object
                Dim _result As String = CType(MyBase.EndInvoke("GetDisplayGroup", _args, result),String)
                Return _result
            End Function
            
            Public Function BeginGetDisplayGroups(ByVal DisplayID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetDisplayGroups
                Dim _args((1) - 1) As Object
                _args(0) = DisplayID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetDisplayGroups", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetDisplayGroups(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetDisplayGroups
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetDisplayGroups", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginReturnDisplayFiles(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginReturnDisplayFiles
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("ReturnDisplayFiles", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndReturnDisplayFiles(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndReturnDisplayFiles
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("ReturnDisplayFiles", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginDeleteDisplayFiles(ByVal FileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginDeleteDisplayFiles
                Dim _args((1) - 1) As Object
                _args(0) = FileName
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("DeleteDisplayFiles", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndDeleteDisplayFiles(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndDeleteDisplayFiles
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("DeleteDisplayFiles", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginUploadDisplayFileBin(ByVal _SerialFile As String, ByVal FileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginUploadDisplayFileBin
                Dim _args((2) - 1) As Object
                _args(0) = _SerialFile
                _args(1) = FileName
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("UploadDisplayFileBin", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndUploadDisplayFileBin(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndUploadDisplayFileBin
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("UploadDisplayFileBin", _args, result)
            End Sub
            
            Public Function BeginAddDisplay(ByVal DisplayName As String, ByVal DisplayType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginAddDisplay
                Dim _args((2) - 1) As Object
                _args(0) = DisplayName
                _args(1) = DisplayType
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("AddDisplay", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndAddDisplay(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndAddDisplay
                Dim _args((0) - 1) As Object
                Dim _result As Boolean = CType(MyBase.EndInvoke("AddDisplay", _args, result),Boolean)
                Return _result
            End Function
            
            Public Function BeginAddDisplayGroupPage(ByVal DisplayID As Integer, ByVal GroupName As String, ByVal DisplayType As Integer, ByVal DisplayImage As String, ByVal DisplayWidth As Double, ByVal DisplayHeight As Double, ByVal Screen As Integer, ByVal PanelPos As Integer, ByVal PanelNo As Integer, ByVal Extra1 As String, ByVal Extra2 As String, ByVal ExtraVal1 As Double, ByVal ExtraVal2 As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginAddDisplayGroupPage
                Dim _args((13) - 1) As Object
                _args(0) = DisplayID
                _args(1) = GroupName
                _args(2) = DisplayType
                _args(3) = DisplayImage
                _args(4) = DisplayWidth
                _args(5) = DisplayHeight
                _args(6) = Screen
                _args(7) = PanelPos
                _args(8) = PanelNo
                _args(9) = Extra1
                _args(10) = Extra2
                _args(11) = ExtraVal1
                _args(12) = ExtraVal2
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("AddDisplayGroupPage", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndAddDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndAddDisplayGroupPage
                Dim _args((0) - 1) As Object
                Dim _result As Boolean = CType(MyBase.EndInvoke("AddDisplayGroupPage", _args, result),Boolean)
                Return _result
            End Function
            
            Public Function BeginEditDisplayGroupPage( _
                        ByVal ID As Integer,  _
                        ByVal DisplayID As Integer,  _
                        ByVal GroupName As String,  _
                        ByVal DisplayType As Integer,  _
                        ByVal DisplayImage As String,  _
                        ByVal DisplayWidth As Double,  _
                        ByVal DisplayHeight As Double,  _
                        ByVal Screen As Integer,  _
                        ByVal PanelPos As Integer,  _
                        ByVal PanelNo As Integer,  _
                        ByVal Extra1 As String,  _
                        ByVal Extra2 As String,  _
                        ByVal ExtraVal1 As Double,  _
                        ByVal ExtraVal2 As Double,  _
                        ByVal callback As System.AsyncCallback,  _
                        ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginEditDisplayGroupPage
                Dim _args((14) - 1) As Object
                _args(0) = ID
                _args(1) = DisplayID
                _args(2) = GroupName
                _args(3) = DisplayType
                _args(4) = DisplayImage
                _args(5) = DisplayWidth
                _args(6) = DisplayHeight
                _args(7) = Screen
                _args(8) = PanelPos
                _args(9) = PanelNo
                _args(10) = Extra1
                _args(11) = Extra2
                _args(12) = ExtraVal1
                _args(13) = ExtraVal2
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("EditDisplayGroupPage", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndEditDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndEditDisplayGroupPage
                Dim _args((0) - 1) As Object
                Dim _result As Boolean = CType(MyBase.EndInvoke("EditDisplayGroupPage", _args, result),Boolean)
                Return _result
            End Function
            
            Public Function BeginChangeDisplayGroupPage(ByVal ID As Integer, ByVal NewScreen As Integer, ByVal OldScreen As Integer, ByVal DisplayGroup As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginChangeDisplayGroupPage
                Dim _args((4) - 1) As Object
                _args(0) = ID
                _args(1) = NewScreen
                _args(2) = OldScreen
                _args(3) = DisplayGroup
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("ChangeDisplayGroupPage", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndChangeDisplayGroupPage(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndChangeDisplayGroupPage
                Dim _args((0) - 1) As Object
                Dim _result As Boolean = CType(MyBase.EndInvoke("ChangeDisplayGroupPage", _args, result),Boolean)
                Return _result
            End Function
            
            Public Function BeginSetDisplaySensorPosition(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal SensorTop As Double, ByVal SensorLeft As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginSetDisplaySensorPosition
                Dim _args((4) - 1) As Object
                _args(0) = DisplayID
                _args(1) = SensorID
                _args(2) = SensorTop
                _args(3) = SensorLeft
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("SetDisplaySensorPosition", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndSetDisplaySensorPosition(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndSetDisplaySensorPosition
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("SetDisplaySensorPosition", _args, result)
            End Sub
            
            Public Function BeginSetDisplayBackImage(ByVal DisplayID As Integer, ByVal BackImage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginSetDisplayBackImage
                Dim _args((2) - 1) As Object
                _args(0) = DisplayID
                _args(1) = BackImage
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("SetDisplayBackImage", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndSetDisplayBackImage(ByVal result As System.IAsyncResult) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndSetDisplayBackImage
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("SetDisplayBackImage", _args, result)
            End Sub
            
            Public Function BeginRemoveSensor(ByVal DisplayID As Integer, ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginRemoveSensor
                Dim _args((2) - 1) As Object
                _args(0) = DisplayID
                _args(1) = SensorID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("RemoveSensor", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndRemoveSensor(ByVal result As System.IAsyncResult) As Boolean Implements LiveMonitoring.SLIPmonInterfaceSVC.EndRemoveSensor
                Dim _args((0) - 1) As Object
                Dim _result As Boolean = CType(MyBase.EndInvoke("RemoveSensor", _args, result),Boolean)
                Return _result
            End Function
            
            Public Function BeginGetAllSensors(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetAllSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetAllSensors", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetAllSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetAllSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetAllSensors", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSpecificSensorDisplay(ByVal SensorId As Integer, ByVal DisplayID As Integer, ByVal SensorScale As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSpecificSensorDisplay
                Dim _args((3) - 1) As Object
                _args(0) = SensorId
                _args(1) = DisplayID
                _args(2) = SensorScale
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSpecificSensorDisplay", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSpecificSensorDisplay(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSpecificSensorDisplay
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSpecificSensorDisplay", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetListSensors(ByVal SensorIds As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetListSensors
                Dim _args((1) - 1) As Object
                _args(0) = SensorIds
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetListSensors", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetListSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetListSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetListSensors", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetGroupSensors(ByVal GroupId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetGroupSensors
                Dim _args((1) - 1) As Object
                _args(0) = GroupId
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetGroupSensors", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetGroupSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetGroupSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetGroupSensors", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetGroupSensorsStatus(ByVal GroupID As Integer, ByVal Sensors As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetGroupSensorsStatus
                Dim _args((2) - 1) As Object
                _args(0) = GroupID
                _args(1) = Sensors
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetGroupSensorsStatus", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetGroupSensorsStatus(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetGroupSensorsStatus
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetGroupSensorsStatus", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSiteSensors(ByVal SiteId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSiteSensors
                Dim _args((1) - 1) As Object
                _args(0) = SiteId
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSiteSensors", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSiteSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSiteSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSiteSensors", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSiteSensorsStatus(ByVal SiteId As Integer, ByVal Sensors As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSiteSensorsStatus
                Dim _args((2) - 1) As Object
                _args(0) = SiteId
                _args(1) = Sensors
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSiteSensorsStatus", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSiteSensorsStatus(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSiteSensorsStatus
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSiteSensorsStatus", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSensors(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSensors", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSensors(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensors
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSensors", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginCheckLogin(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginCheckLogin
                Dim _args((2) - 1) As Object
                _args(0) = UserName
                _args(1) = Password
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("CheckLogin", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndCheckLogin(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndCheckLogin
                Dim _args((0) - 1) As Object
                Dim _result As String = CType(MyBase.EndInvoke("CheckLogin", _args, result),String)
                Return _result
            End Function
            
            Public Function BeginGetSensorValues(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorValues
                Dim _args((1) - 1) As Object
                _args(0) = SensorID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSensorValues", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSensorValues(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorValues
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSensorValues", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSensorsStatus(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorsStatus
                Dim _args((1) - 1) As Object
                _args(0) = SensorID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSensorsStatus", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSensorsStatus(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorsStatus
                Dim _args((0) - 1) As Object
                Dim _result As String = CType(MyBase.EndInvoke("GetSensorsStatus", _args, result),String)
                Return _result
            End Function
            
            Public Function BeginGetSensorStatus(ByVal SensorID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorStatus
                Dim _args((1) - 1) As Object
                _args(0) = SensorID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSensorStatus", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSensorStatus(ByVal result As System.IAsyncResult) As Integer Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorStatus
                Dim _args((0) - 1) As Object
                Dim _result As Integer = CType(MyBase.EndInvoke("GetSensorStatus", _args, result),Integer)
                Return _result
            End Function
            
            Public Function BeginGetSensorHistory(ByVal SensorID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSensorHistory
                Dim _args((3) - 1) As Object
                _args(0) = SensorID
                _args(1) = StartDate
                _args(2) = EndDate
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSensorHistory", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSensorHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSensorHistory
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(MyBase.EndInvoke("GetSensorHistory", _args, result),System.Collections.ObjectModel.ObservableCollection(Of Object))
                Return _result
            End Function
            
            Public Function BeginGetMeteringKWh(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringKWh
                Dim _args((3) - 1) As Object
                _args(0) = MeterID
                _args(1) = StartDate
                _args(2) = EndDate
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetMeteringKWh", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetMeteringKWh(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringKWh
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(MyBase.EndInvoke("GetMeteringKWh", _args, result),System.Collections.ObjectModel.ObservableCollection(Of Object))
                Return _result
            End Function
            
            Public Function BeginGetMeteringProfileRecordHistory(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringProfileRecordHistory
                Dim _args((3) - 1) As Object
                _args(0) = MeterID
                _args(1) = StartDate
                _args(2) = EndDate
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetMeteringProfileRecordHistory", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetMeteringProfileRecordHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringProfileRecordHistory
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(MyBase.EndInvoke("GetMeteringProfileRecordHistory", _args, result),System.Collections.ObjectModel.ObservableCollection(Of Object))
                Return _result
            End Function
            
            Public Function BeginGetMeteringProfileMarkerHistory(ByVal MeterID As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringProfileMarkerHistory
                Dim _args((3) - 1) As Object
                _args(0) = MeterID
                _args(1) = StartDate
                _args(2) = EndDate
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetMeteringProfileMarkerHistory", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetMeteringProfileMarkerHistory(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of Object) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringProfileMarkerHistory
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of Object) = CType(MyBase.EndInvoke("GetMeteringProfileMarkerHistory", _args, result),System.Collections.ObjectModel.ObservableCollection(Of Object))
                Return _result
            End Function
            
            Public Function BeginGetMeteringTarrif(ByVal TarrifID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringTarrif
                Dim _args((1) - 1) As Object
                _args(0) = TarrifID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetMeteringTarrif", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetMeteringTarrif(ByVal result As System.IAsyncResult) As String Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringTarrif
                Dim _args((0) - 1) As Object
                Dim _result As String = CType(MyBase.EndInvoke("GetMeteringTarrif", _args, result),String)
                Return _result
            End Function
            
            Public Function BeginGetMeteringTarrifNames(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetMeteringTarrifNames
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetMeteringTarrifNames", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetMeteringTarrifNames(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetMeteringTarrifNames
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetMeteringTarrifNames", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetCameras(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetCameras
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetCameras", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetCameras(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetCameras
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetCameras", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetCameraImage(ByVal CameraID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetCameraImage
                Dim _args((1) - 1) As Object
                _args(0) = CameraID
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetCameraImage", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetCameraImage(ByVal result As System.IAsyncResult) As Byte() Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetCameraImage
                Dim _args((0) - 1) As Object
                Dim _result() As Byte = CType(MyBase.EndInvoke("GetCameraImage", _args, result),Byte())
                Return _result
            End Function
            
            Public Function BeginGetIPDevicesDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetIPDevicesDetails
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetIPDevicesDetails", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetIPDevicesDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetIPDevicesDetails
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetIPDevicesDetails", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetOtherDevicesDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetOtherDevicesDetails
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetOtherDevicesDetails", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetOtherDevicesDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetOtherDevicesDetails
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetOtherDevicesDetails", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
            
            Public Function BeginGetSNMPManagerDetails(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LiveMonitoring.SLIPmonInterfaceSVC.BeginGetSNMPManagerDetails
                Dim _args((0) - 1) As Object
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetSNMPManagerDetails", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetSNMPManagerDetails(ByVal result As System.IAsyncResult) As System.Collections.ObjectModel.ObservableCollection(Of String) Implements LiveMonitoring.SLIPmonInterfaceSVC.EndGetSNMPManagerDetails
                Dim _args((0) - 1) As Object
                Dim _result As System.Collections.ObjectModel.ObservableCollection(Of String) = CType(MyBase.EndInvoke("GetSNMPManagerDetails", _args, result),System.Collections.ObjectModel.ObservableCollection(Of String))
                Return _result
            End Function
        End Class
    End Class
End Namespace
