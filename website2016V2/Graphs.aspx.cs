using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Drawing;
using Infragistics.UltraChart.Resources.Appearance;
using Infragistics.UltraChart.Shared.Styles;
using Infragistics.UltraChart.Resources;
using Infragistics.UltraChart.Data.Series;
using Infragistics.UltraChart.Core.Layers;
using Infragistics.UltraChart.Core;
using Infragistics.UltraChart.Core.ColorModel;
using Infragistics.UltraChart.Data;
using Infragistics.UltraChart.Core.Primitives;
using Infragistics.UltraChart.Shared.Events;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Text;
using LiveMonitoring;

namespace website2016V2
{
    partial class Graphs : System.Web.UI.Page
    {
        protected void Page_Load(object sender, System.EventArgs e)
        {
            if (((string)Session["LoggedIn"] == "True"))
            {
                LiveMonitoring.IRemoteLib.UserDetails MyUser = new LiveMonitoring.IRemoteLib.UserDetails();
                MyUser = (LiveMonitoring.IRemoteLib.UserDetails)Session["UserDetails"];
                Label user = this.Master.FindControl("lblUser") as Label;
                Label loginUser = this.Master.FindControl("lblUser2") as Label;
                Label LastLogin = this.Master.FindControl("LastLogin") as Label;
                loginUser.Text = ((MyUser.FirstName + (" " + MyUser.SurName)));
                user.Text = ((MyUser.FirstName + (" " + MyUser.SurName)));
                LastLogin.Text = " LL:" + MyUser.LoginDT.ToString();

                //ok logged on level ?

                successMessage.Visible = false;
                warningMessage.Visible = false;
                errorMessage.Visible = false;

                string name = System.IO.Path.GetFileName(Request.ServerVariables["SCRIPT_NAME"]).Replace(".aspx", "");
                //LiveMonitoring.IRemoteLib.UserDetails MyUser = new LiveMonitoring.IRemoteLib.UserDetails();
                LiveMonitoring.PageSecurityClass IPMonPageSecure = new LiveMonitoring.PageSecurityClass();
                int MyIPMonPageSecure = IPMonPageSecure.get_GetViewLevelByName(name);
                //MyUser = (LiveMonitoring.IRemoteLib.UserDetails)Session["UserDetails"];
                if (MyIPMonPageSecure > MyUser.UserLevel)
                {
                    Response.Redirect("NotAuthorisedView.aspx");
                }
                //If IsNothing(Session("SearchSensor")) = False And txtSensName.Text = "" Then
                //    txtSensName.Text = CStr(Session("SearchSensor"))
                //End If
                if (IsPostBack == true)
                {
                }
                else
                {
                    Response.Expires = 5;
                    Page.MaintainScrollPositionOnPostBack = true;
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Minute, -30, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;

                    int MySensorNum = 0;
                    MySensorNum = Convert.ToInt32(Request.QueryString["SensorNum"]);
                    Load_Sensors(MySensorNum);
                    Session["Sensors"] = "";
                    LiveMonitoring.GlobalRemoteVars MyRem = new LiveMonitoring.GlobalRemoteVars();
                    if (MySensorNum == 0)
                    {
                        //all cameras
                        //Dim MyCollection As New Collection
                        //MyCollection = MyRem.GetServerObjects(IIf(IsNothing(Session["SelectedSite"]), Nothing, Session["SelectedSite"]))'GetServerObjects 'server1.GetAll()
                        //Dim MyObject1 As Object
                        //Dim MyDiv As Integer = 1
                        //Dim added As Boolean = False
                        //For Each MyObject1 In MyCollection
                        //    If TypeOf MyObject1 Is LiveMonitoring.IRemoteLib.SensorDetails Then
                        //        If added = False Then 'only add 1st one
                        //            AddLayer(MyObject1)
                        //            added = True
                        //            Session["Sensors"] += MyObject1.ID.ToString + ","
                        //        End If
                        //    End If
                        //Next
                    }
                    else
                    {
                        //specific
                        Collection MyCollection = new Collection();
                        MyCollection = MyRem.get_GetServerObjects(((Session["SelectedSite"] == null) ? null : Session["SelectedSite"]));
                        //GetServerObjects 'server1.GetAll()
                        object MyObject1 = null;
                        int MyCnt = 0;
                        foreach (object MyObject1_loopVariable in MyCollection)
                        {
                            MyObject1 = MyObject1_loopVariable;
                            if (MyObject1 is LiveMonitoring.IRemoteLib.SensorDetails)
                            {
                                LiveMonitoring.IRemoteLib.SensorDetails MySensor = (LiveMonitoring.IRemoteLib.SensorDetails)MyObject1;
                                if (MySensorNum == MySensor.ID)
                                {
                                    Session["Sensors"] += MySensor.ID.ToString() + ",";
                                    AddLayer(MySensor);
                                    break; // TODO: might not be correct. Was : Exit For
                                }
                                else
                                {
                                    MyCnt += 1;
                                }
                            }
                        }

                    }
                }

            }
            else
            {
                Response.Redirect("Index.aspx");
            }
        }
        public void AddPageBreak()
        {
            HtmlGenericControl MyHtml = new HtmlGenericControl();
            MyHtml.InnerHtml = "<div style=\"height:1px\">&nbsp;</div><div style=\"page-break-before: always; height:1px;\">&nbsp;</div>";

            // MyHtml.InnerHtml = "<tr style=""page-break-before: always;"">"
            this.Charts.Controls.Add(MyHtml);
        }

        public void Load_Sensors(int SelectedID)
        {
            //CameraMenu
            Collection MyCollection = new Collection();
            tvSensors.Nodes.Clear();
            LiveMonitoring.GlobalRemoteVars MyRem = new LiveMonitoring.GlobalRemoteVars();
            MyCollection = MyRem.get_GetServerObjects(((Session["SelectedSite"] == null) ? null : Session["SelectedSite"]));
            //GetServerObjects 'server1.GetAll()
            object MyObject1 = null;
            bool added = false;
            Array ItemValue = System.Enum.GetValues(typeof(LiveMonitoring.IRemoteLib.SensorDetails.SensorType));
            Array Item = System.Enum.GetNames(typeof(LiveMonitoring.IRemoteLib.SensorDetails.SensorType));

            foreach (object MyObject1_loopVariable in MyCollection)
            {
                MyObject1 = MyObject1_loopVariable;
                if (MyObject1 is LiveMonitoring.IRemoteLib.SensorDetails)
                {
                    LiveMonitoring.IRemoteLib.SensorDetails MySensor = (LiveMonitoring.IRemoteLib.SensorDetails)MyObject1;
                    //Dim MyItem As New Web.UI.WebControls.ListItem()
                    //MyItem.Text = MySensor.Caption
                    //If MySensor.Type = LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ServermonAgentSensor Then
                    //    MyItem.Text += ":" + MySensor.SerialNumber
                    //End If
                    //MyItem.Value = MySensor.ID
                    //If (SelectedID = 0 Or SelectedID = MySensor.ID) And IsPostBack = False Then
                    //    MyItem.Selected = True
                    //Else
                    //    If chkSensors.Items.Count = 0 And SelectedID = 0 Then
                    //        'MyItem.Selected = True
                    //    Else
                    //        MyItem.Selected = False
                    //    End If
                    //End If
                    //'MyItem.Tag = "Sensor"
                    //chkSensors.Items.Add(MyItem)

                    //treeview
                    //Dim UserNameQuery = From reg In sites.Regions _
                    //                Select reg
                    //If UserNameQuery.Count > 0 And tvSites.Nodes.Count = 0 Then
                    //For Each queryreg In UserNameQuery

                    //Dim node As TreeNode = FindNode(Item(CInt(MySensor.Type)))
                    //If IsNothing(node) Then
                    //    Dim node1 As New TreeNode
                    //    node1.ShowCheckBox = False
                    //    node1.Text = Item(CInt(MySensor.Type))
                    //    node1.Value = CInt(MySensor.Type)
                    //    node1.Expanded = False
                    //    tvSensors.Nodes.Add(node1)
                    //    node = FindNode(Item(CInt(MySensor.Type)))
                    //End If
                    bool AddSens = true;
                    if ((Session["SearchSensor"] == null) == false)
                    {
                        if (MySensor.Caption.ToUpper().Contains(Convert.ToString(Session["SearchSensor"]).ToUpper()) == false)
                        {
                            AddSens = false;
                        }
                    }
                    if (AddSens)
                    {
                        TreeNode node = FindNode(MySensor.SensGroup.SensorGroupName);
                        if ((node == null))
                        {
                            TreeNode node1 = new TreeNode();
                            node1.ShowCheckBox = false;
                            node1.Text = MySensor.SensGroup.SensorGroupName;
                            //Item(CInt(MySensor.Type))
                            node1.Value = MySensor.SensGroup.SensorGroupID.ToString();
                            //CInt(MySensor.Type)
                            node1.Expanded = false;
                            tvSensors.Nodes.Add(node1);
                            node = FindNode(MySensor.SensGroup.SensorGroupName);
                        }

                        TreeNode subnode = new TreeNode();
                        subnode.ShowCheckBox = true;
                        subnode.Text = MySensor.Caption;
                        subnode.Value = MySensor.ID.ToString();
                        node.ChildNodes.Add(subnode);
                    }

                }
            }

        }
        private TreeNode FindNode(string nodeName)
        {
            try
            {
                for (int mycnt = 0; mycnt <= tvSensors.Nodes.Count - 1; mycnt++)
                {
                    if (tvSensors.Nodes[mycnt].Text == nodeName)
                    {
                        return tvSensors.Nodes[mycnt];
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private void ultraChart1_ChartDrawItem(object sender, ChartDrawItemEventArgs e)
        {
            try
            {
                if ((e.Primitive == null) == false)
                {
                    if ((e.Primitive.Path == null) == false)
                    {
                        if (e.Primitive.Path.IndexOf("Legend") != -1)
                        {
                            if (e.Primitive.Path.IndexOf("Border") == -1)
                            {
                                e.Primitive.PE.StrokeWidth = 4;
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                errorMessage.Visible = true;
                lblError.Text = ex.Message;

                Trace.Write("err" + ex.Message);
            }

        }
        public void AddLayer(LiveMonitoring.IRemoteLib.SensorDetails SensorDet)
        {
            //MyCollection
            Collection MyData = null;
            LiveMonitoring.GlobalRemoteVars MyRem = new LiveMonitoring.GlobalRemoteVars();
            try
            {
                if (Information.IsDate(Session["StartDate"]) == true & Information.IsDate(Session["EndDate"]) == true)
                {
                    if (ddlDataSet.SelectedValue == "0")
                    {
                        MyData = MyRem.LiveMonServer.GetSensorHistory(SensorDet.ID, Convert.ToDateTime(Session["StartDate"]), Convert.ToDateTime(Session["EndDate"]));
                    }
                    else
                    {
                        MyData = MyRem.LiveMonServer.GetFilteredSensorHistory(ddlDataSet.SelectedIndex, SensorDet.ID, Convert.ToDateTime(Session["StartDate"]), Convert.ToDateTime(Session["EndDate"]));
                    }
                }

            }
            catch (Exception ex)
            {
            }
            if ((MyData == null) == false)
            {
                switch (SensorDet.Type)
                {
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.AMF:
                        DrawAMFGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.AMF120Mk4Monitor:
                        DrawAMFMk4Graphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.AMF120Mk4Status:
                        DrawAMFMk4Graphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.DeepSeaGensetMonitor:
                        DrawDeepSeaGensetGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.DeepSeaGensetStatus:
                        DrawDeepSeaGensetGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.BaseAudio:
                        break;
                    //TODO:Audio Graphs
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.CameraAudio:
                        break;
                    //TODO:Audio Graphs
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.CameraDInput:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.CameraDOutput:
                        break;
                    //output
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.CameraMotion:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.EDS_DS18B20:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.EDS_DS18S20:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.EDS_DS2406:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.EDS_AnalogOutput:
                        break;
                    //output
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.EDS_AnalogProbe:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HMP2001:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ICMPPoint:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ICMPSite:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ISPoint:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SNMPPoint:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SQLPoint:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusAInput:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusAOutput:
                        break;
                    //output
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusCounter:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusDInput:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusDiscrete:
                        DrawDiscreteOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusDOutput:
                        break;
                    //output
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusFloat:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusRTD:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusAInput:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusAOutput:
                        break;
                    //output
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusCounter:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusDInput:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusADiscrete:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusDiscrete:
                        DrawDiscreteOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusDOutput:
                        break;
                    //output
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusFloat:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SerialMbusRTD:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireTempType10:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireThermocronType21:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireTHDSmartMonitorType26:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireDualAdressableSwitchC:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireTempType28:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireDigiPotenType2C:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireLioBatMonitorType30:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OneWireQuadADType20:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ShutUPS:
                        DrawShutUPSGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.MegatecUPS:
                        DrawMegatecUPSGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.MegatecSNMP:
                        DrawMegatecSNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.GamatronicsSNMP:
                        DrawGamaTronicsSNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.Megatec3Phase:
                        DrawMegatec3PhaseUPSGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.VoltronicUSBUPS:
                        DrawVotronicUPSGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.BiometricReader247DB:
                        //MyBiochart = New Infragistics.WebUI.UltraWebChart.UltraChart
                        DrawBiometricOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.BiometricReaderSagem:
                        //MyBiochart = New Infragistics.WebUI.UltraWebChart.UltraChart
                        DrawBiometricOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.BiometricReaderZKSoft:
                        //MyBiochart = New Infragistics.WebUI.UltraWebChart.UltraChart
                        DrawBiometricOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LovatoGensetTCP:
                        DrawLovartoGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LovatoGensetRGAM20TCP:
                        DrawLovartoGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LovatoGensetRGAM60TCP:
                        DrawLovartoRGAM60Graphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.PowerWareSNMP:
                        DrawPowerWareSNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ServermonAgentSensor:
                        DrawWMIGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ServerLogSensor:
                        DrawServerLogGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SMTPCheckSensor:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.POPCheckSensor:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.POPCountSensor:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.POPLastDateSensor:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.FileCounter:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIGeneralSensor:
                        DrawWMIGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIDrivesSensor:
                        DrawWMIGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIMemorySensor:
                        DrawWMIGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIPCInfoSensor:
                        break;
                    //DrawWMIPCInfoGraphs(SensorDet, MyData)
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIPrintersSensor:
                        break;
                    //DrawWMIPrintersGraphs(SensorDet, MyData)
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIProcessorLoadSensor:
                        DrawWMIGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIProcessRunningSensor:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIServicesSensor:
                        break;
                    //DrawWMIServicesGraphs(SensorDet, MyData)
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIServiceRunningSensor:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIProcessThreadsSensor:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WMIProcessMemorySensor:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ElsterA1140MeterCurrentValues:
                        DrawElsterA1140CurrentGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ElsterA1700MeterCurrentValues:
                        DrawElsterA1700CurrentGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ElsterA1140MeterCUMULATIVEREGISTERS:
                        DrawElsterA1140CUMULATIVEREGISTERSGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ElsterA1700MeterCUMULATIVEREGISTERS:
                        DrawElsterA1700CUMULATIVEREGISTERSGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.YasKawaA1000:
                        DrawYasKawaA1000Graphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.YasKawaV1000:
                        DrawYasKawaA1000Graphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegTemperature:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegDryContact:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegHumidity:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegFlood:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegPowerDetector:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegRamosCSNMP:
                        DrawRamosCSNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegIntPDU008C3SNMP:
                        DrawContegIntPDU008C3SNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegIntPDU24SNMP:
                        break;
                    //DrawRamosCSNMPGraphs(SensorDet, MyData)
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegMonPDU16SNMP:
                        break;
                    //DrawRamosCSNMPGraphs(SensorDet, MyData)
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegMonPDU24SNMP:
                        break;
                    //DrawRamosCSNMPGraphs(SensorDet, MyData)
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ContegMonPDU8SNMP:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HW_GroupPoseidonSNMP:
                        DrawHWGRoupSNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HW_GroupPoseidonXMLTemperature:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HW_GroupPoseidonXMLDryContact:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HW_GroupPoseidonXMLHumidity:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HW_GroupPoseidonXMLFlood:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.HW_GroupPoseidonXMLPowerDetector:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.DeltaSNMP:
                        DrawDeltaSNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000DemandResults:
                        //do
                        DrawRockwellPM1000DemandResultsGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000EnergyLogResults:
                        //do
                        DrawRockwellPM1000EnergyLogResultsGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000EnergyResults:
                        //do
                        DrawRockwellPM1000EnergyResultsGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000LoadFactorlogResults:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000PowerResults:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000TimeOfuseLogkVAResults:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000TimeOfuseLogkVARResults:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000TimeOfuseLogKwhResults:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000UnitStatusLog:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RockwellPM1000VoltsAmpsFrequency:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.RTSysTM3SNMP:
                        DrawRTSysTM3SNMPGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMBusOffOnScheduledPoint:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMBusOnOffScheduledPoint:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OracleConnection:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OracleService:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.OracleUptime:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WonderWareService:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.WonderWareSQLHistorian:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.AdroitService:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.AdroitSQLHistorian:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.FileAgeChangeMonitorText:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.FileWatcherText:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.FileFilteredCounter:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.FileCSVMonitorText:
                        DrawDryContactOnOffGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SQLAllDBFileSize:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SQLDBMemory:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SQLDBStatus:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SNMPStandardPC:
                        DrawSNMPStandardPCGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SNMPSpecificServiceStatus:
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.SNMPSpecificProcessStatus:
                        break;
                    //case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LandisGyrE650BillingRegisters:
                       // ;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LandisGyrE650Cur:
                        DrawLandisGyrE650CurGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LandisGyrE650NMD:
                        DrawLandisGyrE650NMDGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.LandisGyrE650Profile:
                        DrawLandisGyrE650ProfileGraphs(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.KrohneHartVortexSteam:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.DingTekF330Level:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.DingTekF520Level:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ICPDasPowerMeter:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                    case IRemoteLib.SensorDetails.SensorType.EDS_OWENVTH:
                        DrawSimpleLineGraph(SensorDet, MyData);
                        break;
                        //DrawRamosCSNMPGraphs(SensorDet, MyData)
                        //Case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ElsterA1140MeterCumulativeMaxDemandRegisters
                        //    DrawElsterA1140CumulativeMaxDemandGraphs(SensorDet, MyData)
                        //Case LiveMonitoring.IRemoteLib.SensorDetails.SensorType.ElsterA1700MeterCumulativeMaxDemandRegisters
                        //    DrawElsterA1700CumulativeMaxDemandGraphs(SensorDet, MyData)
                }
                //If SensorDet.Type = LiveMonitoring.IRemoteLib.SensorDetails.SensorType.TCPMbusDInput Then
                //    DrawSimpleLineGraph(SensorDet, MyData)
                //End If


            }


        }

        private void DrawLandisGyrE650ProfileGraphs(IRemoteLib.SensorDetails sensorDet, Collection myData)
        {
            //Me.SetPastValue(1, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(1) 'status
            //Me.SetPastValue(2, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(2) / 100 'kW
            //Me.SetPastValue(3, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(3) / 100 'kvar
            //Me.SetPastValue(4, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(4) / 100 'kVA
            //Me.SetPastValue(5, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(5) / 100 'V1
            //Me.SetPastValue(6, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(6) / 100 'V2
            //Me.SetPastValue(7, Myprofilerec.DateData(0), "") = Myprofilerec.ValueData(7) / 100 'V3
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LandisProf" + sensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Landis Prof :" + sensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[8];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 6; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (sensorDet.Fields.Contains((Bcnt + 2).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(Bcnt + 2).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(Bcnt + 2).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           // LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in myData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1

                //ignore status              
                if (MyField > 1)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 2].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 2].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 6; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }

        private void DrawLandisGyrE650NMDGraphs(IRemoteLib.SensorDetails sensorDet, Collection myData)
        {
            //Me.SetLastValue(1) = Myrecord.Activemaximumdemand / (10 ^ LandisGyrScalar(0).scalerExponent)
            //Me.SetLastValue(2) = Myrecord.Cumulativemaximumdemand / (10 ^ LandisGyrScalar(1).scalerExponent)
            //Me.SetLastValue(3) = Myrecord.CurrentAvgNMD / (10 ^ LandisGyrScalar(2).scalerExponent)
            //Me.SetLastValue(4) = Myrecord.MaximumdemandkVA / (10 ^ LandisGyrScalar(3).scalerExponent)
            //Me.SetLastValue(5) = Myrecord.CumulativemaximumdemandkVA / (10 ^ LandisGyrScalar(4).scalerExponent)
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LandisNMD" + sensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Landis NMD :" + sensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[8];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 4; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (sensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           // LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in myData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1

                //If MyField > 1 Then 'ignore status              
                int myret = 0;
                myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                //End If

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 4; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }



        public void DrawLandisGyrE650CurGraphs(LiveMonitoring.IRemoteLib.SensorDetails sensorDet, Collection myData)
        {

            try
            {
                DrawLandisGyrE650CurGraphs1(sensorDet, myData);
                //NeuteralCurrent MainsFrequency 
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLandisGyrE650CurGraphs2(sensorDet, myData);
                //cURRENT
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLandisGyrE650CurGraphs3(sensorDet, myData);
                //vOLTAGE
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLandisGyrE650CurGraphs4(sensorDet, myData);
                //pf
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }


        }

        private void DrawLandisGyrE650CurGraphs1(IRemoteLib.SensorDetails sensorDet, Collection myData)
        {
            //NeuteralCurrent 4 MainsFrequency 20
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LandisAP" + sensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Landis NA Hz :" + sensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[3];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((4).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(4).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[0] = new NumericTimeSeries();
                    numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(4).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[0] = new NumericTimeSeries();
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((20).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(20).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[1] = new NumericTimeSeries();
                    numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(20).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[1] = new NumericTimeSeries();
                numericTimeSeries1[1].Label = "Unknown";
            }
            //For Bcnt = 0 To 1
            //    numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //    If sensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
            //        If CType(sensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //            numericTimeSeries1[Bcnt].Label = CType(sensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //        End If
            //    Else
            //        numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //        numericTimeSeries1[Bcnt].Label = "Unknown"
            //    End If
            //Next
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           // LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in myData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status              
                if (MyField == 4)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 20)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[1].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }

        private void DrawLandisGyrE650CurGraphs4(IRemoteLib.SensorDetails sensorDet, Collection myData)
        {
            //1 2 3 7 10 13
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LandisPf" + sensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Landis Pf:" + sensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[7];
            int Bcnt = 0;
            //1 2 3 7 10 13
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((1).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(1).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[0] = new NumericTimeSeries();
                    numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(1).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[0] = new NumericTimeSeries();
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((2).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(2).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[1] = new NumericTimeSeries();
                    numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(2).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[1] = new NumericTimeSeries();
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((3).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(3).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[2] = new NumericTimeSeries();
                    numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(3).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[2] = new NumericTimeSeries();
                numericTimeSeries1[2].Label = "Unknown";
            }
            numericTimeSeries1[3] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((7).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(7).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[3] = new NumericTimeSeries();
                    numericTimeSeries1[3].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(7).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[3] = new NumericTimeSeries();
                numericTimeSeries1[3].Label = "Unknown";
            }
            numericTimeSeries1[4] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(10.ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(10).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[4] = new NumericTimeSeries();
                    numericTimeSeries1[4].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(10).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[4] = new NumericTimeSeries();
                numericTimeSeries1[4].Label = "Unknown";
            }
            numericTimeSeries1[5] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains((13).ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(13).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[5] = new NumericTimeSeries();
                    numericTimeSeries1[5].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(13).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[5] = new NumericTimeSeries();
                numericTimeSeries1[5].Label = "Unknown";
            }
            //For Bcnt = 0 To 1
            //    numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //    If sensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
            //        If CType(sensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //            numericTimeSeries1[Bcnt].Label = CType(sensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //        End If
            //    Else
            //        numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //        numericTimeSeries1[Bcnt].Label = "Unknown"
            //    End If
            //Next
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in myData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status              
                if (MyField <= 3)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 7)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[3].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[3].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[3].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 10)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[4].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[4].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[4].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 13)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[5].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[5].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[5].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 5; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }

        private void DrawLandisGyrE650CurGraphs3(IRemoteLib.SensorDetails sensorDet, Collection myData)
        {
            //VoltageL1 6 VoltageL1 9 VoltageL1 12
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LandisVolt" + sensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Landis Current:" + sensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            int Bcnt = 0;
            //VoltageL1 6 VoltageL1 9 VoltageL1 12
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(6.ToString()) == true)
            {
                //If CType(sensorDet.Fields((6).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[6.ToString()]).DisplayValue)
                {
                    numericTimeSeries1[0] = new NumericTimeSeries();
                    numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[6.ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[0] = new NumericTimeSeries();
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(9.ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(9).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[1] = new NumericTimeSeries();
                    numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(9).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[1] = new NumericTimeSeries();
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(12.ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(12).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[2] = new NumericTimeSeries();
                    numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(12).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[2] = new NumericTimeSeries();
                numericTimeSeries1[2].Label = "Unknown";
            }
            //For Bcnt = 0 To 1
            //    numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //    If sensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
            //        If CType(sensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //            numericTimeSeries1[Bcnt].Label = CType(sensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //        End If
            //    Else
            //        numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //        numericTimeSeries1[Bcnt].Label = "Unknown"
            //    End If
            //Next
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           // LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in myData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status              
                if (MyField == 6)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 9)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[1].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 12)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[2].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }


        private void DrawLandisGyrE650CurGraphs2(LiveMonitoring.IRemoteLib.SensorDetails sensorDet, Collection myData)
        {
            //CurrentL1 5 CurrentL2 8 CurrentL3 11
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LandisCur" + sensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Landis Current:" + sensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            int Bcnt = 0;
            //CurrentL1 5 CurrentL2 8 CurrentL3 11
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(5.ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(5).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[0] = new NumericTimeSeries();
                    numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(5).ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[0] = new NumericTimeSeries();
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(8.ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(8).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[1] = new NumericTimeSeries();
                    numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[8.ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[1] = new NumericTimeSeries();
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (sensorDet.Fields.Contains(11.ToString()) == true)
            {
                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[(11).ToString()]).DisplayValue)
                {
                    numericTimeSeries1[2] = new NumericTimeSeries();
                    numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)sensorDet.Fields[11.ToString()]).FieldName;
                }
            }
            else
            {
                numericTimeSeries1[2] = new NumericTimeSeries();
                numericTimeSeries1[2].Label = "Unknown";
            }
          
            int tmp1cntwe = 0;
            //mycnt1= fields ?
             //= default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory  MyDataHistory in myData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status              
                if (MyField == 5)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 8)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[1].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status              
                if (MyField == 11)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[2].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }


        public void DrawSNMPStandardPCGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawSNMPStandardPCGraphsCPU1(SensorDet, MyData);
                //CPUMEM
                AddPageBreak();
                DrawSNMPStandardPCGraphsMEM1(SensorDet, MyData);
                //DrawSNMPStandardPCGraphsNWStatus1(SensorDet, MyData) 'NWStatus
                AddPageBreak();
                DrawSNMPStandardPCGraphsDisk1(SensorDet, MyData);
                //Disk
                AddPageBreak();
                DrawSNMPStandardPCGraphsVirtualMem1(SensorDet, MyData);
                //NWStatus
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawSNMPStandardPCGraphsCPU1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPStandardPCCPUResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "SNMP CPU Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[19];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 1; Bcnt <= 1; Bcnt++)
            {
                try
                {
                    numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                    if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                    {
                        if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                        {
                            numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                            numericTimeSeries1[Bcnt - 1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                        }
                    }
                    else
                    {
                        numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 1].Label = "Unknown";
                    }

                }
                catch (Exception ex)
                {
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter and dates
                    if (MyField >= 2 & MyField <= 2)
                    {
                        if (MyField > MaxFieldCnt)
                        {
                            MaxFieldCnt = MyField;
                        }
                        int myret = 0;
                        myret = numericTimeSeries1[MyField - 2].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[MyField - 2].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[MyField - 2].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                catch (Exception ex)
                {
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 0; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);

                }
                catch (Exception ex)
                {
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        public void DrawSNMPStandardPCGraphsMEM1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPStandardPCMemResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "SNMP Mem Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[19];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 2; Bcnt <= 3; Bcnt++)
            {
                try
                {
                    numericTimeSeries1[Bcnt - 2] = new NumericTimeSeries();
                    if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                    {
                        if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                        {
                            numericTimeSeries1[Bcnt - 2] = new NumericTimeSeries();
                            numericTimeSeries1[Bcnt - 2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                        }
                    }
                    else
                    {
                        numericTimeSeries1[Bcnt - 2] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 2].Label = "Unknown";
                    }

                }
                catch (Exception ex)
                {
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter and dates
                    if (MyField >= 3 & MyField <= 4)
                    {
                        if (MyField > MaxFieldCnt)
                        {
                            MaxFieldCnt = MyField;
                        }
                        int myret = 0;
                        myret = numericTimeSeries1[MyField - 3].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[MyField - 3].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[MyField - 3].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                catch (Exception ex)
                {
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);

                }
                catch (Exception ex)
                {
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        public void DrawSNMPStandardPCGraphsDisk1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPStandardPCDiskResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "SNMP Disk Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset
            //find max tabuklar rows
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistoryTest = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxTabular = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistoryTest in MyData)
            {
                try
                {
                    int MyField = MyDataHistoryTest.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter and dates
                    if (MyField == 6)
                    {
                        if (MyDataHistoryTest.tabRowCnt > MaxTabular)
                        {
                            MaxTabular = MyDataHistoryTest.tabRowCnt;
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
            // If MaxTabular = 0 Then MaxTabular = 1
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[(MaxTabular + 1) * 2 + 1];
            for (int TabCntr = 0; TabCntr <= MaxTabular; TabCntr++)
            {
                for (Bcnt = 0; Bcnt <= 1; Bcnt++)
                {
                    try
                    {
                        numericTimeSeries1[Bcnt + TabCntr] = new NumericTimeSeries();
                        if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                        {
                            if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                            {
                                numericTimeSeries1[Bcnt + TabCntr] = new NumericTimeSeries();
                                numericTimeSeries1[Bcnt + TabCntr].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                            }
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt + TabCntr] = new NumericTimeSeries();
                            numericTimeSeries1[Bcnt + TabCntr].Label = "Unknown";
                        }

                    }
                    catch (Exception ex)
                    {
                    }

                }
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            for (int TabCntr = 0; TabCntr <= MaxTabular; TabCntr++)
            {
                foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
                {
                    try
                    {
                        int MyField = MyDataHistory.Field;
                        //- 1 'field always starts at 1
                        //ignore record counter and dates  
                        if (MyField == 6 | MyField == 7)
                        {
                            if (MyDataHistory.tabRowCnt == TabCntr)
                            {
                                int myret = 0;
                                myret = numericTimeSeries1[(MyField + TabCntr) - 6].Points.Add(new NumericTimeDataPoint());
                                numericTimeSeries1[(MyField + TabCntr) - 6].Label = MyDataHistory.OtherData;
                                numericTimeSeries1[(MyField + TabCntr) - 6].Points[myret].TimeValue = MyDataHistory.DT;
                                numericTimeSeries1[(MyField + TabCntr) - 6].Points[myret].NumericValue = MyDataHistory.Value;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            for (int TabCntr = 0; TabCntr <= MaxTabular; TabCntr++)
            {
                int Acnt = 0;
                for (Acnt = 0; Acnt <= 1; Acnt++)
                {
                    try
                    {
                        DLchartLayer1.Series.Add(numericTimeSeries1[Acnt + TabCntr]);
                        DLseries1 = numericTimeSeries1[Acnt + TabCntr];
                        MyDateLinechart1.Series.Add(DLseries1);

                    }
                    catch (Exception ex)
                    {
                    }

                }
            }

            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        public void DrawSNMPStandardPCGraphsVirtualMem1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPStandardPCVirtualResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "SNMP Virtual Mem Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset
            //find max tabuklar rows
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistoryTest = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxTabular = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistoryTest in MyData)
            {
                try
                {
                    int MyField = MyDataHistoryTest.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter and dates
                    if (MyField == 8)
                    {
                        if (MyDataHistoryTest.tabRowCnt > MaxTabular)
                        {
                            MaxTabular = MyDataHistoryTest.tabRowCnt;
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
            // If MaxTabular = 0 Then MaxTabular = 1
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[(MaxTabular + 1) * 2 + 1];
            for (int TabCntr = 0; TabCntr <= MaxTabular; TabCntr++)
            {
                for (Bcnt = 0; Bcnt <= 1; Bcnt++)
                {
                    numericTimeSeries1[Bcnt + TabCntr] = new NumericTimeSeries();
                    try
                    {
                        numericTimeSeries1[(Bcnt + TabCntr)] = new NumericTimeSeries();
                        if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                        {
                            if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                            {
                                numericTimeSeries1[Bcnt + TabCntr] = new NumericTimeSeries();
                                numericTimeSeries1[Bcnt + TabCntr].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                            }
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt + TabCntr] = new NumericTimeSeries();
                            numericTimeSeries1[Bcnt + TabCntr].Label = "Unknown";
                        }

                    }
                    catch (Exception ex)
                    {
                    }

                }
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            for (int TabCntr = 0; TabCntr <= MaxTabular; TabCntr++)
            {
                foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
                {
                    try
                    {
                        int MyField = MyDataHistory.Field;
                        //- 1 'field always starts at 1
                        //ignore record counter and dates  
                        if (MyField == 8 | MyField == 9)
                        {
                            if (MyDataHistory.tabRowCnt == TabCntr)
                            {
                                int myret = 0;
                                myret = numericTimeSeries1[(MyField + TabCntr) - 8].Points.Add(new NumericTimeDataPoint());
                                numericTimeSeries1[(MyField + TabCntr) - 8].Label = MyDataHistory.OtherData;
                                numericTimeSeries1[(MyField + TabCntr) - 8].Points[myret].TimeValue = MyDataHistory.DT;
                                numericTimeSeries1[(MyField + TabCntr) - 8].Points[myret].NumericValue = MyDataHistory.Value;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            for (int TabCntr = 0; TabCntr <= MaxTabular; TabCntr++)
            {
                int Acnt = 0;
                for (Acnt = 0; Acnt <= 1; Acnt++)
                {
                    try
                    {
                        DLchartLayer1.Series.Add(numericTimeSeries1[Acnt + TabCntr]);
                        DLseries1 = numericTimeSeries1[Acnt + TabCntr];
                        MyDateLinechart1.Series.Add(DLseries1);

                    }
                    catch (Exception ex)
                    {
                    }

                }
            }

            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        public void DrawRockwellPM1000EnergyResultsGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawRockwellPM1000EnergyResultsGraphs1(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawRockwellPM1000EnergyResultsGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "RockwellPM1000EnergyResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Energy Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[19];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 17; Bcnt++)
            {
                try
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                    {
                        if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                        {
                            numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                            numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                        }
                    }
                    else
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = "Unknown";
                    }

                }
                catch (Exception ex)
                {
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter and dates
                    if (MyField >= 1 & MyField <= 18)
                    {
                        if (MyField > MaxFieldCnt)
                        {
                            MaxFieldCnt = MyField;
                        }
                        int myret = 0;
                        myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                catch (Exception ex)
                {
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 17; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);

                }
                catch (Exception ex)
                {
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        public void DrawRockwellPM1000EnergyLogResultsGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawRockwellPM1000EnergyLogResultsGraphs1(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawRockwellPM1000EnergyLogResultsGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "RockwellPM1000EnergyLogResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Energy Log Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[14];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 5; Bcnt <= 18; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 5].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 5].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter and dates
                    if (MyField >= 6 & MyField <= 19)
                    {
                        if (MyField > MaxFieldCnt)
                        {
                            MaxFieldCnt = MyField;
                        }
                        int myret = 0;
                        myret = numericTimeSeries1[MyField - 6].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[MyField - 6].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[MyField - 6].Points[myret].NumericValue = MyDataHistory.Value;
                    }

                }
                catch (Exception ex)
                {
                }


            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 13; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);

                }
                catch (Exception ex)
                {
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        public void DrawRockwellPM1000DemandResultsGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawRockwellPM1000DemandResultsGraphs2(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawRockwellPM1000DemandResultsGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "RockwellPM1000DemandResults" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Demand Results :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[9];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 7; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore record counter
                    if (MyField <= 7)
                    {
                        if (MyField > MaxFieldCnt)
                        {
                            MaxFieldCnt = MyField;
                        }
                        int myret = 0;
                        myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                    }


                }
                catch (Exception ex)
                {
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 7; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);

                }
                catch (Exception ex)
                {
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()


        }

        //draw a generic graph on page
        //need to pass in sensor ,data ,numeric time series and fields collection that should be displayed

        public void DrawGenericLineGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData, int GraphWidth, int GraphHeigh, NumericTimeSeries[] numericTimeSeries1, Collection FieldsCol)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GenericLineGraph" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            //Dim numericTimeSeries1(400) As NumericTimeSeries
            //Dim Bcnt As Integer
            //Dim FieldCnt As Integer = -1
            //Dim FieldValCnt As Integer = -1
            //Dim FieldValueLink As New Collection
            //Dim FieldNameLink As New Collection
            //For Bcnt = 0 To 400
            //    If SensorDet.Fields.Contains((Bcnt).ToString) = True Then
            //        If CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            Try
            //                If CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName.Contains("Sensor") And CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName.Contains("Value") Then
            //                    FieldValCnt += 1
            //                    FieldValueLink.Add(FieldValCnt, Bcnt.ToString)
            //                Else
            //                    If CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName.Contains("Sensor") And CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName.Contains("Name") Then
            //                        FieldCnt += 1
            //                        FieldNameLink.Add(FieldCnt, Bcnt.ToString)
            //                        numericTimeSeries1(FieldCnt) = New NumericTimeSeries
            //                        numericTimeSeries1(FieldCnt).Label = CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //                    End If
            //                End If
            //            Catch ex As Exception
            //                Trace.Write(ex.Message)
            //            End Try

            //            ' Else

            //        End If
            //    Else

            //    End If
            //Next
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int RowCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore status
                    if (FieldsCol.Contains(MyField.ToString()))
                    {
                        int myret = 0;
                        myret = numericTimeSeries1[Convert.ToInt32(FieldsCol[MyField.ToString()])].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[Convert.ToInt32(FieldsCol[MyField.ToString()])].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[Convert.ToInt32(FieldsCol[MyField.ToString()])].Points[myret].NumericValue = MyDataHistory.Value / 10;
                    }
                    //ignore status
                    if (FieldsCol.Contains(MyField.ToString()))
                    {
                        numericTimeSeries1[Convert.ToInt32(FieldsCol[MyField.ToString()])].Label = MyDataHistory.OtherData;
                    }

                }
                catch (Exception ex)
                {
                    errorMessage.Visible = true;
                    lblError.Text = ex.Message;

                    Trace.Write(ex.Message);
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= FieldsCol.Count; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);

                }
                catch (Exception ex)
                {
                    errorMessage.Visible = true;
                    lblError.Text = ex.Message;

                    Trace.Write(ex.Message);
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = GraphWidth;
            MyDateLinechart1.Height = GraphHeigh;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);


        }
        public void DrawGenericOnOffGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData, int GraphWidth, int GraphHeigh, Collection FieldsCol)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "GenericOnOffGraph" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[FieldsCol.Count + 1];

            for (tmpcntwe1 = 0; tmpcntwe1 <= FieldsCol.Count; tmpcntwe1++)
            {
                tmpcntwe = Convert.ToInt32(FieldsCol[(tmpcntwe1 + 1).ToString()]);
                GanttItem task1a = default(GanttItem);
                if (SensorDet.Fields.Contains(tmpcntwe.ToString()) == true)
                {
                    if ((((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName == null) == false)
                    {
                        task1a = ganttSeries.Items.Add(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName);
                    }
                    else
                    {
                        //Exit For
                        task1a = ganttSeries.Items.Add("Unk");
                    }
                }
                else
                {
                    //Exit For
                    task1a = ganttSeries.Items.Add("Unk");
                }

                ChartColors[tmpcntwe1] = Color.Green;
                string[] Dates = GenerateDryContactONOffStartEndData(tmpcntwe, MyData);

                int LastEnd = 0;
                if ((Dates[0] == null) == false | (Dates[1] == null) == false)
                {
                    string[] StartArray = Strings.Split(Dates[0], ",");
                    string[] EndArray = Strings.Split(Dates[1], ",");
                    int loopcnt = 0;
                    if (Information.UBound(StartArray) > -1)
                    {
                        for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                        {
                            string endtime = null;
                            if (Information.UBound(EndArray) >= loopcnt)
                            {
                                if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                                {
                                    endtime = EndArray[loopcnt];
                                }
                                else
                                {
                                    endtime = this.txtEnd.Text;
                                    if (string.IsNullOrEmpty(endtime))
                                    {
                                        endtime = DateAndTime.Now.ToString();
                                    }
                                }
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                            }
                            if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                            {
                                task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                                task1a.Times[0].ID = 0;
                                task1a.Times[0].LinkToID = 1;
                                task1a.Times[0].PercentComplete = 1;
                                task1a.Times[0].Owner = "Worker A";
                            }
                        }
                    }
                }

            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = GraphWidth;
            Mychart.Height = GraphHeigh;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);

        }

        public void DrawHWGRoupSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawHWGRoupSNMPGraphsValues(SensorDet, MyData);
                //sensor values
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawHWGRoupSNMPGraphsInputs(SensorDet, MyData);
                //input status
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawHWGRoupSNMPGraphsValues(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "HWGroupSNMP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "HW-Group SNMP :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[401];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset
            int FieldCnt = -1;
            int FieldValCnt = -1;
            Collection FieldValueLink = new Collection();
            Collection FieldNameLink = new Collection();
            for (Bcnt = 0; Bcnt <= 400; Bcnt++)
            {
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        try
                        {
                            if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName.Contains("Sensor") & ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName.Contains("Value"))
                            {
                                FieldValCnt += 1;
                                FieldValueLink.Add(FieldValCnt, Bcnt.ToString());
                                //numericTimeSeries1(FieldCnt) = New NumericTimeSeries
                                //numericTimeSeries1(FieldCnt).Label = CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                            }
                            else
                            {
                                if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName.Contains("Sensor") & ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName.Contains("Name"))
                                {
                                    FieldCnt += 1;
                                    FieldNameLink.Add(FieldCnt, Bcnt.ToString());
                                    numericTimeSeries1[FieldCnt] = new NumericTimeSeries();
                                    numericTimeSeries1[FieldCnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            errorMessage.Visible = true;
                            lblError.Text = ex.Message;

                            Trace.Write(ex.Message);
                        }

                        // Else

                    }

                }
                else
                {
                    //dont show me
                    // numericTimeSeries1[Bcnt] = New NumericTimeSeries
                    //numericTimeSeries1[Bcnt].Label = "Unknown"
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int RowCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory 
                MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore status
                    if (FieldValueLink.Contains(MyField.ToString()))
                    {
                        int myret = 0;
                        myret = numericTimeSeries1[Convert.ToInt32(FieldValueLink[MyField.ToString()])].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[Convert.ToInt32(FieldValueLink[MyField.ToString()])].Points[myret].TimeValue = MyDataHistory.DT;

                        numericTimeSeries1[Convert.ToInt32(FieldValueLink[MyField.ToString()])].Points[myret].NumericValue = MyDataHistory.Value;
                        /// 10
                    }
                    //ignore status
                    if (FieldNameLink.Contains(MyField.ToString()))
                    {
                        if (MyDataHistory.OtherData.Contains("error") == false)
                            numericTimeSeries1[Convert.ToInt32(FieldNameLink[MyField.ToString()])].Label = MyDataHistory.OtherData;
                    }
                }
                catch (Exception ex)
                {
                    Trace.Write(ex.Message);
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= FieldCnt; Acnt++)
            {
                try
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
                catch (Exception ex)
                {
                    Trace.Write(ex.Message);
                }

            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }
        public void DrawHWGRoupSNMPGraphsInputs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "HWGroupIO" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];

            for (tmpcntwe1 = 1; tmpcntwe1 <= 1000; tmpcntwe1++)
            {
                tmpcntwe = tmpcntwe1 + 1;
                GanttItem task1a = default(GanttItem);
                if (SensorDet.Fields.Contains(tmpcntwe1.ToString()) == true)
                {
                    if ((((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName == null) == false)
                    {
                        if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName.Contains("Input") == false)
                        {
                            break; // TODO: might not be correct. Was : Exit For
                        }
                        task1a = ganttSeries.Items.Add(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName);
                    }
                    else
                    {
                        break; // TODO: might not be correct. Was : Exit For
                        task1a = ganttSeries.Items.Add("Unk");
                    }
                }
                else
                {
                    break; // TODO: might not be correct. Was : Exit For
                    task1a = ganttSeries.Items.Add("Unk");
                }

                ChartColors[tmpcntwe1 - 1] = Color.Green;
                string[] Dates = GenerateDryContactONOffStartEndData(tmpcntwe, MyData);

                int LastEnd = 0;
                if ((Dates[0] == null) == false | (Dates[1] == null) == false)
                {
                    string[] StartArray = Strings.Split(Dates[0], ",");
                    string[] EndArray = Strings.Split(Dates[1], ",");
                    int loopcnt = 0;
                    if (Information.UBound(StartArray) > -1)
                    {
                        for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                        {
                            string endtime = null;
                            if (Information.UBound(EndArray) >= loopcnt)
                            {
                                if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                                {
                                    endtime = EndArray[loopcnt];
                                }
                                else
                                {
                                    endtime = this.txtEnd.Text;
                                    if (string.IsNullOrEmpty(endtime))
                                    {
                                        endtime = DateAndTime.Now.ToString();
                                    }
                                }
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                            }
                            if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                            {
                                task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                                task1a.Times[0].ID = 0;
                                task1a.Times[0].LinkToID = 1;
                                task1a.Times[0].PercentComplete = 1;
                                task1a.Times[0].Owner = "Worker A";
                            }
                        }
                    }
                }

            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 350;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);

        }

        public void DrawRamosCSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawRamosCSNMPGraphs2(SensorDet, MyData);
                //sensor values
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawRamosCSNMPGraphs3(SensorDet, MyData);
                //inout status
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawRamosCSNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "RamosCSNMP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "RamosCSNMP :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 4; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 24).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 24).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 24).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 24 & MyField <= 27)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 24].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 24].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 24].Points[myret].NumericValue = MyDataHistory.Value / 10;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 24; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }
        public void DrawRamosCSNMPGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "RamosCIO" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];

            for (tmpcntwe1 = 1; tmpcntwe1 <= 6; tmpcntwe1++)
            {
                tmpcntwe = tmpcntwe1 + 1;
                ChartColors[tmpcntwe1 - 1] = Color.Green;
                string[] Dates = GenerateDryContactONOffStartEndData(tmpcntwe, MyData);
                GanttItem task1a = default(GanttItem);
                if (SensorDet.Fields.Contains(tmpcntwe1.ToString()) == true)
                {
                    if ((((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName == null) == false)
                    {
                        task1a = ganttSeries.Items.Add(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName);
                    }
                    else
                    {
                        task1a = ganttSeries.Items.Add("Unk");
                    }
                }
                else
                {
                    task1a = ganttSeries.Items.Add("Unk");
                }
                int LastEnd = 0;
                if ((Dates[0] == null) == false | (Dates[1] == null) == false)
                {
                    string[] StartArray = Strings.Split(Dates[0], ",");
                    string[] EndArray = Strings.Split(Dates[1], ",");
                    int loopcnt = 0;
                    if (Information.UBound(StartArray) > -1)
                    {
                        for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                        {
                            string endtime = null;
                            if (Information.UBound(EndArray) >= loopcnt)
                            {
                                if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                                {
                                    endtime = EndArray[loopcnt];
                                }
                                else
                                {
                                    endtime = this.txtEnd.Text;
                                    if (string.IsNullOrEmpty(endtime))
                                    {
                                        endtime = DateAndTime.Now.ToString();
                                    }
                                }
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                            }
                            if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                            {
                                task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                                task1a.Times[0].ID = 0;
                                task1a.Times[0].LinkToID = 1;
                                task1a.Times[0].PercentComplete = 1;
                                task1a.Times[0].Owner = "Worker A";
                            }
                        }
                    }
                }

            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 350;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);

        }
        public void DrawContegIntPDU008C3SNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawContegIntPDU008C3SNMPGraphs2(SensorDet, MyData);
                // values
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //Try
            //    DrawRamosCSNMPGraphs3(SensorDet, MyData) 'inout status
            //    AddPageBreak()
            //Catch ex As Exception

            //End Try


        }

        public void DrawContegIntPDU008C3SNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "RamosPDU008SNMP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PDU008SNMP :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[25];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 7; Bcnt++)
            {
                //Select Case Bcnt
                //Case 0
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[((6 * Bcnt) + 6).ToString()]).FieldName;
                //numericTimeSeries1((3 * Bcnt) + 1) = New NumericTimeSeries
                //numericTimeSeries1((3 * Bcnt) + 1).Label = CType(SensorDet.Fields(((6 * Bcnt) + 8).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //numericTimeSeries1((3 * Bcnt) + 2) = New NumericTimeSeries
                //numericTimeSeries1((3 * Bcnt) + 2).Label = "Device " + Bcnt.ToString + " Watts"
                //End Select
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                if (MyField > MaxFieldCnt)
                {
                    MaxFieldCnt = MyField;
                }
                double TmpValue = 0;
                double TmpVolts = 0;


                if (MyField == 6 | MyField == 9 | MyField == 12 | MyField == 15 | MyField == 18 | MyField == 21 | MyField == 24)
                {
                    int myret = 0;
                    int myfieldNo = MyField - 6;
                    //should be 0,3,6
                    myfieldNo = myfieldNo / 3;
                    myret = numericTimeSeries1[myfieldNo].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[myfieldNo].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[myfieldNo].Points[myret].NumericValue = MyDataHistory.Value / 10;
                    TmpValue = MyDataHistory.Value / 10;
                }
                //If MyField = 8 Or MyField = 11 Or MyField = 14 Or MyField = 17 Or MyField = 20 Or MyField = 23 Or MyField = 26 Then
                //    Dim myret As Integer
                //    Dim myfieldNo As Integer = MyField - 7 'should be 1,4,7
                //    myret = numericTimeSeries1[myfieldNo].Points.Add(New NumericTimeDataPoint())
                //    numericTimeSeries1[myfieldNo].Points[myret].TimeValue = MyDataHistory.DT
                //    numericTimeSeries1[myfieldNo].Points[myret].NumericValue = 0 'MyDataHistory.Value
                //    TmpVolts = MyDataHistory.Value
                //    myfieldNo = MyField - 6 'should be 2,5,8
                //    If TmpValue > 0 And TmpVolts > 0 Then
                //        Dim myret1 As Integer
                //        myret1 = numericTimeSeries1[myfieldNo].Points.Add(New NumericTimeDataPoint())
                //        numericTimeSeries1[myfieldNo].Points(myret1).TimeValue = MyDataHistory.DT
                //        numericTimeSeries1[myfieldNo].Points(myret1).NumericValue = TmpVolts * TmpValue
                //    Else
                //        Dim myret1 As Integer
                //        myret = numericTimeSeries1[myfieldNo].Points.Add(New NumericTimeDataPoint())
                //        numericTimeSeries1[myfieldNo].Points(myret1).TimeValue = MyDataHistory.DT
                //        numericTimeSeries1[myfieldNo].Points(myret1).NumericValue = 0
                //    End If
                //End If




            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 7; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawYasKawaA1000Graphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            //DrawDeepSeaSummaryGraph(SensorDet, MyData)
            try
            {
                DrawYasKawaA1000MainsGraphsNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawYasKawaA1000ControlmodeGraphNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawYasKawaA1000WarningAlarmGraphNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawYasKawaA1000FaultGraphNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }

            //DrawAMFWarningCanbusSPNGraph(SensorDet, MyData)
            //DrawDeepSeaWarningCanbusFMIGraph(SensorDet, MyData)
        }

        public void DrawYasKawaA1000FaultGraphNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "YasKawaA1000Fault" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "YasKawaA1000 Fault:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                // tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                string[] Dates = GenerateLovartoStartEndData(7, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindYasKawaA1000Fault1bits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 200;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 800;
            Mychart.Height = 850;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }
        public string FindYasKawaA1000Fault1bits(int mycnt)
        {
            if (mycnt == 0)
                return "Overcurrent (oC), Ground fault (GF)";
            if (mycnt == 1)
                return "Overvoltage (ov)";
            if (mycnt == 2)
                return "Drive Overload (oL2)";
            if (mycnt == 3)
                return "Overheat 1 (oH1), Drive Overheat Warning (oH2)";
            if (mycnt == 4)
                return "Dynamic Braking Transistor Fault (rr), Braking Resistor Overheat (rH)";
            if (mycnt == 5)
                return "Reserved";
            if (mycnt == 6)
                return "PID Feedback Loss (FbL / FbH)";
            if (mycnt == 7)
                return "EF to EF8: External Fault";
            if (mycnt == 8)
                return "CPF: Hardware Fault (includes oFx)";
            if (mycnt == 9)
                return "Motor Overload (oL1), Overtorque Detection 1/2 (oL3/oL4), Undertorque Detection 1/2 (UL3/UL4)";
            if (mycnt == 10)
                return "PG Disconnected (PGo), PG Hardware Fault (PGoH), Overspeed (oS), Excessive Speed Deviation (dEv),";
            if (mycnt == 11)
                return "Main Circuit Undervoltage (Uv)";
            if (mycnt == 12)
                return "Undervoltage (Uv1), Control Power Supply Undervoltage (Uv2), Soft Charge Circuit Fault (Uv3)";
            if (mycnt == 13)
                return "Output Phase Loss (LF), Input Phase Loss (PF)";
            if (mycnt == 14)
                return "MEMOBUS/Modbus Communication Error (CE), Option Communication Error (bUS)";
            if (mycnt == 15)
                return "Operator Connection Fault (oPr)";
            return "Unk";
        }


        public void DrawYasKawaA1000WarningAlarmGraphNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "YasKawaA1000Alarm" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "YasKawaA1000 Alarm1:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                // tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                string[] Dates = GenerateLovartoStartEndData(9, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindYasKawaA1000Alarm1bits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 200;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 800;
            Mychart.Height = 850;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }
        public string FindYasKawaA1000Alarm1bits(int mycnt)
        {
            if (mycnt == 0)
                return "Reserved";
            if (mycnt == 1)
                return "Reserved";
            if (mycnt == 2)
                return "Run Command Input Error (EF)";
            if (mycnt == 3)
                return "Drive Baseblock (bb)";
            if (mycnt == 4)
                return "Overtorque Detection 1 (oL3)";
            if (mycnt == 5)
                return "Heatsink Overheat (oH)";
            if (mycnt == 6)
                return "Overvoltage (ov)";
            if (mycnt == 7)
                return "Undervoltage (Uv)";
            if (mycnt == 8)
                return "Cooling Fan Error (FAn)";
            if (mycnt == 9)
                return "MEMOBUS/Modbus Communication Error (CE)";
            if (mycnt == 10)
                return "Option Communication Error (bUS)";
            if (mycnt == 11)
                return "Undertorque Detection 1/2 (UL3/UL4)";
            if (mycnt == 12)
                return "Motor Overheat (oH3)";
            if (mycnt == 13)
                return "PID Feedback Loss (FbL, FbH)";
            if (mycnt == 14)
                return "Reserved";
            if (mycnt == 15)
                return "Serial Communication Transmission Error (CALL)";
            return "Unk";
        }

        public void DrawYasKawaA1000ControlmodeGraphNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "YasKawaA1000Status" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "YasKawaA1000 Status1:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                // tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                string[] Dates = GenerateLovartoStartEndData(6, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindYasKawaA1000Status1bits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 180;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 800;
            Mychart.Height = 850;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }
        public string FindYasKawaA1000Status1bits(int mycnt)
        {
            if (mycnt == 0)
                return "During Run";
            if (mycnt == 1)
                return "During Reverse";
            if (mycnt == 2)
                return "Drive Ready";
            if (mycnt == 3)
                return "Fault";
            if (mycnt == 4)
                return "Data Setting Error";
            if (mycnt == 5)
                return "Multi-Function Contact Output 1";
            if (mycnt == 6)
                return "Multi-Function Contact Output 2";
            if (mycnt == 7)
                return "Multi-Function Contact Output 3";
            if (mycnt == 8)
                return "Reserved";
            if (mycnt == 9)
                return "Reserved";
            if (mycnt == 10)
                return "Reserved";
            if (mycnt == 11)
                return "Reserved";
            if (mycnt == 12)
                return "Reserved";
            if (mycnt == 13)
                return "Reserved";
            if (mycnt == 14)
                return "ComRef status";
            if (mycnt == 15)
                return "ComCtrl status";
            return "Unk";
        }

        public void DrawYasKawaA1000MainsGraphsNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "YasKawaLGA1000" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "YasKawa:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.YasKawaA1000 MyAMF = new LiveMonitoring.IRemoteLib.YasKawaA1000();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[6];
            int Bcnt = 0;
            for (Bcnt = 1; Bcnt <= 5; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 1].Label = MyAMF.YasKawaA1000Table[Bcnt].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    if ((MyDataHistory.Field <= 5) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                    {
                        try
                        {
                            int MyField = MyDataHistory.Field - 1;
                            //field always starts at 1
                            if (MyField > MaxFieldCnt)
                            {
                                MaxFieldCnt = MyField;
                            }
                            int myret = 0;
                            myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                            numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                            numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                            //* MyAMF.GensetTable(MyDataHistory.Field).SettingDivisor


                        }
                        catch (Exception ex)
                        {
                            errorMessage.Visible = true;
                            lblError.Text = "YasKawa err:" + ex.Message;

                            Trace.Write("YasKawa err:" + ex.Message);
                        }
                    }

                }
                catch (Exception ex)
                {
                    errorMessage.Visible = true;
                    lblError.Text = "YasKawa 1 err:" + ex.Message;

                    Trace.Write("YasKawa 1 err:" + ex.Message);
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 800;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawHtmlLine()
        {
            StringBuilder MyHtmlStr = new StringBuilder();
            MyHtmlStr.Append("<br/><hr/><br/>");
        }

        public void DrawElsterA1700CUMULATIVEREGISTERSGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawElsterA1700CUMULATIVEREGISTERSGraphs2(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CUMULATIVEREGISTERSGraphs3(SensorDet, MyData);
                //Reactive Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CUMULATIVEREGISTERSGraphs4(SensorDet, MyData);
                //Apparent Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CUMULATIVEREGISTERSGraphs5(SensorDet, MyData);
                //Apparent Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }

        }

        public void DrawElsterA1700CUMULATIVEREGISTERSGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700Wh" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Wh :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 1; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 1 & MyField <= 2)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CUMULATIVEREGISTERSGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700varh" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster varh :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 3).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 3).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 3).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 3 & MyField <= 6)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 3].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 3].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 3].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 3; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CUMULATIVEREGISTERSGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700VAh" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster VAh :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 4; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 7).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 7).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 7).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //And MyField <= 7 Then 'ignore status
                if (MyField == 7)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 7].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 7].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 7].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 7; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CUMULATIVEREGISTERSGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700Customer_Defined" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Customer_Defined :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 2; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 9).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 9).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 9).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory  MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 9 & MyField <= 11)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 9].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 9].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 9].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 9; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartAreas[0].BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartAreas[0].Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CUMULATIVEREGISTERSGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawElsterA1140CUMULATIVEREGISTERSGraphs2(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CUMULATIVEREGISTERSGraphs3(SensorDet, MyData);
                //Reactive Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CUMULATIVEREGISTERSGraphs4(SensorDet, MyData);
                //Apparent Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CUMULATIVEREGISTERSGraphs5(SensorDet, MyData);
                //Apparent Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }

        }

        public void DrawElsterA1140CUMULATIVEREGISTERSGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140Wh" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Wh :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 1; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 1 & MyField <= 2)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CUMULATIVEREGISTERSGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140varh" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster varh :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 3).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 3).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 3).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 3 & MyField <= 6)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 3].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 3].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 3].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 3; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CUMULATIVEREGISTERSGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140VAh" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster VAh :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 1; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 7).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 7).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 7).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 7 & MyField <= 8)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 7].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 7].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 7].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 7; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CUMULATIVEREGISTERSGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140Customer_Defined" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Customer_Defined :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 1; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 15).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 15).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 15).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 15 & MyField <= 16)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 15].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 15].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 15].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 15; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawElsterA1700CurrentGraphs2(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs3(SensorDet, MyData);
                //Reactive Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs4(SensorDet, MyData);
                //Apparent Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs5(SensorDet, MyData);
                //RMS Current
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs6(SensorDet, MyData);
                //Elster Frequency
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs7(SensorDet, MyData);
                //RMSVoltage
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs8(SensorDet, MyData);
                //PowerFactor
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1700CurrentGraphs1(SensorDet, MyData);
                //angles
                AddPageBreak();

            }
            catch (Exception ex)
            {
                errorMessage.Visible = true;
                lblError.Text = "DrawElsterA1700CurrentGraphs1 err:" + ex.Message;

                Trace.Write("DrawElsterA1700CurrentGraphs1 err:" + ex.Message);
            }


        }
        public void DrawElsterA1700CurrentGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            //usercontrols_SimpleControl(ucSimpleControl )  as usercontrols_SimpleControl
            MeteringPhasorDiagram myDiagram = (MeteringPhasorDiagram)LoadControl("~/MeteringPhasorDiagram.ascx");
            myDiagram.ID = SensorDet.ID.ToString() + "Phasor";
            myDiagram.SensorDetails = SensorDet;
            myDiagram.DataHistory = MyData;
            myDiagram.Visible = true;
            this.Charts.Controls.Add(myDiagram);

            //Dim Mychart As New Infragistics.WebUI.UltraWebChart.UltraChart
            //Mychart.ID = "ElsterA1700" & SensorDet.ID.ToString
            //Mychart.TitleTop.Extent = 45
            //'sets the font color
            //Mychart.TitleTop.FontColor = Color.Red
            //'sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = False
            //'sets the horizontal alignment of the text
            //Mychart.TitleTop.HorizontalAlign = StringAlignment.Center
            //'sets the margins for the Top, Bottom, Left and right
            //Mychart.TitleTop.Margins.Bottom = 2
            //Mychart.TitleTop.Margins.Top = 2
            //Mychart.TitleTop.Margins.Left = 2
            //Mychart.TitleTop.Margins.Right = 2
            //'sets the text to display for the chart in the title
            //Mychart.TitleTop.Text = "Elster Phase Angles:" & SensorDet.Caption
            //'sets the vertical alignment of the title
            //Mychart.TitleTop.VerticalAlign = StringAlignment.Near
            //'show/hide the referenced title
            //Mychart.TitleTop.Visible = True
            //'wrap/don't wrap the text
            //Mychart.TitleTop.WrapText = True
            //' Set composite charts
            //Mychart.ChartType = ChartType.Composite
            //' Create the ChartArea
            //Dim myChartArea As New ChartArea()
            //' Add the Chart Area to the ChartAreas collection
            //Mychart.CompositeChart.ChartAreas.Add(myChartArea)
            //' Create the ChartLayer
            //Dim chartLayer As New ChartLayerAppearance()
            //' Set the ChartType
            //chartLayer.ChartType = ChartType.PolarChart
            //'chartLayer.ChartLayer.c
            //'from sample
            //'Me.oleDbSelectCommand1.CommandText = "SELECT Angle, Company, Strength FROM PolarData"
            //'Me.oleDbSelectCommand1.Connection = Me.oleDbConnection1
            // '' 
            // '' oleDbInsertCommand1
            // '' 
            //'Me.oleDbInsertCommand1.CommandText = "INSERT INTO PolarData(Angle, Company, Strength) VALUES (?, ?, ?)"
            //'Me.oleDbInsertCommand1.Connection = Me.oleDbConnection1
            //'Me.oleDbInsertCommand1.Parameters.Add(New System.Data.OleDb.OleDbParameter("Angle", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, False, CType(10, System.Byte), CType(0, System.Byte), "Angle", System.Data.DataRowVersion.Current, Nothing))
            //'Me.oleDbInsertCommand1.Parameters.Add(New System.Data.OleDb.OleDbParameter("Company", System.Data.OleDb.OleDbType.VarWChar, 50, "Company"))
            //'Me.oleDbInsertCommand1.Parameters.Add(New System.Data.OleDb.OleDbParameter("Strength", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, False, CType(10, System.Byte), CType(0, System.Byte), "Strength", System.Data.DataRowVersion.Current, Nothing))
            // '' 
            // '' oleDbDataAdapter1
            // '' 
            //'Me.oleDbDataAdapter1.InsertCommand = Me.oleDbInsertCommand1
            //'Me.oleDbDataAdapter1.SelectCommand = Me.oleDbSelectCommand1
            //'Me.oleDbDataAdapter1.TableMappings.AddRange(New System.Data.Common.DataTableMapping() {New System.Data.Common.DataTableMapping("Table", "PolarData", New System.Data.Common.DataColumnMapping() {New System.Data.Common.DataColumnMapping("Company", "Company"), New System.Data.Common.DataColumnMapping("Angle", "Angle"), New System.Data.Common.DataColumnMapping("Strength", "Strength")})})
            // '' 
            // '' chartData1
            // '' 
            //'Me.chartData1.DataSetName = "ChartData"
            //'Me.chartData1.Locale = New System.Globalization.CultureInfo("en-US")
            //'Me.chartData1.Namespace = "http://www.tempuri.org/ChartData.xsd"
            //'CType(Me.chartData1, System.ComponentModel.ISupportInitialize).EndInit()



            //' Create an X axis
            //Dim xAxis As New AxisItem()
            //xAxis.axisNumber = AxisNumber.X_Axis
            //xAxis.DataType = AxisDataType.Numeric
            //' xAxis.Labels.ItemFormatString = "<ITEM_LABEL>"
            //'xAxis.Labels.Font = New Font("Tahoma", 7)
            //'xAxis.LineThickness = 1
            //' Create an Y axis
            //Dim yAxis As New AxisItem()
            //yAxis.axisNumber = AxisNumber.Y_Axis
            //yAxis.DataType = AxisDataType.Numeric
            //' yAxis.Labels.ItemFormatString = "<ITEM_LABEL>"
            //'yAxis.Labels.Font = New Font("Tahoma", 7)
            //'yAxis.LineThickness = 1
            //myChartArea.Axes.Add(xAxis)
            //myChartArea.Axes.Add(yAxis)
            //' Set the axes
            //chartLayer.AxisX = xAxis
            //chartLayer.AxisY = yAxis
            //'Mychart.Tooltips.Font.Name = "Arial"
            //'Mychart.Tooltips.Font.Size = 8
            //'Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea
            //'Mychart.Tooltips.Display = TooltipDisplay.MouseMove
            //'Mychart.Tooltips.Format = TooltipStyle.Custom
            //'Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>"


            //' Set the ChartArea
            //chartLayer.ChartArea = myChartArea
            //' Add the ChartLayer to the ChartLayers collection
            //Mychart.CompositeChart.ChartLayers.Add(chartLayer)
            //' Create Series


            //Dim DLseries1 As ISeries = Nothing
            //Dim numericTimeSeries1(10) As XYSeries
            //Dim Bcnt As Integer
            //' Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            //For Bcnt = 0 To 3
            //    numericTimeSeries1[Bcnt] = New XYSeries
            //    'numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //    If SensorDet.Fields.Contains((Bcnt + 27).ToString) = True Then
            //        If CType(SensorDet.Fields((Bcnt + 27).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            numericTimeSeries1[Bcnt] = New XYSeries
            //            numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 27).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //        End If
            //    Else
            //        numericTimeSeries1[Bcnt] = New XYSeries
            //        numericTimeSeries1[Bcnt].Label = "Unknown"
            //    End If
            //Next
            //Dim tmp1cntwe As Integer = 0
            //'mycnt1= fields ?
            //Dim MyDataHistory As LiveMonitoring.IRemoteLib.DataHistory
            //Dim MaxFieldCnt As Integer = 0
            //For Each MyDataHistory In MyData
            //    Dim MyField As Integer = MyDataHistory.Field '- 1 'field always starts at 1
            //    If MyField >= 27 And MyField <= 30 Then '
            //        If MyField > MaxFieldCnt Then
            //            MaxFieldCnt = MyField
            //        End If
            //        Dim myret As Integer
            //        myret = numericTimeSeries1[MyField - 27].Points.Add(New XYDataPoint())
            //        numericTimeSeries1[MyField - 27].Points[myret].ValueX = MyDataHistory.Value 'Angle
            //        numericTimeSeries1[MyField - 27].Points[myret].ValueY = tmp1cntwe 'Value
            //        tmp1cntwe += 1
            //        'numericTimeSeries1[MyField - 24].Points[myret].
            //        'numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value
            //    End If

            //Next
            //Dim Acnt As Integer
            //For Acnt = 0 To MaxFieldCnt - 27
            //    chartLayer.Series.Add(numericTimeSeries1[Acnt])
            //    DLseries1 = numericTimeSeries1[Acnt]
            //    Mychart.Series.Add(DLseries1)
            //Next

            //' Set X axis
            //xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing
            //'xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>"
            //' Set Y axis
            //' yAxis.Labels.ItemFormatString = "<ITEM_LABEL>"
            //' Set the ChartType
            //chartLayer.ChartType = ChartType.PolarChart
            //' Set Axis Type
            //SetAxisTypes(chartLayer)
            //'chartLayer.AxisY.Extent = 130
            //' Add the series to the ChartLayer's Series collection.
            //Mychart.Width = 700
            //Mychart.Height = 600
            //'Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear
            //'Mychart.ColorModel.CustomPalette = ChartColors
            //Me.Charts.Controls.Add(Mychart)


        }

        public void DrawElsterA1700CurrentGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700AP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Active Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 11).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 11).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 11).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 11 & MyField <= 14)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 11].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 11].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 11].Points[myret].NumericValue = MyDataHistory.Value * 100;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 11; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700RP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Reactive Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 15).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 15).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 15).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 15 & MyField <= 18)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 15].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 15].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 15].Points[myret].NumericValue = MyDataHistory.Value * 100;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 15; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700AaP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Apparent Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 19).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 19).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 19).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 18 & MyField <= 21)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 19].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 19].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 19].Points[myret].NumericValue = MyDataHistory.Value * 100;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 19; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700RMS" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster RMS Current :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 2; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 1 & MyField <= 3)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs6(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700Freq" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Frequency :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 2; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 24).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 24).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 24).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
            //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    int MyField = MyDataHistory.Field;
                    //- 1 'field always starts at 1
                    //ignore status
                    if (MyField >= 24 & MyField < 27)
                    {
                        if (MyField > MaxFieldCnt)
                        {
                            MaxFieldCnt = MyField;
                        }
                        int myret = 0;
                        myret = numericTimeSeries1[MyField - 24].Points.Add(new NumericTimeDataPoint());
                        numericTimeSeries1[MyField - 24].Points[myret].TimeValue = MyDataHistory.DT;
                        numericTimeSeries1[MyField - 24].Points[myret].NumericValue = MyDataHistory.Value;
                    }

                }
                catch (Exception ex)
                {
                }


            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 24; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs7(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700RMSVolt" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster RMS Voltage :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 2; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 4).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 4).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 4).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 4 & MyField <= 6)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 4].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 4].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 4].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 4; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1700CurrentGraphs8(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1700PowerFactor" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Power Factor :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 7).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 7).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 7).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 7 & MyField <= 10)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 7].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 7].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 7].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 7; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawElsterA1140CurrentGraphs2(SensorDet, MyData);
                //Active Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs3(SensorDet, MyData);
                //Reactive Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs4(SensorDet, MyData);
                //Apparent Power
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs5(SensorDet, MyData);
                //RMS Current
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs6(SensorDet, MyData);
                //Elster Frequency
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs7(SensorDet, MyData);
                //RMSVoltage
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs8(SensorDet, MyData);
                //PowerFactor
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawElsterA1140CurrentGraphs1(SensorDet, MyData);
                //angles
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }


        }
        public void DrawElsterA1140CurrentGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            MeteringPhasorDiagram myDiagram = new MeteringPhasorDiagram();
            myDiagram.SensorDetails = SensorDet;
            myDiagram.DataHistory = MyData;

            this.Charts.Controls.Add(myDiagram);

            //Dim Mychart As New Infragistics.WebUI.UltraWebChart.UltraChart
            //Mychart.ID = "ElsterA1140" & SensorDet.ID.ToString
            //Mychart.TitleTop.Extent = 45
            //'sets the font color
            //Mychart.TitleTop.FontColor = Color.Red
            //'sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = False
            //'sets the horizontal alignment of the text
            //Mychart.TitleTop.HorizontalAlign = StringAlignment.Center
            //'sets the margins for the Top, Bottom, Left and right
            //Mychart.TitleTop.Margins.Bottom = 2
            //Mychart.TitleTop.Margins.Top = 2
            //Mychart.TitleTop.Margins.Left = 2
            //Mychart.TitleTop.Margins.Right = 2
            //'sets the text to display for the chart in the title
            //Mychart.TitleTop.Text = "Elster Phase Angles:" & SensorDet.Caption
            //'sets the vertical alignment of the title
            //Mychart.TitleTop.VerticalAlign = StringAlignment.Near
            //'show/hide the referenced title
            //Mychart.TitleTop.Visible = True
            //'wrap/don't wrap the text
            //Mychart.TitleTop.WrapText = True
            //' Set composite charts
            //Mychart.ChartType = ChartType.Composite
            //' Create the ChartArea
            //Dim myChartArea As New ChartArea()
            //' Add the Chart Area to the ChartAreas collection
            //Mychart.CompositeChart.ChartAreas.Add(myChartArea)
            //' Create the ChartLayer
            //Dim chartLayer As New ChartLayerAppearance()
            //' Set the ChartType
            //chartLayer.ChartType = ChartType.PolarChart
            //'chartLayer.ChartLayer.c
            //'from sample
            //'Me.oleDbSelectCommand1.CommandText = "SELECT Angle, Company, Strength FROM PolarData"
            //'Me.oleDbSelectCommand1.Connection = Me.oleDbConnection1
            // '' 
            // '' oleDbInsertCommand1
            // '' 
            //'Me.oleDbInsertCommand1.CommandText = "INSERT INTO PolarData(Angle, Company, Strength) VALUES (?, ?, ?)"
            //'Me.oleDbInsertCommand1.Connection = Me.oleDbConnection1
            //'Me.oleDbInsertCommand1.Parameters.Add(New System.Data.OleDb.OleDbParameter("Angle", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, False, CType(10, System.Byte), CType(0, System.Byte), "Angle", System.Data.DataRowVersion.Current, Nothing))
            //'Me.oleDbInsertCommand1.Parameters.Add(New System.Data.OleDb.OleDbParameter("Company", System.Data.OleDb.OleDbType.VarWChar, 50, "Company"))
            //'Me.oleDbInsertCommand1.Parameters.Add(New System.Data.OleDb.OleDbParameter("Strength", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, False, CType(10, System.Byte), CType(0, System.Byte), "Strength", System.Data.DataRowVersion.Current, Nothing))
            // '' 
            // '' oleDbDataAdapter1
            // '' 
            //'Me.oleDbDataAdapter1.InsertCommand = Me.oleDbInsertCommand1
            //'Me.oleDbDataAdapter1.SelectCommand = Me.oleDbSelectCommand1
            //'Me.oleDbDataAdapter1.TableMappings.AddRange(New System.Data.Common.DataTableMapping() {New System.Data.Common.DataTableMapping("Table", "PolarData", New System.Data.Common.DataColumnMapping() {New System.Data.Common.DataColumnMapping("Company", "Company"), New System.Data.Common.DataColumnMapping("Angle", "Angle"), New System.Data.Common.DataColumnMapping("Strength", "Strength")})})
            // '' 
            // '' chartData1
            // '' 
            //'Me.chartData1.DataSetName = "ChartData"
            //'Me.chartData1.Locale = New System.Globalization.CultureInfo("en-US")
            //'Me.chartData1.Namespace = "http://www.tempuri.org/ChartData.xsd"
            //'CType(Me.chartData1, System.ComponentModel.ISupportInitialize).EndInit()



            //' Create an X axis
            //Dim xAxis As New AxisItem()
            //xAxis.axisNumber = AxisNumber.X_Axis
            //xAxis.DataType = AxisDataType.Numeric
            //' xAxis.Labels.ItemFormatString = "<ITEM_LABEL>"
            //'xAxis.Labels.Font = New Font("Tahoma", 7)
            //'xAxis.LineThickness = 1
            //' Create an Y axis
            //Dim yAxis As New AxisItem()
            //yAxis.axisNumber = AxisNumber.Y_Axis
            //yAxis.DataType = AxisDataType.Numeric
            //' yAxis.Labels.ItemFormatString = "<ITEM_LABEL>"
            //'yAxis.Labels.Font = New Font("Tahoma", 7)
            //'yAxis.LineThickness = 1
            //myChartArea.Axes.Add(xAxis)
            //myChartArea.Axes.Add(yAxis)
            //' Set the axes
            //chartLayer.AxisX = xAxis
            //chartLayer.AxisY = yAxis
            //'Mychart.Tooltips.Font.Name = "Arial"
            //'Mychart.Tooltips.Font.Size = 8
            //'Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea
            //'Mychart.Tooltips.Display = TooltipDisplay.MouseMove
            //'Mychart.Tooltips.Format = TooltipStyle.Custom
            //'Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>"


            //' Set the ChartArea
            //chartLayer.ChartArea = myChartArea
            //' Add the ChartLayer to the ChartLayers collection
            //Mychart.CompositeChart.ChartLayers.Add(chartLayer)
            //' Create Series


            //Dim DLseries1 As ISeries = Nothing
            //Dim numericTimeSeries1(10) As XYSeries
            //Dim Bcnt As Integer
            //' Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            //For Bcnt = 0 To 2
            //    numericTimeSeries1[Bcnt] = New XYSeries
            //    'numericTimeSeries1[Bcnt] = New NumericTimeSeries
            //    If SensorDet.Fields.Contains((Bcnt + 24).ToString) = True Then
            //        If CType(SensorDet.Fields((Bcnt + 24).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            numericTimeSeries1[Bcnt] = New XYSeries
            //            numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 24).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //        End If
            //    Else
            //        numericTimeSeries1[Bcnt] = New XYSeries
            //        numericTimeSeries1[Bcnt].Label = "Unknown"
            //    End If
            //Next
            //Dim tmp1cntwe As Integer = 0
            //'mycnt1= fields ?
            //Dim MyDataHistory As LiveMonitoring.IRemoteLib.DataHistory
            //Dim MaxFieldCnt As Integer = 0
            //For Each MyDataHistory In MyData
            //    Dim MyField As Integer = MyDataHistory.Field '- 1 'field always starts at 1
            //    If MyField >= 24 And MyField <= 26 Then '
            //        If MyField > MaxFieldCnt Then
            //            MaxFieldCnt = MyField
            //        End If
            //        Dim myret As Integer
            //        myret = numericTimeSeries1[MyField - 24].Points.Add(New XYDataPoint())
            //        numericTimeSeries1[MyField - 24].Points[myret].ValueX = MyDataHistory.Value 'Angle
            //        numericTimeSeries1[MyField - 24].Points[myret].ValueY = tmp1cntwe 'Value
            //        tmp1cntwe += 1
            //        'numericTimeSeries1[MyField - 24].Points[myret].
            //        'numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value
            //    End If

            //Next
            //Dim Acnt As Integer
            //For Acnt = 0 To MaxFieldCnt - 24
            //    chartLayer.Series.Add(numericTimeSeries1[Acnt])
            //    DLseries1 = numericTimeSeries1[Acnt]
            //    Mychart.Series.Add(DLseries1)
            //Next

            //' Set X axis
            //xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing
            //'xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>"
            //' Set Y axis
            //' yAxis.Labels.ItemFormatString = "<ITEM_LABEL>"
            //' Set the ChartType
            //chartLayer.ChartType = ChartType.PolarChart
            //' Set Axis Type
            //SetAxisTypes(chartLayer)
            //'chartLayer.AxisY.Extent = 130
            //' Add the series to the ChartLayer's Series collection.
            //Mychart.Width = 700
            //Mychart.Height = 600
            //'Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear
            //'Mychart.ColorModel.CustomPalette = ChartColors
            //Me.Charts.Controls.Add(Mychart)


        }

        public void DrawElsterA1140CurrentGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140AP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Active Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField <= 4)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value / 1000;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140RP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Reactive Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[6];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 4; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 5).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 5).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 5).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField > 4 & MyField <= 8)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 4].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 4].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 4].Points[myret].NumericValue = MyDataHistory.Value / 1000;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 5; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140AaP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Apparent Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 9).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 9).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 9).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField > 7 & MyField <= 11)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 8].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 8].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 8].Points[myret].NumericValue = MyDataHistory.Value / 1000;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 8; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140RMS" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster RMS Current :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 12).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 12).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 12).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField > 11 & MyField <= 14)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 11].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 11].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 11].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 12; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs6(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140Freq" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Frequency :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 4; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 16).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 16).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 16).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //And MyField <= 14 Then 'ignore status
                if (MyField == 16)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 16].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 16].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 16].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 16; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs7(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140RMSVolt" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster RMS Voltage :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 2; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 17).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 17).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 17).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField > 16 & MyField <= 19)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 17].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 17].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 17].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 17; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawElsterA1140CurrentGraphs8(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "ElsterA1140PowerFactor" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Elster Power Factor :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[5];
            int Bcnt = 0;
            //  Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 20).ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 20).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 20).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField > 19 & MyField <= 23)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 20].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 20].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 20].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 20; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawSimpleLineGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart SensorChart = default(Infragistics.WebUI.UltraWebChart.UltraChart);

            //roger Newline
            SensorChart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            SensorChart.ChartDrawItem += ultraChart1_ChartDrawItem;
            SensorChart.ID = "Sensor" + SensorDet.ID.ToString();
            //The following appleis to all titles, titletop is simply used for the example
            //sets the height or width of space for the title
            SensorChart.TitleTop.Extent = 45;
            //sets the font color
            SensorChart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            SensorChart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            SensorChart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            SensorChart.TitleTop.Margins.Bottom = 2;
            SensorChart.TitleTop.Margins.Top = 2;
            SensorChart.TitleTop.Margins.Left = 2;
            SensorChart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            SensorChart.TitleTop.Text = "Sensor:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            SensorChart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            SensorChart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            SensorChart.TitleTop.WrapText = true;
            // Set composite charts
            SensorChart.ChartType = ChartType.Composite;
            //SensorChart.Tooltips.Format = TooltipStyle.Custom
            //SensorChart.Tooltips.Display = TooltipDisplay.MouseMove
            //SensorChart.Tooltips.FormatString = "My Data: <DATA_VALUE:$#0.00>"

            // Create the ChartArea
            ChartArea CTmyDLChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            SensorChart.CompositeChart.ChartAreas.Add(CTmyDLChartArea);
            // Create the ChartLayerSensorChart

            // Create the ChartLayer
            ChartLayerAppearance CTDLchartLayer = new ChartLayerAppearance();
            // Set the ChartType depending on sensor type
            CTDLchartLayer.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem CTDLxAxis = new AxisItem();
            CTDLxAxis.axisNumber = AxisNumber.X_Axis;
            CTDLxAxis.DataType = AxisDataType.Time;
            CTDLxAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            CTDLxAxis.Labels.Font = new Font("Tahoma", 7);
            CTDLxAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem CTDLyAxis = new AxisItem();
            CTDLyAxis.axisNumber = AxisNumber.Y_Axis;
            CTDLyAxis.DataType = AxisDataType.Numeric;
            CTDLyAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            CTDLyAxis.Labels.Font = new Font("Tahoma", 7);
            CTDLyAxis.LineThickness = 1;
            CTmyDLChartArea.Axes.Add(CTDLxAxis);
            CTmyDLChartArea.Axes.Add(CTDLyAxis);
            // Set the axes
            CTDLchartLayer.AxisX = CTDLxAxis;
            CTDLchartLayer.AxisY = CTDLyAxis;
            // Set the ChartArea
            CTDLchartLayer.ChartArea = CTmyDLChartArea;
            // Add the ChartLayer to the ChartLayers collection
            SensorChart.CompositeChart.ChartLayers.Add(CTDLchartLayer);
            // Create Series
            ISeries ctDLseries = null;
            NumericTimeSeries[] ctnumericTimeSeries = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 14; Bcnt++)
            {
                ctnumericTimeSeries[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    ctnumericTimeSeries[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    ctnumericTimeSeries[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyField > MaxFieldCnt)
                {
                    MaxFieldCnt = MyField;
                }
                int myret = 0;
                myret = ctnumericTimeSeries[MyField].Points.Add(new NumericTimeDataPoint());
                ctnumericTimeSeries[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                ctnumericTimeSeries[MyField].Points[myret].NumericValue = MyDataHistory.Value;
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                CTDLchartLayer.Series.Add(ctnumericTimeSeries[Acnt]);
                ctDLseries = ctnumericTimeSeries[Acnt];
                SensorChart.Series.Add(ctDLseries);
            }
            // Set X axis
            CTDLxAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            CTDLxAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            CTDLchartLayer.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(CTDLchartLayer);
            CTDLchartLayer.AxisX.DataType = AxisDataType.Time;
            CTDLchartLayer.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            CTDLchartLayer.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            SensorChart.Width = 700;
            SensorChart.Height = 500;

            CompositeLegend legend = new CompositeLegend();
            legend.LabelStyle.Font = new Font("Times New Roman", 10);
            SensorChart.CompositeChart.Legends.Add(legend);
            legend.ChartLayers.Add(SensorChart.CompositeChart.ChartLayers[0]);
            legend.BoundsMeasureType = MeasureType.Percentage;
            legend.Bounds = new Rectangle(30, 5, 56, 14);
            SensorChart.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            SensorChart.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            SensorChart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Color[] ChartColors4 = null;
            ChartColors4 = new Color[] {
                Color.Orange,
                Color.Yellow,
                Color.Blue,
                Color.Green,
                Color.Red,
                Color.Black,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue
            };
            SensorChart.ColorModel.CustomPalette = ChartColors4;
            this.Charts.Controls.Add(SensorChart);
        }
        public void DrawWMIGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart SensorChart = default(Infragistics.WebUI.UltraWebChart.UltraChart);

            //roger Newline
            SensorChart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            SensorChart.ChartDrawItem += ultraChart1_ChartDrawItem;
            SensorChart.ID = "Sensor" + SensorDet.ID.ToString();
            //The following appleis to all titles, titletop is simply used for the example
            //sets the height or width of space for the title
            SensorChart.TitleTop.Extent = 45;
            //sets the font color
            SensorChart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            SensorChart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            SensorChart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            SensorChart.TitleTop.Margins.Bottom = 2;
            SensorChart.TitleTop.Margins.Top = 2;
            SensorChart.TitleTop.Margins.Left = 2;
            SensorChart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            SensorChart.TitleTop.Text = "Sensor:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            SensorChart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            SensorChart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            SensorChart.TitleTop.WrapText = true;
            // Set composite charts
            SensorChart.ChartType = ChartType.Composite;
            //SensorChart.Tooltips.Format = TooltipStyle.Custom
            //SensorChart.Tooltips.Display = TooltipDisplay.MouseMove
            //SensorChart.Tooltips.FormatString = "My Data: <DATA_VALUE:$#0.00>"

            // Create the ChartArea
            ChartArea CTmyDLChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            SensorChart.CompositeChart.ChartAreas.Add(CTmyDLChartArea);
            // Create the ChartLayerSensorChart

            // Create the ChartLayer
            ChartLayerAppearance CTDLchartLayer = new ChartLayerAppearance();
            // Set the ChartType depending on sensor type
            CTDLchartLayer.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem CTDLxAxis = new AxisItem();
            CTDLxAxis.axisNumber = AxisNumber.X_Axis;
            CTDLxAxis.DataType = AxisDataType.Time;
            CTDLxAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            CTDLxAxis.Labels.Font = new Font("Tahoma", 7);
            CTDLxAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem CTDLyAxis = new AxisItem();
            CTDLyAxis.axisNumber = AxisNumber.Y_Axis;
            CTDLyAxis.DataType = AxisDataType.Numeric;
            CTDLyAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            CTDLyAxis.Labels.Font = new Font("Tahoma", 7);
            CTDLyAxis.LineThickness = 1;
            CTmyDLChartArea.Axes.Add(CTDLxAxis);
            CTmyDLChartArea.Axes.Add(CTDLyAxis);
            // Set the axes
            CTDLchartLayer.AxisX = CTDLxAxis;
            CTDLchartLayer.AxisY = CTDLyAxis;
            // Set the ChartArea
            CTDLchartLayer.ChartArea = CTmyDLChartArea;
            // Add the ChartLayer to the ChartLayers collection
            SensorChart.CompositeChart.ChartLayers.Add(CTDLchartLayer);
            // Create Series
            ISeries ctDLseries = null;
            NumericTimeSeries[] ctnumericTimeSeries = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 14; Bcnt++)
            {
                ctnumericTimeSeries[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    ctnumericTimeSeries[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    ctnumericTimeSeries[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyField > MaxFieldCnt)
                {
                    MaxFieldCnt = MyField;
                }
                int myret = 0;
                myret = ctnumericTimeSeries[MyField].Points.Add(new NumericTimeDataPoint());
                ctnumericTimeSeries[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                ctnumericTimeSeries[MyField].Points[myret].NumericValue = MyDataHistory.Value;
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                CTDLchartLayer.Series.Add(ctnumericTimeSeries[Acnt]);
                ctDLseries = ctnumericTimeSeries[Acnt];
                SensorChart.Series.Add(ctDLseries);
            }
            // Set X axis
            CTDLxAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            CTDLxAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            CTDLchartLayer.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(CTDLchartLayer);
            CTDLchartLayer.AxisX.DataType = AxisDataType.Time;
            CTDLchartLayer.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            CTDLchartLayer.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            SensorChart.Width = 700;
            SensorChart.Height = 500;

            CompositeLegend legend = new CompositeLegend();
            legend.LabelStyle.Font = new Font("Times New Roman", 10);
            SensorChart.CompositeChart.Legends.Add(legend);
            legend.ChartLayers.Add(SensorChart.CompositeChart.ChartLayers[0]);
            legend.BoundsMeasureType = MeasureType.Percentage;
            legend.Bounds = new Rectangle(30, 5, 56, 14);
            SensorChart.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            SensorChart.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            SensorChart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Color[] ChartColors4 = null;
            ChartColors4 = new Color[] {
                Color.Orange,
                Color.Yellow,
                Color.Blue,
                Color.Green,
                Color.Red,
                Color.Black,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue
            };
            SensorChart.ColorModel.CustomPalette = ChartColors4;
            this.Charts.Controls.Add(SensorChart);
        }
        public void DrawServerLogGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            StringBuilder MyHtmlStr = new StringBuilder();
            MyHtmlStr.Append("<table border=1><tr><td>");
            MyHtmlStr.Append("Server Log:" + SensorDet.Caption);
            MyHtmlStr.Append("</td></tr></table>");

            MyHtmlStr.Append("<table border=1><tr><td>");

           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            int OldField = -1;
            if (SensorDet.Fields.Count > 0)
            {
                MyHtmlStr.Append(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(1).ToString()]).FieldName + "</td>");
            }
            else
            {
                MyHtmlStr.Append("Log Field</td>");
            }
            MyHtmlStr.Append("</td><td></td><td></td></tr>");
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                //If MyDataHistory.Field > 2 And MyDataHistory.Field <= 8 Then
                int MyField = MyDataHistory.Field;
                //- 3 'field always starts at 1
                MyHtmlStr.Append("<tr>");
                MyHtmlStr.Append("<td>Date:" + MyDataHistory.DT.ToString() + "</td>");
                MyHtmlStr.Append("<td>Val:" + MyDataHistory.Value.ToString() + "</td>");
                MyHtmlStr.Append("<td>Data:" + MyDataHistory.OtherData + "</td>");
                MyHtmlStr.Append("</tr>");
                //End If
            }
            MyHtmlStr.Append("</table>");
            this.Graph.InnerHtml += MyHtmlStr.ToString();
        }
        public string[] GenerateAMFMK4StartEndData(int FieldNum, int Bit2Check, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == FieldNum)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << Bit2Check;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) >= 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true | FirstSwitch)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            FirstSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public string FindAMFMk4SummaryRegisterbits(int mycnt)
        {
            if (mycnt == 0)
                return "Genset controller Mode is OFF";
            if (mycnt == 1)
                return "Genset controller Mode is AUTO";
            if (mycnt == 2)
                return "Genset controller Mode is MANUAL";
            if (mycnt == 3)
                return "Genset controller Mode is MANUAL START";
            if (mycnt == 4)
                return "Genset controller Mode is MANUAL STOP";
            if (mycnt == 5)
                return "Genset controller Mode is TEST";
            if (mycnt == 6)
                return "Mains is OK";
            if (mycnt == 7)
                return "Mains is ON load";
            if (mycnt == 8)
                return "Mains Circuit Breaker is OFF";
            if (mycnt == 9)
                return "Genset is OK";
            if (mycnt == 10)
                return "Genset is ON load";
            if (mycnt == 11)
                return "Start Inhibit Alarm";
            if (mycnt == 12)
                return "Start Fail";
            //13
            if (mycnt == 13)
                return "Emergency Stop is active";
            if (mycnt == 14)
                return "Warning Alarm";
            if (mycnt == 15)
                return "Shutdown Alarm";
            return "Unk";
        }
        public string FindAMFMk4MainsRegisterbits(int mycnt)
        {
            if (mycnt == 0)
                return "Mains phase rotation fault";
            if (mycnt == 1)
                return "Reserved";
            if (mycnt == 2)
                return "Mains phase 1 low voltage";
            if (mycnt == 3)
                return "Mains phase 2 low voltage";
            if (mycnt == 4)
                return "Mains phase 3 low voltage";
            if (mycnt == 5)
                return "Mains phase 1 high voltage";
            if (mycnt == 6)
                return "Mains phase 2 high voltage";
            if (mycnt == 7)
                return "Mains phase 3 high voltage";
            if (mycnt == 8)
                return "Reserved";
            if (mycnt == 9)
                return "Reserved";
            if (mycnt == 10)
                return "Reserved";
            if (mycnt == 11)
                return "Reserved";
            if (mycnt == 12)
                return "Reserved";
            //13
            if (mycnt == 13)
                return "Reserved";
            if (mycnt == 14)
                return "Reserved";
            if (mycnt == 15)
                return "Reserved";
            return "Unk";
        }
        public string FindAMFMk4WarningAlarmbits(int mycnt)
        {
            if (mycnt == 0)
                return "Low battery volts during cranking";
            if (mycnt == 1)
                return "Low battery volts";
            if (mycnt == 2)
                return "High battery volts";
            if (mycnt == 3)
                return "Charging alternator fault";
            if (mycnt == 4)
                return "Low fuel";
            if (mycnt == 5)
                return "Low bulk fuel";
            if (mycnt == 6)
                return "Oil pressure is low";
            if (mycnt == 7)
                return "Engine temperature is high";
            if (mycnt == 8)
                return "Mains Circuit Breaker is OFF";
            if (mycnt == 9)
                return "kW is high";
            if (mycnt == 10)
                return "Reserved";
            if (mycnt == 11)
                return "Canbus Amber lamp";
            if (mycnt == 12)
                return "Reserved";
            //13
            if (mycnt == 13)
                return "Reserved";
            if (mycnt == 14)
                return "Reserved";
            if (mycnt == 15)
                return "Reserved";
            return "Unk";
        }
        public string FindAMFMk4WarningCanbusSPN(int mycnt)
        {
            if (mycnt == 45)
                return "Pre-heat relay";
            if (mycnt == 94)
                return "Fuel pressure/ Fuel pressure sensor";
            if (mycnt == 97)
                return "Water in fuel/ Water in fuel sensor";
            if (mycnt == 98)
                return "Oil level/ Oil level sensor";
            if (mycnt == 100)
                return "Oil pressure/ Oil pressure sensor";
            if (mycnt == 102)
                return "Boost pressure/ Boost pressure sensor";
            if (mycnt == 105)
                return "Charge air temperature/ Charge air temperature sensor";
            if (mycnt == 106)
                return "Boost pressure/ Boost pressure sensor";
            if (mycnt == 110)
                return "Coolant temperature/ Coolant temperature sensor";
            if (mycnt == 111)
                return "Coolant level/ Coolant level sensor";
            if (mycnt == 153)
                return "Crankcase ventilation pressure/ Crankcase ventilation pressure sensor";
            if (mycnt == 175)
                return "Oil temperature/ Oil temperature sensor";
            if (mycnt == 190)
                return "Engine RPM";
            //13
            return "Unk";
        }
        public string FindAMFMk4WarningCanbusFMI(int mycnt)
        {
            if (mycnt == 0)
                return "Data valid but ABOVE normal operational range";
            if (mycnt == 1)
                return "Data valid but BELOW normal operational range";
            if (mycnt == 2)
                return "Data erratic, intermittent or incorrect";
            if (mycnt == 3)
                return "Voltage above normal or shorted to high source";
            if (mycnt == 4)
                return "Voltage below normal or shorted to low source";
            if (mycnt == 5)
                return "Current below normal or open circuit";
            if (mycnt == 6)
                return "Current above normal or grounded circuit";
            if (mycnt == 7)
                return "Mechanical system not responding or out of adjustment";
            if (mycnt == 8)
                return "Abnormal frequency or pulse width or period";
            if (mycnt == 9)
                return "Abnormal update rate";
            if (mycnt == 10)
                return "Abnormal rate of change";
            if (mycnt == 11)
                return "Root cause not known";
            if (mycnt == 12)
                return "Bad intelligent device or component";
            //13
            if (mycnt == 13)
                return "Out of calibration";
            if (mycnt == 14)
                return "Special instructions";
            if (mycnt == 15)
                return "Data valid but ABOVE normal operational range";
            if (mycnt == 16)
                return "Data valid but ABOVE normal operational range";
            if (mycnt == 17)
                return "Data valid but BELOW normal operational range";
            if (mycnt == 18)
                return "Data valid but BELOW normal operational range";
            if (mycnt == 19)
                return "Received network data";
            if (mycnt == 20)
                return "Data drifted high";
            if (mycnt == 21)
                return "Data drifted low";
            return "Unk";
        }
        public string FindAMFMk4StartInhibitAlarm(int mycnt)
        {
            if (mycnt == 0)
                return "Emergency Stop is engaged";
            if (mycnt == 1)
                return "Oil pressure sensor fault";
            if (mycnt == 2)
                return "Engine temperature sensor fault";
            if (mycnt == 3)
                return "Charging alternator fault";
            if (mycnt == 4)
                return "No fuel";
            if (mycnt == 5)
                return "Low bulk fuel";
            if (mycnt == 6)
                return "Low water level";
            if (mycnt == 7)
                return "Low water level";
            if (mycnt == 8)
                return "Mains Circuit Breaker is OFF";
            if (mycnt == 9)
                return "Remote Stop";
            if (mycnt == 10)
                return "Reserved";
            if (mycnt == 11)
                return "Reserved";
            if (mycnt == 12)
                return "Reserved";
            //13
            if (mycnt == 13)
                return "Reserved";
            if (mycnt == 14)
                return "Reserved";
            if (mycnt == 15)
                return "Reserved";
            return "Unk";
        }
        public string FindAMFMk4ShutdownAlarm(int mycnt)
        {
            if (mycnt == 0)
                return "Emergency Stop is engaged";
            if (mycnt == 1)
                return "Start Fail";
            if (mycnt == 2)
                return "Low oil pressure";
            if (mycnt == 3)
                return "High engine temperature";
            if (mycnt == 4)
                return "No fuel";
            if (mycnt == 5)
                return "Low water level";
            if (mycnt == 6)
                return "Reserved";
            if (mycnt == 7)
                return "Remote Stop";
            if (mycnt == 8)
                return "Under-speed";
            if (mycnt == 9)
                return "Over-speed";
            if (mycnt == 10)
                return "Low Alternator volts";
            if (mycnt == 11)
                return "High Alternator volts";
            if (mycnt == 12)
                return "Phase rotation fault";
            //13
            if (mycnt == 13)
                return "Reserved";
            if (mycnt == 14)
                return "Reserved";
            if (mycnt == 15)
                return "Canbus shutdown";
            return "Unk";
        }
        public void DrawAMFMk4Graphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawAMFSummaryGraph(SensorDet, MyData);
            DrawAMFMainsStatusGraph(SensorDet, MyData);
            DrawAMFWarningAlarmGraph(SensorDet, MyData);
            //DrawAMFWarningCanbusSPNGraph(SensorDet, MyData)
            DrawAMFWarningCanbusFMIGraph(SensorDet, MyData);
            DrawAMFMainsGraphs(SensorDet, MyData);
            DrawAMFAlternatorVolts(SensorDet, MyData);
            DrawAMFAlternatorAmps(SensorDet, MyData);
            DrawAMFWaterOilBatteryFuelTemp(SensorDet, MyData);
        }

        public void DrawAMFWaterOilBatteryFuelTemp(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "AMFAlternatorWaterOilBatteryFuelTemp" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "AMF WaterOilBatteryFuelTemp:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.AMFMK4Genset MyAMF = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 4; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                switch (Bcnt)
                {
                    case 0:
                        if (SensorDet.Fields.Contains((16).ToString()) == true)
                        {
                            numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(16).ToString()]).FieldName;
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[16].SettingName;
                        }
                        break;
                    case 1:
                        if (SensorDet.Fields.Contains((17).ToString()) == true)
                        {
                            numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(17).ToString()]).FieldName;
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[17].SettingName;
                        }
                        break;
                    case 2:
                        if (SensorDet.Fields.Contains((18).ToString()) == true)
                        {
                            numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(18).ToString()]).FieldName;
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[18].SettingName;
                        }
                        break;
                    case 3:
                        if (SensorDet.Fields.Contains((35).ToString()) == true)
                        {
                            numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(35).ToString()]).FieldName;
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[35].SettingName;
                        }
                        break;
                    case 4:
                        if (SensorDet.Fields.Contains((36).ToString()) == true)
                        {
                            numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(36).ToString()]).FieldName;
                        }
                        else
                        {
                            numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[36].SettingName;
                        }
                        break;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 15 & MyDataHistory.Field <= 18))
                {
                    int MyField = MyDataHistory.Field - 16;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
                if ((MyDataHistory.Field > 34 & MyDataHistory.Field <= 36))
                {
                    int MyField = MyDataHistory.Field - 32;
                    //already have 2 ABove
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawAMFAlternatorAmps(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "AMFAlternatorAmps" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "AMF Alternator Amps:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.AMFMK4Genset MyAMF = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 7; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 27).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 27).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[Bcnt + 27].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if (MyDataHistory.Field > 26 & MyDataHistory.Field <= 34)
                {
                    int MyField = MyDataHistory.Field - 27;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawAMFAlternatorVolts(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "AMFAlternator" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "AMF Alternator:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.AMFMK4Genset MyAMF = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 7; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 19).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 19).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[Bcnt + 19].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if (MyDataHistory.Field > 18 & MyDataHistory.Field <= 25)
                {
                    int MyField = MyDataHistory.Field - 19;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawAMFMainsGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "AMFMains" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "AMF Mains:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.AMFMK4Genset MyAMF = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 6; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 10).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 10).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = MyAMF.GensetTable[Bcnt + 10].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if (MyDataHistory.Field > 9 & MyDataHistory.Field <= 15)
                {
                    int MyField = MyDataHistory.Field - 10;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawAMFWarningCanbusFMIGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "AMFWarningCanbusFMI" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "AMF Warning Canbus FMI:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.AMFMK4Genset Newamf = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 21; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateAMFMK4StartEndData(5, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindAMFMk4WarningCanbusFMI(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawAMFWarningAlarmGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "AMFWarningAlarm" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "AMF Warning Alarm:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.AMFMK4Genset Newamf = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 11; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateAMFMK4StartEndData(3, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindAMFMk4WarningAlarmbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawAMFSummaryGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "AMFStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "AMF Summary:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.AMFMK4Genset Newamf = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateAMFMK4StartEndData(0, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindAMFMk4SummaryRegisterbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawAMFMainsStatusGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "AMFMainsStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "AMF Mains:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.AMFMK4Genset Newamf = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 7; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateAMFMK4StartEndData(1, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindAMFMk4MainsRegisterbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }
        public string FindDeepSeaControlModebits(int mycnt)
        {
            if (mycnt == 0)
                return "Stop mode";
            if (mycnt == 1)
                return "Auto mode";
            if (mycnt == 2)
                return "Manual mode";
            if (mycnt == 3)
                return "Test on load mode";
            if (mycnt == 4)
                return "Auto with manual restore mode";
            if (mycnt == 5)
                return "User configuration mode";
            return "Unk";
        }
        public string FindDeepSeaStatusRegisterbits(int mycnt)
        {
            if (mycnt == 0)
                return "Unimplemented";
            if (mycnt == 1)
                return "Unimplemented";
            if (mycnt == 2)
                return "Unimplemented";
            if (mycnt == 3)
                return "Unimplemented";
            if (mycnt == 4)
                return "Unimplemented";
            if (mycnt == 5)
                return "Unimplemented";
            if (mycnt == 6)
                return "Unimplemented";
            if (mycnt == 7)
                return "No font file";
            if (mycnt == 8)
                return "Satellite telemetry alarm flag";
            if (mycnt == 9)
                return "Telemetry alarm flag";
            if (mycnt == 10)
                return "Warning alarm active";
            if (mycnt == 11)
                return "Electrical trip alarm active";
            if (mycnt == 12)
                return "Shutdown alarm active";
            //13
            if (mycnt == 13)
                return "Control unit failure";
            if (mycnt == 14)
                return "Unimplemented";
            if (mycnt == 15)
                return "Control unit not configured";
            return "Unk";
        }
        public string FindDeepSeaAlarmConditionbits(int mycnt)
        {
            if (mycnt == 0)
                return "Disabled digital input";
            if (mycnt == 1)
                return "Not active alarm";
            if (mycnt == 2)
                return "Warning alarm";
            if (mycnt == 3)
                return "Shutdown alarm";
            if (mycnt == 4)
                return "Electrical trip alarm";
            if (mycnt == 5)
                return "Reserved";
            if (mycnt == 6)
                return "Reserved";
            if (mycnt == 7)
                return "Reserved";
            if (mycnt == 8)
                return "Inactive indication (no string)";
            if (mycnt == 9)
                return "Inactive indication (displayed string)";
            if (mycnt == 10)
                return "Active indication";
            if (mycnt == 11)
                return "Reserved";
            if (mycnt == 12)
                return "Reserved";
            //13
            if (mycnt == 13)
                return "Reserved";
            if (mycnt == 14)
                return "Reserved";
            if (mycnt == 15)
                return "Unimplemented alarm";
            return "Unk";
        }
        public string[] GenerateDeepSeaStartEndData(int FieldNum, int Bit2Check, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == FieldNum)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << Bit2Check;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) >= 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true | FirstSwitch)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            FirstSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public string[] GenerateDeepseaControlStartEndData(int FieldNum, int ValueToCheck, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == FieldNum)
                {
                    long Pattern = 1;
                    //this =val display
                    if (MyDataHistory.Value == ValueToCheck)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true | FirstSwitch)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            FirstSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public void DrawDeepSeaGensetGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            //DrawDeepSeaSummaryGraph(SensorDet, MyData)
            try
            {
                DrawDeepSeaControlmodeGraph(SensorDet, MyData);
                //AddPageBreak()

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaWarningAlarmGraph(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaMainsGraphs(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaMainsAmps(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaAlternatorVolts(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaAlternatorAmps(SensorDet, MyData);
                //AddPageBreak()

            }
            catch (Exception ex)
            {
            }
            try
            {
                //DrawDeepSeaWaterOilBatteryFuelTemp(SensorDet, MyData)

            }
            catch (Exception ex)
            {
            }
            //DrawAMFWarningCanbusSPNGraph(SensorDet, MyData)
            //DrawDeepSeaWarningCanbusFMIGraph(SensorDet, MyData)
        }

        public void DrawDeepSeaWarningAlarmGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DrawDeepSeaWarning" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Draw Deep Sea Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 7; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateDeepseaControlStartEndData(44, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindDeepSeaStatusRegisterbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 250;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawDeepSeaControlmodeGraph(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DrawDeepSeaControlmode" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Deep Sea Control mode:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 5; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateDeepseaControlStartEndData(2, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindDeepSeaControlModebits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 250;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawDeepSeaMainsGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaMains" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Mains:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 27; Bcnt <= 33; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 27] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 27].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 27] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 27].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    if ((MyDataHistory.Field > 26 & MyDataHistory.Field <= 33) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                    {
                        try
                        {
                            int MyField = MyDataHistory.Field - 27;
                            //field always starts at 1
                            if (MyField > MaxFieldCnt)
                            {
                                MaxFieldCnt = MyField;
                            }
                            int myret = 0;
                            myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                            numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                            numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field - 1].SettingDivisor;


                        }
                        catch (Exception ex)
                        {
                            errorMessage.Visible = true;
                            lblError.Text = "DEEPSEGRAPH err:" + ex.Message;

                            Trace.Write("DEEPSEGRAPH err:" + ex.Message);
                        }
                    }

                }
                catch (Exception ex)
                {
                    errorMessage.Visible = true;
                    lblError.Text = "DEEPSEGRAPH err:" + ex.Message;

                    Trace.Write("DEEPSEGRAPH 1 err:" + ex.Message);
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaMainsAmps(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaMainsAmps" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Mains Amps:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 38; Bcnt <= 41; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 38] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 38].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 38] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 38].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 37 & MyDataHistory.Field <= 41) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field > 36 And MyDataHistory.Field <= 40 Then
                    int MyField = MyDataHistory.Field - 38;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field - 1].SettingDivisor;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaAlternatorVolts(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaAlternator" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Alternator:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 12; Bcnt <= 18; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 12].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 12].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 10 & MyDataHistory.Field <= 17) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field > 10 And MyDataHistory.Field <= 17 Then
                    int MyField = MyDataHistory.Field - 12;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field - 1].SettingDivisor;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaAlternatorAmps(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaAlternatorAmps" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Alternator Amps:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 19; Bcnt <= 21; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 19] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 19].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 19] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 19].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 18 & MyDataHistory.Field <= 21) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    // If MyDataHistory.Field > 17 And MyDataHistory.Field <= 21 Then
                    int MyField = MyDataHistory.Field - 19;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field - 1].SettingDivisor;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaWaterOilBatteryFuelTemp(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaWaterOilBatteryFuelTemp" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "DeepSea WaterOilBatteryFuelTemp:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            //4-9 61-71
            int Bcnt = 0;
            for (Bcnt = 5; Bcnt <= 10; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 5].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 5].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }
            }
            //For Bcnt = 62 To 65
            //    If SensorDet.Fields.Contains(Bcnt.ToString) = True Then
            //        If CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue Then
            //            numericTimeSeries1(Bcnt - 55) = New NumericTimeSeries
            //            numericTimeSeries1(Bcnt - 55).Label = CType(SensorDet.Fields((Bcnt).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
            //        End If
            //    Else
            //        numericTimeSeries1(Bcnt - 55) = New NumericTimeSeries

            //        numericTimeSeries1(Bcnt - 55).Label = MyAMF.GensetTable(Bcnt).SettingName
            //    End If

            //Next

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 4 & MyDataHistory.Field <= 10) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If (MyDataHistory.Field > 3 And MyDataHistory.Field <= 9) Then
                    int MyField = MyDataHistory.Field - 5;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field - 1].SettingDivisor;
                }
                //If (MyDataHistory.Field > 60 And MyDataHistory.Field <= 71) And (CType(SensorDet.Fields((MyDataHistory.Field).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).DisplayValue) Then
                //    'If (MyDataHistory.Field > 60 And MyDataHistory.Field <= 71) Then
                //    Dim MyField As Integer = MyDataHistory.Field - 55 'already have 2 ABove
                //    If MyField > MaxFieldCnt Then
                //        MaxFieldCnt = MyField
                //    End If
                //    Dim myret As Integer
                //    myret = numericTimeSeries1[MyField].Points.Add(New NumericTimeDataPoint())
                //    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT
                //    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value
                //End If
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        //new graphs
        public void DrawDeepSeaGensetGraphsNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            //DrawDeepSeaSummaryGraph(SensorDet, MyData)
            try
            {
                DrawDeepSeaControlmodeGraphNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaWarningAlarmGraphNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaMainsGraphsNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaMainsAmpsNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaAlternatorVoltsNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaAlternatorAmpsNew(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawDeepSeaWaterOilBatteryFuelTemp(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            //DrawAMFWarningCanbusSPNGraph(SensorDet, MyData)
            //DrawDeepSeaWarningCanbusFMIGraph(SensorDet, MyData)
        }

        public void DrawDeepSeaWarningAlarmGraphNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DrawDeepSeaWarning" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Draw Deep Sea Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 7; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateDeepseaControlStartEndData(1, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindDeepSeaStatusRegisterbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 250;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawDeepSeaControlmodeGraphNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DrawDeepSeaControlmode" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Deep Sea Control mode:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeepSeaGenset Newamf = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 5; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                string[] Dates = GenerateDeepseaControlStartEndData(0, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindDeepSeaControlModebits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 250;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawDeepSeaMainsGraphsNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaMains" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Mains:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 12; Bcnt <= 14; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 12].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 12].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                try
                {
                    if ((MyDataHistory.Field > 12 & MyDataHistory.Field <= 14) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                    {
                        try
                        {
                            int MyField = MyDataHistory.Field - 12;
                            //field always starts at 1
                            if (MyField > MaxFieldCnt)
                            {
                                MaxFieldCnt = MyField;
                            }
                            int myret = 0;
                            myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                            numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                            numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field].SettingDivisor;


                        }
                        catch (Exception ex)
                        {
                            errorMessage.Visible = true;
                            lblError.Text = "DEEPSEGRAPH err:" + ex.Message;

                            Trace.Write("DEEPSEGRAPH err:" + ex.Message);
                        }
                    }

                }
                catch (Exception ex)
                {
                    errorMessage.Visible = true;
                    lblError.Text = "DEEPSEGRAPH err:" + ex.Message;

                    Trace.Write("DEEPSEGRAPH 1 err:" + ex.Message);
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaMainsAmpsNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaMainsAmps" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Mains Amps:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 15; Bcnt <= 17; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 15] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 15].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 15] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 15].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 15 & MyDataHistory.Field <= 17) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field.ToString())]).DisplayValue))
                {
                    //If MyDataHistory.Field > 36 And MyDataHistory.Field <= 40 Then
                    int MyField = MyDataHistory.Field - 15;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field].SettingDivisor;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaAlternatorVoltsNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaAlternator" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Alternator:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 5; Bcnt <= 7; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 5].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 5].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }

            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 5 & MyDataHistory.Field <= 7) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[MyDataHistory.Field.ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field > 10 And MyDataHistory.Field <= 17 Then
                    int MyField = MyDataHistory.Field - 5;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value * MyAMF.GensetTable[MyDataHistory.Field].SettingDivisor;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaAlternatorAmpsNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaAlternatorAmps" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Deep Sea Alternator Amps:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.DeepSeaGenset MyAMF = new LiveMonitoring.IRemoteLib.DeepSeaGenset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 8; Bcnt <= 10; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 8] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 8].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 8] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 8].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field > 8 & MyDataHistory.Field <= 10) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    // If MyDataHistory.Field > 17 And MyDataHistory.Field <= 21 Then
                    int MyField = MyDataHistory.Field - 8;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawDeepSeaWaterOilBatteryFuelTempNew(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeepSeaWaterOilBatteryFuelTemp" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "DeepSea WaterOilBatteryFuelTemp:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            LiveMonitoring.IRemoteLib.AMFMK4Genset MyAMF = new LiveMonitoring.IRemoteLib.AMFMK4Genset();
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            //4-9 61-71
            int Bcnt = 0;
            for (Bcnt = 2; Bcnt <= 4; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 2] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 2] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 2].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }
            }
            for (Bcnt = 11; Bcnt <= 11; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 11] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 11].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 11] = new NumericTimeSeries();

                    numericTimeSeries1[Bcnt - 11].Label = MyAMF.GensetTable[Bcnt].SettingName;
                }

            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field >= 2 & MyDataHistory.Field <= 4) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If (MyDataHistory.Field > 3 And MyDataHistory.Field <= 9) Then
                    int MyField = MyDataHistory.Field - 2;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
                if ((MyDataHistory.Field > 10 & MyDataHistory.Field <= 11) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If (MyDataHistory.Field > 60 And MyDataHistory.Field <= 71) Then
                    int MyField = MyDataHistory.Field - 8;
                    //already have 2 ABove
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawAMFGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawAMFGraphs1(SensorDet, MyData);
            DrawAMFGraphs2(SensorDet, MyData);
            DrawAMFGraphs3(SensorDet, MyData);
        }

        public void DrawAMFGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "AMF" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "AMF Inputs:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];

            for (tmpcntwe1 = 1; tmpcntwe1 <= 27; tmpcntwe1++)
            {
                tmpcntwe = SelectAmfFields(tmpcntwe1, ref ChartColors);
                int Namesint = 0;
                if (tmpcntwe >= 13 & tmpcntwe <= 27)
                {
                    Namesint = tmpcntwe - 1;
                }
                if (tmpcntwe >= 30 & tmpcntwe <= 69)
                {
                    Namesint = tmpcntwe - 3;
                }
                string[] Dates = GenerateAMFStartEndData(tmpcntwe, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindAmfFields(Namesint));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawAMFGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "AMF28" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "AMF Mains & Alternator:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 14; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 3).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 3).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if (MyDataHistory.Field > 2 & MyDataHistory.Field <= 8)
                {
                    int MyField = MyDataHistory.Field - 3;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawAMFGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            //roger Newline
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart.ChartDrawItem += ultraChart1_ChartDrawItem;

            MyDateLinechart.ID = "DL123" + SensorDet.ID.ToString();
            MyDateLinechart.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart.TitleTop.Margins.Bottom = 2;
            MyDateLinechart.TitleTop.Margins.Top = 2;
            MyDateLinechart.TitleTop.Margins.Left = 2;
            MyDateLinechart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart.TitleTop.Text = "AMF DC & Speed:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart.CompositeChart.ChartAreas.Add(myDLChartArea);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis = new AxisItem();
            DLxAxis.axisNumber = AxisNumber.X_Axis;
            DLxAxis.DataType = AxisDataType.String;
            DLxAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis.Labels.Font = new Font("Tahoma", 7);
            DLxAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis = new AxisItem();
            DLyAxis.axisNumber = AxisNumber.Y_Axis;
            DLyAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis.Labels.Font = new Font("Tahoma", 7);
            DLyAxis.LineThickness = 1;
            myDLChartArea.Axes.Add(DLxAxis);
            myDLChartArea.Axes.Add(DLyAxis);
            // Set the axes
            DLchartLayer.AxisX = DLxAxis;
            DLchartLayer.AxisY = DLyAxis;
            // Set the ChartArea
            DLchartLayer.ChartArea = myDLChartArea;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart.CompositeChart.ChartLayers.Add(DLchartLayer);
            ///''''''''''''''''''
            ISeries DLseries = null;
            NumericTimeSeries[] numericTimeSeries = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 14; Bcnt++)
            {
                numericTimeSeries[Bcnt] = new NumericTimeSeries();

                if (SensorDet.Fields.Contains((Bcnt + 9).ToString()) == true)
                {
                    numericTimeSeries[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 9).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries[Bcnt].Label = "Unknown";
                }
            }
            //mycnt1= fields ?
            int MaxFieldCnt = 0;
            MaxFieldCnt = 0;
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if (MyDataHistory.Field >= 9 & MyDataHistory.Field <= 11)
                {
                    int MyField = MyDataHistory.Field - 9;
                    //field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer.Series.Add(numericTimeSeries[Acnt]);
                DLseries = numericTimeSeries[Acnt];
                MyDateLinechart.Series.Add(DLseries);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer);
            //DLchartLayer.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer.AxisX.DataType = AxisDataType.Time;
            DLchartLayer.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart.Width = 700;
            MyDateLinechart.Height = 500;
            CompositeLegend legend = new CompositeLegend();
            legend.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart.CompositeChart.Legends.Add(legend);
            legend.ChartLayers.Add(MyDateLinechart.CompositeChart.ChartLayers[0]);
            legend.BoundsMeasureType = MeasureType.Percentage;
            legend.Bounds = new Rectangle(30, 5, 56, 14);
            MyDateLinechart.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            MyDateLinechart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Color[] ChartColors1 = null;
            ChartColors1 = new Color[] {
                Color.Blue,
                Color.Red,
                Color.Yellow,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue,
                Color.Blue
            };
            MyDateLinechart.ColorModel.CustomPalette = ChartColors1;

            this.Charts.Controls.Add(MyDateLinechart);
            //roger end test
        }
        // DrawRTSysTM3SNMPGraphs(SensorDet, MyData)
        public void DrawRTSysTM3SNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawRTSysTM3SNMPGraphs1(SensorDet, MyData);
            DrawRTSysTM3SNMPGraphs2(SensorDet, MyData);
            //DrawRTSysTM3SNMPGraphs3(SensorDet, MyData)
            //DrawRTSysTM3SNMPGraphs4(SensorDet, MyData)
            //DrawRTSysTM3SNMPGraphs5(SensorDet, MyData)
        }
        public void DrawRTSysTM3SNMPGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PRTSysTM328" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "RTSysTM3 Temps :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[7];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField >= 1 & MyField <= 4)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 3; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 5]);
                DLseries1 = numericTimeSeries1[Acnt - 5];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);


        }

        public void DrawRTSysTM3SNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "RTSysTM3SNMP" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "RTSysTM3SNMP 4-20 :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 5).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 5).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 5 & MyField <= 7)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 5].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 5].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 5].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 3; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawRTSysTM3SNMPGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP3" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Output :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 26; Bcnt <= 41; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 26] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 26].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 26].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 27 & MyField <= 42)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 27].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 27].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 27].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 27; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 27]);
                DLseries1 = numericTimeSeries1[Acnt - 27];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawRTSysTM3SNMPGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP4" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Bypass:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 42; Bcnt <= 52; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 42] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 42].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 42].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 43 & MyField <= 53)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 43].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 43].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 43].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 43; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 43]);
                DLseries1 = numericTimeSeries1[Acnt - 43];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawRTSysTM3SNMPGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP5" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Temperature:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 53; Bcnt <= 53; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 53] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 53].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 53].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField == 54)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 54].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 54].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 54].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 54; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 54]);
                DLseries1 = numericTimeSeries1[Acnt - 54];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawAPCSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawAPCSNMPGraphs1(SensorDet, MyData);
            //battery
            DrawAPCSNMPGraphs2(SensorDet, MyData);
            //input
            DrawAPCSNMPGraphs3(SensorDet, MyData);
            //output       
        }
        public void DrawAPCSNMPGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "APCSNMP28" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "APCSNMP Battery :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[7];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 5; Bcnt <= 8; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 5] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 5].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 5].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField >= 6 & MyField <= 9)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 6].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 6].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyField == 5)
                    {
                        numericTimeSeries1[MyField - 6].Points[myret].NumericValue = MyDataHistory.Value / 60;
                    }
                    else
                    {
                        numericTimeSeries1[MyField - 6].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }

            }
            int Acnt = 0;
            for (Acnt = 6; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 6]);
                DLseries1 = numericTimeSeries1[Acnt - 6];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);


        }

        public void DrawAPCSNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "APCSNMP2" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "APCSNMP Input :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 9; Bcnt <= 10; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 9] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 9].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 9].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 10 & MyField <= 11)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 10].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 10].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 10].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 10; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 10]);
                DLseries1 = numericTimeSeries1[Acnt - 10];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawAPCSNMPGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "APCSNMP3" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "APCSNMP Output :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 12; Bcnt <= 15; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 12].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 12].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 13 & MyField <= 16)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 13].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 13].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 13].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 13; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 13]);
                DLseries1 = numericTimeSeries1[Acnt - 13];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }

        public void DrawPowerWareSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawPowerWareSNMPGraphs1(SensorDet, MyData);
            DrawPowerWareSNMPGraphs2(SensorDet, MyData);
            DrawPowerWareSNMPGraphs3(SensorDet, MyData);
            DrawPowerWareSNMPGraphs4(SensorDet, MyData);
            DrawPowerWareSNMPGraphs5(SensorDet, MyData);
        }
        public void DrawPowerWareSNMPGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP28" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Battery :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[7];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 4; Bcnt <= 9; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 4] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 4].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 4].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField >= 5 & MyField <= 9)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 5].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 5].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyField == 5)
                    {
                        numericTimeSeries1[MyField - 5].Points[myret].NumericValue = MyDataHistory.Value / 60;
                    }
                    else
                    {
                        numericTimeSeries1[MyField - 5].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }

            }
            int Acnt = 0;
            for (Acnt = 5; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 5]);
                DLseries1 = numericTimeSeries1[Acnt - 5];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);


        }

        public void DrawPowerWareSNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP2" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Input :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 10; Bcnt <= 25; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 10] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 10].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 10].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 11 & MyField <= 26)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 11].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 11].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 11].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 11; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 11]);
                DLseries1 = numericTimeSeries1[Acnt - 11];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawPowerWareSNMPGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP3" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Output :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 26; Bcnt <= 41; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 26] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 26].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 26].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 27 & MyField <= 42)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 27].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 27].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 27].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 27; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 27]);
                DLseries1 = numericTimeSeries1[Acnt - 27];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawPowerWareSNMPGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP4" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Bypass:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 42; Bcnt <= 52; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 42] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 42].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 42].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 43 & MyField <= 53)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 43].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 43].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 43].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 43; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 43]);
                DLseries1 = numericTimeSeries1[Acnt - 43];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawPowerWareSNMPGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "PowerWareSNMP5" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "PowerWareSNMP Temperature:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 53; Bcnt <= 53; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 53] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 53].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 53].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField == 54)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 54].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 54].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 54].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 54; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 54]);
                DLseries1 = numericTimeSeries1[Acnt - 54];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawGamaTronicsSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawGamaTronicsSNMPGraphs1(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsSNMPGraphs2(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsSNMPGraphs3(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsSNMPGraphs4(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsSNMPGraphs5(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsSNMPGraphs6(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsSNMPGraphs7(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawGamaTronicsAlarmGraphs(SensorDet, MyData);
                AddPageBreak();
            }
            catch (Exception ex)
            {
            }
        }
        public void DrawGamaTronicsSNMPGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP28" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics DC :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.GamaTronicsSNMP

            for (Bcnt = 56; Bcnt <= 58; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 56] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 56].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 56].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField >= 57 & MyField <= 59)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 57].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 57].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 57].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 56; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 57]);
                DLseries1 = numericTimeSeries1[Acnt - 57];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);


        }

        public void DrawGamaTronicsSNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP2" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics Input V&C :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 17; Bcnt <= 22; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 17] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 17].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 17].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 18 & MyField <= 23)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 18].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 18].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 18].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 18; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 18]);
                DLseries1 = numericTimeSeries1[Acnt - 18];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawGamaTronicsSNMPGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP3" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics Input Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 23; Bcnt <= 31; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 23]= new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 23].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 23].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 24 & MyField <= 32)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 24].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 24].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 24].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 24; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 24]);
                DLseries1 = numericTimeSeries1[Acnt - 24];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawGamaTronicsSNMPGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP4" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics Output V&C:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 35; Bcnt <= 40; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 35] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 35].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 35].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 36 & MyField <= 41)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 36].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 36].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 36].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 36; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 36]);
                DLseries1 = numericTimeSeries1[Acnt - 36];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawGamaTronicsSNMPGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP5" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics Output Power:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 41; Bcnt <= 49; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 41] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 41].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 41].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 42 & MyField <= 50)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 42].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 42].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 42].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 42; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 42]);
                DLseries1 = numericTimeSeries1[Acnt - 42];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawGamaTronicsSNMPGraphs6(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP6" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics Output Percentage:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            //Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 47; Bcnt <= 52; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 47] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 47].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 47].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 48 & MyField <= 53)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 48].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 48].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 48].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 48; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 48]);
                DLseries1 = numericTimeSeries1[Acnt - 48];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawGamaTronicsSNMPGraphs7(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "GamaTronicsSNMP7" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "GamaTronics Output Pf:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            // Dim MyGenset As New LiveMonitoring.IRemoteLib.LovatoGenset

            for (Bcnt = 53; Bcnt <= 55; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 53] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 53].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 1).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 53].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 54 & MyField <= 56)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 54].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 54].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 54].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 54; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt - 54]);
                DLseries1 = numericTimeSeries1[Acnt - 54];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }

        public void DrawGamaTronicsAlarmGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "GamaTronicsStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "GamaTronics Alarm Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.GamaTronicsSNMP.PowerPlusAlarmStatus MyAlarmSettings = new LiveMonitoring.IRemoteLib.GamaTronicsSNMP.PowerPlusAlarmStatus();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 32; tmpcntwe1++)
            {
                try
                {
                    string[] Dates = GenerateGamaTronicsStartEndData(12, tmpcntwe1, MyData);
                    string MyName = MyAlarmSettings.AlarmFields[tmpcntwe1];
                    if (string.IsNullOrEmpty(MyName))
                        MyName = "Unk";
                    GanttItem task1a = ganttSeries.Items.Add(MyAlarmSettings.AlarmFields[tmpcntwe1]);
                    int LastEnd = 0;
                    string[] StartArray = Strings.Split(Dates[0], ",");
                    string[] EndArray = Strings.Split(Dates[1], ",");
                    int loopcnt = 0;
                    if (Information.UBound(StartArray) > -1)
                    {
                        for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                        {
                            string endtime = null;
                            if (Information.UBound(EndArray) >= loopcnt)
                            {
                                if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                                {
                                    endtime = EndArray[loopcnt];
                                }
                                else
                                {
                                    endtime = this.txtEnd.Text;
                                    if (string.IsNullOrEmpty(endtime))
                                    {
                                        endtime = DateAndTime.Now.ToString();
                                    }
                                }
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                            }
                            if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                            {
                                task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                                task1a.Times[0].ID = 0;
                                task1a.Times[0].LinkToID = 1;
                                task1a.Times[0].PercentComplete = 1;
                                task1a.Times[0].Owner = "Worker A";
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                }

            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }
        public string[] GenerateGamaTronicsStartEndData(int FieldNum, int Bit2Check, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            //field num 12-27 = Field1
            //Field num 28>=Field 2
            //Dim ValueField As Integer
            // Dim mytmpcnt As Integer = Bit2Check
            //If FieldNum = 10 Then
            //    ValueField = 1
            //    mytmpcnt = FieldNum - 12
            //Else
            //    ValueField = 2
            //    mytmpcnt = FieldNum - 28
            //End If
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == FieldNum)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << Bit2Check;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) >= 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true | FirstSwitch)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            FirstSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public void DrawDeltaSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            //input s Volts
            try
            {
                DrawDeltaSNMPGraphs1(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //InputS Current
            try
            {
                DrawDeltaSNMPGraphs2(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //Outputs Volts
            try
            {
                DrawDeltaSNMPGraphs3(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //Outputs current
            try
            {
                DrawDeltaSNMPGraphs4(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //outPut Load
            try
            {
                DrawDeltaSNMPGraphs5(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //Bypass Readings
            try
            {
                DrawDeltaSNMPGraphs6(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //Battery Readings
            try
            {
                DrawDeltaSNMPGraphs7(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            //'Alarms
            //Try
            //    DrawDeltaAlarmGraphs(SensorDet, MyData)
            //    AddPageBreak()
            //Catch ex As Exception

            //End Try
        }
        public void DrawDeltaSNMPGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP28" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Delta Input Volts :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            LiveMonitoring.IRemoteLib.DeltaSNMP MyPowerDevice = new LiveMonitoring.IRemoteLib.DeltaSNMP();
            MyPowerDevice.LoadModels("");
            //If MyPowerDevice.DeltaOIDS(22).ScalingValue <> 0 Then
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS(25).ScalingValue
            //Else
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value
            //End If
            //Dim MyPowerDeviceOID As LiveMonitoring.IRemoteLib.DeltaSNMP.OIDObj

            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((21 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(21 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((24 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(24 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((27 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(27 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 22)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[22].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[22].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }

                }
                //ignore status
                if (MyField == 25)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[25].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[25].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 28)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[28].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[28].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);


        }

        public void DrawDeltaSNMPGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP2" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Delta Input Current :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];

            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((22 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(22 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((25 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(25 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((28 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(28 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 23)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status
                if (MyField == 26)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[1].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status
                if (MyField == 29)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[2].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawDeltaSNMPGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP3" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Delta OutPut Volts :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            LiveMonitoring.IRemoteLib.DeltaSNMP MyPowerDevice = new LiveMonitoring.IRemoteLib.DeltaSNMP();
            MyPowerDevice.LoadModels("");
            //If MyPowerDevice.DeltaOIDS(22).ScalingValue <> 0 Then
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS(25).ScalingValue
            //Else
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value
            //End If
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((32 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(32 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((36 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(36 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((40 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(40 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 33)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[33].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[33].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 37)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[37].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[37].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 41)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[41].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[41].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawDeltaSNMPGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP4" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Delta Output Current:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            //Dim numericTimeSeries1(10) As NumericTimeSeries
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];

            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((33 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(33 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((37 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(37 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((41 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(41 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 34)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status
                if (MyField == 38)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[1].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status
                if (MyField == 42)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[2].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawDeltaSNMPGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP5" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Delta Output Load:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            //Dim numericTimeSeries1(10) As NumericTimeSeries
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];

            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((35 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(35 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((39 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(39 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((43 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(43 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 36)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status
                if (MyField == 40)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[1].Points[myret].NumericValue = MyDataHistory.Value;
                }
                //ignore status
                if (MyField == 44)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[2].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawDeltaSNMPGraphs6(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP6" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Delta ByPass:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            // Dim numericTimeSeries1(10) As NumericTimeSeries
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            LiveMonitoring.IRemoteLib.DeltaSNMP MyPowerDevice = new LiveMonitoring.IRemoteLib.DeltaSNMP();
            MyPowerDevice.LoadModels("");
            //If MyPowerDevice.DeltaOIDS(22).ScalingValue <> 0 Then
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS(25).ScalingValue
            //Else
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value
            //End If
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((46 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(46 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((49 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(49 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((52 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(52 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 47)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    //Dim MyPowerDevice As New LiveMonitoring.IRemoteLib.DeltaSNMP
                    if (MyPowerDevice.DeltaOIDS[47].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[47].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 50)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[50].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[50].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 53)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[53].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[53].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }
        public void DrawDeltaSNMPGraphs7(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "DeltaSNMP7" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Battery Readings " + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[4];
            LiveMonitoring.IRemoteLib.DeltaSNMP MyPowerDevice = new LiveMonitoring.IRemoteLib.DeltaSNMP();
            MyPowerDevice.LoadModels("");
            //If MyPowerDevice.DeltaOIDS(47).ScalingValue <> 0 Then
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS(47).ScalingValue
            //Else
            //    numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value
            //End If
            numericTimeSeries1[0] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((60 + 1).ToString()) == true)
            {
                numericTimeSeries1[0].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(60 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[0].Label = "Unknown";
            }
            numericTimeSeries1[1] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((61 + 1).ToString()) == true)
            {
                numericTimeSeries1[1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(61 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[1].Label = "Unknown";
            }
            numericTimeSeries1[2] = new NumericTimeSeries();
            if (SensorDet.Fields.Contains((62 + 1).ToString()) == true)
            {
                numericTimeSeries1[2].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(62 + 1).ToString()]).FieldName;
            }
            else
            {
                numericTimeSeries1[2].Label = "Unknown";
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 
                //field always starts at 1
                //ignore status
                if (MyField == 61)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[0].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[0].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[61].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[61].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 62)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[1].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[62].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[62].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
                //ignore status
                if (MyField == 63)
                {
                    int myret = 0;
                    myret = numericTimeSeries1[2].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[2].Points[myret].TimeValue = MyDataHistory.DT;
                    if (MyPowerDevice.DeltaOIDS[63].ScalingValue != 0)
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value * MyPowerDevice.DeltaOIDS[63].ScalingValue;
                    }
                    else
                    {
                        numericTimeSeries1[0].Points[myret].NumericValue = MyDataHistory.Value;
                    }
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= 2; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 350;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
        }

        public void DrawDeltaAlarmGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DeltaStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Delta Alarm Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            LiveMonitoring.IRemoteLib.DeltaSNMP.AlarmStatus MyAlarmSettings = new LiveMonitoring.IRemoteLib.DeltaSNMP.AlarmStatus();
            for (tmpcntwe1 = 0; tmpcntwe1 <= 32; tmpcntwe1++)
            {
                try
                {
                    string[] Dates = GenerateDeltaStartEndData(12, tmpcntwe1, MyData);
                    string MyName = MyAlarmSettings.AlarmFields[tmpcntwe1];
                    if (string.IsNullOrEmpty(MyName))
                        MyName = "Unk";
                    GanttItem task1a = ganttSeries.Items.Add(MyAlarmSettings.AlarmFields[tmpcntwe1]);
                    int LastEnd = 0;
                    string[] StartArray = Strings.Split(Dates[0], ",");
                    string[] EndArray = Strings.Split(Dates[1], ",");
                    int loopcnt = 0;
                    if (Information.UBound(StartArray) > -1)
                    {
                        for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                        {
                            string endtime = null;
                            if (Information.UBound(EndArray) >= loopcnt)
                            {
                                if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                                {
                                    endtime = EndArray[loopcnt];
                                }
                                else
                                {
                                    endtime = this.txtEnd.Text;
                                    if (string.IsNullOrEmpty(endtime))
                                    {
                                        endtime = DateAndTime.Now.ToString();
                                    }
                                }
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                            }
                            if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                            {
                                task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                                task1a.Times[0].ID = 0;
                                task1a.Times[0].LinkToID = 1;
                                task1a.Times[0].PercentComplete = 1;
                                task1a.Times[0].Owner = "Worker A";
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                }

            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }
        public string[] GenerateDeltaStartEndData(int FieldNum, int Bit2Check, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            //field num 12-27 = Field1
            //Field num 28>=Field 2
            //Dim ValueField As Integer
            // Dim mytmpcnt As Integer = Bit2Check
            //If FieldNum = 10 Then
            //    ValueField = 1
            //    mytmpcnt = FieldNum - 12
            //Else
            //    ValueField = 2
            //    mytmpcnt = FieldNum - 28
            //End If
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == FieldNum)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << Bit2Check;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) >= 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true | FirstSwitch)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            FirstSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }

        public void DrawLovartoGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawLovartoGraphs2(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoGraphs5(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoGraphs1(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoGraphs3(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoGraphs4(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }

        }

        public void DrawLovartoGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "Lovarto" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Lovarto Error Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";


            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];


            for (tmpcntwe1 = 0; tmpcntwe1 <= 23; tmpcntwe1++)
            {
                //tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                //Dim Namesint As Integer
                //If tmpcntwe >= 13 And tmpcntwe <= 27 Then
                //    Namesint = tmpcntwe - 1
                //End If
                //If tmpcntwe >= 30 And tmpcntwe <= 69 Then
                //    Namesint = tmpcntwe - 3
                //End If
                string[] Dates = GenerateLovartoStartEndData(11, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindLovartoErrorbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawLovartoGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto28" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Measure :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGenset MyGenset = new LiveMonitoring.IRemoteLib.LovatoGenset();

            for (Bcnt = 0; Bcnt <= 6; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField < 8)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoGraphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "LovartoTime" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Time :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGenset MyGenset = new LiveMonitoring.IRemoteLib.LovatoGenset();

            for (Bcnt = 0; Bcnt <= 3; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 7).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = MyGenset.GensetTable[Bcnt + 7].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField > 7 & MyField < 12)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 8].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 8].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 8].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 8; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }
        public void DrawLovartoGraphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "LovartoIOStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Lovarto IO Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";


            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];


            for (tmpcntwe1 = 0; tmpcntwe1 <= 14; tmpcntwe1++)
            {
                //tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                //Dim Namesint As Integer
                //If tmpcntwe >= 13 And tmpcntwe <= 27 Then
                //    Namesint = tmpcntwe - 1
                //End If
                //If tmpcntwe >= 30 And tmpcntwe <= 69 Then
                //    Namesint = tmpcntwe - 3
                //End If
                string[] Dates = GenerateLovartoStartEndData(12, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindLovartoIOStatusbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }
        public void DrawLovartoGraphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "LovartoGenStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Lovarto Gen Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];


            for (tmpcntwe1 = 0; tmpcntwe1 <= 15; tmpcntwe1++)
            {
                //tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                //Dim Namesint As Integer
                //If tmpcntwe >= 13 And tmpcntwe <= 27 Then
                //    Namesint = tmpcntwe - 1
                //End If
                //If tmpcntwe >= 30 And tmpcntwe <= 69 Then
                //    Namesint = tmpcntwe - 3
                //End If
                string[] Dates = GenerateLovartoStartEndData(13, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindLovartoGeneralStatusbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }

        public void DrawLovartoRGAM60Graphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawLovartoRGAM60Graphs2(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs5(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs5a(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs5b(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs5c(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs5d(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs5e(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs3(SensorDet, MyData);
                //status
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs4(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawLovartoRGAM60Graphs4a(SensorDet, MyData);
                AddPageBreak();

            }
            catch (Exception ex)
            {
            }
        }

        public void DrawLovartoRGAM60Graphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto60 Mains :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 0; Bcnt <= 5; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField < 6)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 1].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 1].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 1].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 1; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs5(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60Generator" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Generator :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 6; Bcnt <= 11; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 6] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 6].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 6].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 7 & MyField <= 12)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 7].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 7].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 7].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 7; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs5a(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60Current" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Current :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 12; Bcnt <= 14; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 12].Label = MyGenset.GensetTable[Bcnt] .SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 12].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 13 & MyField <= 15)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 13].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 13].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 13].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 13; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs5b(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60Power" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Mains Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 15; Bcnt <= 23; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 15] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 15].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 15].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 16 & MyField <= 24)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 16].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 16].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 16].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 16; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs5c(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60GenPower" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Generator Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 25; Bcnt <= 33; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 25] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 25].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 25].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 25 & MyField <= 33)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 25].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 25].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 25].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 25; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs5d(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60ARPower" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Total Power :" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 33; Bcnt <= 38; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 33] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 33].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 33].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 34 & MyField <= 39)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 34].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 34].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 34].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 34; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs5e(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "Lovarto60PFPower" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //MyDateLinechart1.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "Lovarto Power Factor:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[11];
            int Bcnt = 0;
            LiveMonitoring.IRemoteLib.LovatoGensetRGAM60 MyGenset = new LiveMonitoring.IRemoteLib.LovatoGensetRGAM60();

            for (Bcnt = 39; Bcnt <= 46; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 39] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 1).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 39].Label = MyGenset.GensetTable[Bcnt].SettingName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 39].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field;
                //- 1 'field always starts at 1
                //ignore status
                if (MyField >= 40 & MyField <= 47)
                {
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField - 40].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField - 40].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField - 40].Points[myret].NumericValue = MyDataHistory.Value;
                }

            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt - 40; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(5, 5, 105, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);
            //Dim legend1 As New CompositeLegend()
            //legend1.LabelStyle.Font = New Font("Times New Roman", 10)
            //MyDateLinechart1.CompositeChart.Legends.Add(legend1)
            //legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0])
            //legend1.BoundsMeasureType = MeasureType.Percentage
            // legend1.Bounds = New Rectangle(5, 5, 105, 14)

        }

        public void DrawLovartoRGAM60Graphs3(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "Lovarto60IOStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Lovarto IO Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";


            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];


            for (tmpcntwe1 = 0; tmpcntwe1 <= 9; tmpcntwe1++)
            {
                //tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                //Dim Namesint As Integer
                //If tmpcntwe >= 13 And tmpcntwe <= 27 Then
                //    Namesint = tmpcntwe - 1
                //End If
                //If tmpcntwe >= 30 And tmpcntwe <= 69 Then
                //    Namesint = tmpcntwe - 3
                //End If
                string[] Dates = GenerateLovartoStartEndData(63, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindLovarto60IOStatusbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }
        public void DrawLovartoRGAM60Graphs4(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "LovartoErrStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Lovarto Err Status:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];


            for (tmpcntwe1 = 0; tmpcntwe1 <= 31; tmpcntwe1++)
            {
                //tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                //Dim Namesint As Integer
                //If tmpcntwe >= 13 And tmpcntwe <= 27 Then
                //    Namesint = tmpcntwe - 1
                //End If
                //If tmpcntwe >= 30 And tmpcntwe <= 69 Then
                //    Namesint = tmpcntwe - 3
                //End If
                string[] Dates = GenerateLovartoStartEndData(61, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindLovarto60Errorbits(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }
        public void DrawLovartoRGAM60Graphs4a(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "LovartoErrStatus2" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            //Mychart.TitleTop.FontSizeBestFit = false
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "Lovarto Err Status2:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];


            for (tmpcntwe1 = 0; tmpcntwe1 <= 25; tmpcntwe1++)
            {
                //tmpcntwe = SelectAmfFields(tmpcntwe1, ChartColors)
                //Dim Namesint As Integer
                //If tmpcntwe >= 13 And tmpcntwe <= 27 Then
                //    Namesint = tmpcntwe - 1
                //End If
                //If tmpcntwe >= 30 And tmpcntwe <= 69 Then
                //    Namesint = tmpcntwe - 3
                //End If
                string[] Dates = GenerateLovartoStartEndData(62, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(FindLovarto60Errorbits2(tmpcntwe1));
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 600;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);
        }

        public string[] GenerateLovartoStartEndData(int FieldNum, int Bit2Check, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            //field num 12-27 = Field1
            //Field num 28>=Field 2
            //Dim ValueField As Integer
            // Dim mytmpcnt As Integer = Bit2Check
            //If FieldNum = 10 Then
            //    ValueField = 1
            //    mytmpcnt = FieldNum - 12
            //Else
            //    ValueField = 2
            //    mytmpcnt = FieldNum - 28
            //End If
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == FieldNum)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << Bit2Check;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) >= 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true | FirstSwitch)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            FirstSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public string FindLovartoErrorbits(int mycnt)
        {
            //analouge
            if (mycnt == 0)
                return "Low oil pressure";
            if (mycnt == 1)
                return "High engine temperature";
            if (mycnt == 2)
                return "Low fuel level";
            if (mycnt == 3)
                return "Starting failure";
            if (mycnt == 4)
                return "Low battery voltage";
            if (mycnt == 5)
                return "High battery voltage";
            if (mycnt == 6)
                return "Charger Alternator Failure";
            if (mycnt == 7)
                return "Generator voltage failure";
            if (mycnt == 8)
                return "High generator frequency";
            if (mycnt == 9)
                return "Low generator frequency";
            if (mycnt == 10)
                return "Generator Overload";
            if (mycnt == 11)
                return "Engine stop failure";
            //input status
            if (mycnt == 12)
                return "Emergency stop failure";
            //13
            if (mycnt == 13)
                return "Unexpected Stop";
            if (mycnt == 14)
                return "Maintenance request";
            if (mycnt == 15)
                return "Mains contactor failure";
            if (mycnt == 16)
                return "Generator contactor failure";
            if (mycnt == 17)
                return "";
            if (mycnt == 18)
                return "";
            if (mycnt == 19)
                return "";
            if (mycnt == 20)
                return "User alarm 1";
            if (mycnt == 21)
                return "User alarm 2";
            if (mycnt == 22)
                return "User alarm 3";
            if (mycnt == 23)
                return "User alarm 4";
            return "Unk";
        }
        public string FindLovarto60Errorbits(int mycnt)
        {
            //analouge
            if (mycnt == 0)
                return "A01 Engine temperature warning ";
            if (mycnt == 1)
                return "A02 High engine temperature ";
            if (mycnt == 2)
                return "A03 Temperature analog sensor fault";
            if (mycnt == 3)
                return "A04 High engine temperature ";
            if (mycnt == 4)
                return "A05 Oil pressure warning ";
            if (mycnt == 5)
                return "A06 Low oil pressure ";
            if (mycnt == 6)
                return "A07 Pressure analog sensor fault";
            if (mycnt == 7)
                return "A08 Low oil pressure ";
            if (mycnt == 8)
                return "A09 Pressure digital sensor fault";
            if (mycnt == 9)
                return "A10 Fuel level warning ";
            if (mycnt == 10)
                return "A11 Low fuel level ";
            if (mycnt == 11)
                return "A12 Level analog sensor fault";
            //input status
            if (mycnt == 12)
                return "A13 Low fuel level ";
            //13
            if (mycnt == 13)
                return "A14 High battery voltage";
            if (mycnt == 14)
                return "A15 Low battery voltage";
            if (mycnt == 15)
                return "A16 Inefficient battery";
            if (mycnt == 16)
                return "A17 Charger alternator failure";
            if (mycnt == 17)
                return "A18 W signal failure";
            if (mycnt == 18)
                return "A19 Low engine W speed";
            if (mycnt == 19)
                return "A20 High engine W speed";
            if (mycnt == 20)
                return "A21 Starting failure";
            if (mycnt == 21)
                return "A22 Emergency stop";
            if (mycnt == 22)
                return "A23 Unexpected stop";
            if (mycnt == 23)
                return "A24 Engine stop failure";
            if (mycnt == 24)
                return "A25 Low generator frequency";
            if (mycnt == 25)
                return "A26 High generator frequency";
            if (mycnt == 26)
                return "A27 Low generator voltage";
            if (mycnt == 27)
                return "A28 High generator voltage";
            if (mycnt == 28)
                return "A29 Generator asymmetry";
            if (mycnt == 29)
                return "A30 Generator short-circuit";
            if (mycnt == 30)
                return "A31 Generator overload";
            if (mycnt == 31)
                return "A32 External generator protection tripping";
            return "Unk";
        }
        public string FindLovarto60Errorbits2(int mycnt)
        {
            //analouge
            if (mycnt == 0)
                return "A33 Incorrect generator phase sequence ";
            if (mycnt == 1)
                return "A34 Incorrect mains phase sequence ";
            if (mycnt == 2)
                return "A35 Wrong system frequency setting";
            if (mycnt == 3)
                return "A36 Generator contactor failure ";
            if (mycnt == 4)
                return "A37 Mains contactor failure ";
            if (mycnt == 5)
                return "A38 Maintenance requested ";
            if (mycnt == 6)
                return "A39 System error";
            if (mycnt == 7)
                return "A40 Fuel transfer empty ";
            if (mycnt == 8)
                return "A41 Fuel transfer too full";
            if (mycnt == 9)
                return "A42 Rent hours exhausted ";
            if (mycnt == 10)
                return "A43 Low radiator liquid level  ";
            if (mycnt == 11)
                return "A44 Circuit breaker closet ";
            //input status
            if (mycnt == 12)
                return "A45 Circuit breaker open ";
            //13
            if (mycnt == 13)
                return "A46 Low engine temperature ";
            if (mycnt == 14)
                return "A47 Battery charger alarm  ";
            if (mycnt == 15)
                return "A48 Red light alarm from CANbus ";
            if (mycnt == 16)
                return "A49 Amber light alarm from CANbus ";
            if (mycnt == 17)
                return "A50 CANbus disconnected alarm";
            if (mycnt == 18)
                return "U01 Userâ€™s alarm 1";
            if (mycnt == 19)
                return "U02 Userâ€™s alarm 2";
            if (mycnt == 20)
                return "U03 Userâ€™s alarm 3";
            if (mycnt == 21)
                return "U04 Userâ€™s alarm 4";
            if (mycnt == 22)
                return "U05 Userâ€™s alarm 5";
            if (mycnt == 23)
                return "U06 Userâ€™s alarm 6";
            if (mycnt == 24)
                return "U07 Userâ€™s alarm 7";
            if (mycnt == 25)
                return "U08 Userâ€™s alarm 8";

            return "Unk";
        }
        public string FindLovarto60IOStatusbits(int mycnt)
        {
            //analouge
            if (mycnt == 0)
                return "Alarm";
            if (mycnt == 1)
                return "Engine Start";
            if (mycnt == 2)
                return "Engine Stop";
            if (mycnt == 3)
                return "Cooling";
            if (mycnt == 4)
                return "Test";
            if (mycnt == 5)
                return "External Start";
            if (mycnt == 6)
                return "External Stop";
            if (mycnt == 7)
                return "Start kw trip";
            if (mycnt == 8)
                return "Start EJP";
            if (mycnt == 9)
                return "Start SCR";
            return "Unk";
        }

        public string FindLovartoIOStatusbits(int mycnt)
        {
            //analouge
            if (mycnt == 0)
                return "Oil pressure alarm input";
            if (mycnt == 1)
                return "High temperature alarm input";
            if (mycnt == 2)
                return "Fuel level alarm input";
            if (mycnt == 3)
                return "Emergency stop input";
            if (mycnt == 4)
                return "Prog Input terminal 10";
            if (mycnt == 5)
                return "Prog Input terminal 11";
            if (mycnt == 6)
                return "Prog Input terminal 12";
            if (mycnt == 7)
                return "Prog Input terminal 13";
            if (mycnt == 8)
                return "Mains contactor output";
            if (mycnt == 9)
                return "Gen. Contactor output";
            if (mycnt == 10)
                return "Fuel valve output";
            if (mycnt == 11)
                return "Start output";
            //input status
            if (mycnt == 12)
                return "Prog. Output terminal 18";
            //13
            if (mycnt == 13)
                return "Prog. Output terminal 16";
            if (mycnt == 14)
                return "Prog. Output terminal 20-22";
            return "Unk";
        }
        public string FindLovartoGeneralStatusbits(int mycnt)
        {
            //analouge
            if (mycnt == 0)
                return "Off mode";
            if (mycnt == 1)
                return "Man mode";
            if (mycnt == 2)
                return "Aut mode";
            if (mycnt == 3)
                return "Test mode";
            if (mycnt == 4)
                return "Engine running";
            if (mycnt == 5)
                return "Alarms enabled";
            if (mycnt == 6)
                return "Mains voltage presence";
            if (mycnt == 7)
                return "Generator voltage presence";
            if (mycnt == 8)
                return "Mains voltage ok";
            if (mycnt == 9)
                return "Generator voltage ok";
            if (mycnt == 10)
                return "Mains contactor";
            if (mycnt == 11)
                return "Generator contactor";
            //input status
            if (mycnt == 12)
                return "Automatic test enabled";
            //13
            if (mycnt == 13)
                return "Automatic test in progress";
            if (mycnt == 14)
                return "Cooling";
            if (mycnt == 15)
                return "Alarm";
            return "Unk";
        }
        public void DrawMegatec3PhaseUPSGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawMegatec3PhaseUPSGraphsBattery(SensorDet, MyData);
            AddPageBreak();
            DrawMegatec3PhaseUPSGraphsInput(SensorDet, MyData);
            AddPageBreak();
            DrawMegatec3PhaseUPSGraphsFrequency(SensorDet, MyData);
            AddPageBreak();
            DrawMegatec3PhaseUPSGraphsOutput(SensorDet, MyData);
            AddPageBreak();
            DrawMegatec3PhaseUPSGraphsRectifierStatus(SensorDet, MyData);
            //AddPageBreak()
            DrawMegatec3PhaseUPSGraphsUPSStatus(SensorDet, MyData);
            AddPageBreak();
            DrawMegatec3PhaseUPSGraphsInvertorFaultStatus(SensorDet, MyData);
        }

        public void DrawMegatec3PhaseUPSGraphsBattery(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "USP3PhaseBatVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Bat:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 1; Bcnt <= 4; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 1].Label = "Unknown";
                }

                //numericTimeSeries1[Bcnt] = New NumericTimeSeries
                //If SensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
                //    numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //Else
                //    numericTimeSeries1[Bcnt].Label = "Unknown"
                //End If
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field <= 4) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field <= 7 Then
                    int MyField = MyDataHistory.Field - 1;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatec3PhaseUPSGraphsInput(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "USP3PhaseInVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS IN:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 12; Bcnt <= 17; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 12].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 12] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 12].Label = "Unknown";
                }

                //numericTimeSeries1[Bcnt] = New NumericTimeSeries
                //If SensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
                //    numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //Else
                //    numericTimeSeries1[Bcnt].Label = "Unknown"
                //End If
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field <= 17 & MyDataHistory.Field >= 12) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field <= 7 Then
                    int MyField = MyDataHistory.Field - 12;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatec3PhaseUPSGraphsFrequency(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "USP3PhaseFreqVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Freq:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 6; Bcnt <= 8; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 6] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 6].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 6] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 6].Label = "Unknown";
                }

                //numericTimeSeries1[Bcnt] = New NumericTimeSeries
                //If SensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
                //    numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //Else
                //    numericTimeSeries1[Bcnt].Label = "Unknown"
                //End If
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field >= 6 & MyDataHistory.Field <= 8) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field <= 7 Then
                    int MyField = MyDataHistory.Field - 6;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 300;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatec3PhaseUPSGraphsOutput(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "USP3PhaseOutVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Out:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 18; Bcnt <= 23; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 18] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 18].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 18] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 18].Label = "Unknown";
                }

                //numericTimeSeries1[Bcnt] = New NumericTimeSeries
                //If SensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
                //    numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //Else
                //    numericTimeSeries1[Bcnt].Label = "Unknown"
                //End If
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field <= 23 & MyDataHistory.Field >= 18) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field <= 7 Then
                    int MyField = MyDataHistory.Field - 18;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatec3PhaseUPSGraphsRectifierStatus(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "Mega3PhaseUPSRectifierStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS Rectifier STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 7; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 8:
                        NameField = "No Use";
                        break;
                    case 7:
                        NameField = "RECTIFIER ROTATION ERROR";
                        break;
                    case 6:
                        NameField = "Low Battery Shutdown";
                        break;
                    case 5:
                        NameField = "Low Battery";
                        break;
                    case 4:
                        NameField = "Three in â€“One out ";
                        break;
                    case 3:
                        NameField = "Back Up";
                        break;
                    case 2:
                        NameField = "Boost Charge";
                        break;
                    case 1:
                        NameField = "Rectifier Operating";
                        break;
                }
                string[] Dates = GenerateMegatecUPSGantStartEndData(9, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawMegatec3PhaseUPSGraphsUPSStatus(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "Mega3PhaseUPSStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 5; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 8:
                        NameField = "No Use";
                        break;
                    case 7:
                        NameField = "No Use";
                        break;
                    case 6:
                        NameField = "No Use";
                        break;
                    case 5:
                        NameField = "BYPASS FRQUENCY FAIL";
                        break;
                    case 4:
                        NameField = "Manual Bypass Breaker On";
                        break;
                    case 3:
                        NameField = "Bypass AC Normal";
                        break;
                    case 2:
                        NameField = "Static Switch in Inverter Mode";
                        break;
                    case 1:
                        NameField = "Inverter Operating";
                        break;
                }
                string[] Dates = GenerateMegatecUPSGantStartEndData(10, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawMegatec3PhaseUPSGraphsInvertorFaultStatus(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "Mega3PhaseUPSInvertorFaultStatus" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS Invertor Fault STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 7; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 8:
                        NameField = "No Use";
                        break;
                    case 7:
                        NameField = "Emergency Stop (EPO)";
                        break;
                    case 6:
                        NameField = "High DC Shutdown";
                        break;
                    case 5:
                        NameField = "Manual Bypass Breaker on Shutdown";
                        break;
                    case 4:
                        NameField = "Over Load Shutdown";
                        break;
                    case 3:
                        NameField = "Inverter O/P Fail Shutdown";
                        break;
                    case 2:
                        NameField = "Over Temperature Shutdown";
                        break;
                    case 1:
                        NameField = "Short Circuit Shutdown";
                        break;
                }
                string[] Dates = GenerateMegatecUPSGantStartEndData(11, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawMegatecUPSGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawMegatecUPSGraphs2(SensorDet, MyData);
            DrawMegatecUPSGraphs1(SensorDet, MyData);
        }

        public void DrawMegatecUPSGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "MegaUPS" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 8; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 8:
                        NameField = "Utility Fail";
                        break;
                    case 7:
                        NameField = "Batery low";
                        break;
                    case 6:
                        NameField = "Bypass/Boost/Buck";
                        break;
                    case 5:
                        NameField = "Failed";
                        break;
                    case 4:
                        NameField = "UPS Type(0-online)";
                        break;
                    case 3:
                        NameField = "Test in Progress";
                        break;
                    case 2:
                        NameField = "Shutdown";
                        break;
                    case 1:
                        NameField = "Beeper Enabled";
                        break;
                }
                string[] Dates = GenerateMegatecUPSGantStartEndData(8, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawMegatecUPSGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "USPVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 1; Bcnt <= 7; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 1].Label = "Unknown";
                }

                //numericTimeSeries1[Bcnt] = New NumericTimeSeries
                //If SensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
                //    numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //Else
                //    numericTimeSeries1[Bcnt].Label = "Unknown"
                //End If
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field <= 7) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field <= 7 Then
                    int MyField = MyDataHistory.Field - 1;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawVotronicUPSGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            try
            {
                DrawVotronicUPSGraphs2(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }
            try
            {
                DrawVotronicUPSGraphs1(SensorDet, MyData);

            }
            catch (Exception ex)
            {
            }


        }

        public void DrawVotronicUPSGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "VoltUPS" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 5; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 5:
                        NameField = "TestRunning";
                        break;
                    case 4:
                        NameField = "BatteryLow";
                        break;
                    case 3:
                        NameField = "BatteryCritical";
                        break;
                    case 2:
                        NameField = "BackupOperation";
                        break;
                    case 1:
                        NameField = "AudibleAlarm";
                        break;
                }
                string[] Dates = GenerateVoltronicUPSGantStartEndData(tmpcntwe1 + 7, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawVotronicUPSGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "VoltVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 1; Bcnt <= 7; Bcnt++)
            {
                if (SensorDet.Fields.Contains(Bcnt.ToString()) == true)
                {
                    if (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).DisplayValue)
                    {
                        numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                        numericTimeSeries1[Bcnt - 1].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                    }
                }
                else
                {
                    numericTimeSeries1[Bcnt - 1] = new NumericTimeSeries();
                    numericTimeSeries1[Bcnt - 1].Label = "Unknown";
                }

                //numericTimeSeries1[Bcnt] = New NumericTimeSeries
                //If SensorDet.Fields.Contains((Bcnt + 1).ToString) = True Then
                //    numericTimeSeries1[Bcnt].Label = CType(SensorDet.Fields((Bcnt + 1).ToString), LiveMonitoring.IRemoteLib.SensorFieldsDef).FieldName
                //Else
                //    numericTimeSeries1[Bcnt].Label = "Unknown"
                //End If
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if ((MyDataHistory.Field <= 7) & (((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(MyDataHistory.Field).ToString()]).DisplayValue))
                {
                    //If MyDataHistory.Field <= 7 Then
                    int MyField = MyDataHistory.Field - 1;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                if ((numericTimeSeries1[Acnt] == null) == false)
                {
                    DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                    DLseries1 = numericTimeSeries1[Acnt];
                    MyDateLinechart1.Series.Add(DLseries1);
                }
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawMegatecSNMPGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            if (SensorDet.ExtraData == "1Phase")
            {
                DrawMegatecSNMPUPSGraphs1PhaseBattery(SensorDet, MyData);
                DrawMegatecSNMPUPSGraphs1PhaseInput(SensorDet, MyData);
                DrawMegatecSNMPUPSGraphs1PhaseOutput(SensorDet, MyData);
                //3phase or not config
            }
            else
            {
                DrawMegatecSNMPUPSGraphs3PhaseBattery(SensorDet, MyData);
                DrawMegatecSNMPUPSGraphs3PhaseInput(SensorDet, MyData);
                DrawMegatecSNMPUPSGraphs3PhaseOutput(SensorDet, MyData);
            }
            //DrawMegatecSNMPUPSGraphs1(SensorDet, MyData)
        }

        public void DrawMegatecSNMPUPSGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "MegaSNMPUPS" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 8; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 8:
                        NameField = "Utility Fail";
                        break;
                    case 7:
                        NameField = "Batery low";
                        break;
                    case 6:
                        NameField = "Boost";
                        break;
                    case 5:
                        NameField = "Failed";
                        break;
                    case 4:
                        NameField = "Standby";
                        break;
                    case 3:
                        NameField = "Testing";
                        break;
                    case 2:
                        NameField = "Shutdown";
                        break;
                    case 1:
                        NameField = "Beeper On";
                        break;
                }
                string[] Dates = GenerateMegatecUPSGantStartEndData(8, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawMegatecSNMPUPSGraphs3PhaseBattery(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPUPS3pBatVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            int Bcnt = 0;
            for (Bcnt = 28; Bcnt <= 32; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 28] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 28].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 28].Label = "Unknown";
                }
            }

            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = -1;
                if (MyDataHistory.Field >= 28 & MyDataHistory.Field <= 32)
                {
                    MyField = MyDataHistory.Field - 28;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                if (MyField != -1)
                {
                    int divisor = 1;
                    if (MyDataHistory.Field == 11 | MyDataHistory.Field == 12 | (MyDataHistory.Field >= 18 & MyDataHistory.Field <= 22) | (MyDataHistory.Field >= 25 & MyDataHistory.Field <= 26))
                    {
                        divisor = 10;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = (MyDataHistory.Value / divisor);
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatecSNMPUPSGraphs3PhaseInput(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPUPS3pInVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            int Bcnt = 0;
            for (Bcnt = 33; Bcnt <= 36; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 33] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 33].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 33].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = -1;
                if (MyDataHistory.Field >= 33 & MyDataHistory.Field <= 36)
                {
                    MyField = MyDataHistory.Field - 33;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                if (MyField != -1)
                {
                    int divisor = 1;
                    if (MyDataHistory.Field == 11 | MyDataHistory.Field == 12 | (MyDataHistory.Field >= 18 & MyDataHistory.Field <= 22) | (MyDataHistory.Field >= 25 & MyDataHistory.Field <= 26))
                    {
                        divisor = 10;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = (MyDataHistory.Value / divisor);
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatecSNMPUPSGraphs3PhaseOutput(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPUPS3pOutVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            int Bcnt = 0;
            for (Bcnt = 37; Bcnt <= 43; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 37] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 37].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 37].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = -1;
                if (MyDataHistory.Field >= 37 & MyDataHistory.Field <= 43)
                {
                    MyField = MyDataHistory.Field - 37;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                if (MyField != -1)
                {
                    int divisor = 1;
                    if (MyDataHistory.Field == 11 | MyDataHistory.Field == 12 | (MyDataHistory.Field >= 18 & MyDataHistory.Field <= 22) | (MyDataHistory.Field >= 25 & MyDataHistory.Field <= 26))
                    {
                        divisor = 10;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = (MyDataHistory.Value / divisor);
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatecSNMPUPSGraphs1PhaseBattery(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPUPSBatVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            int Bcnt = 0;
            for (Bcnt = 7; Bcnt <= 8; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 7] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 7].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 7].Label = "Unknown";
                }
            }
            //skip 9 datebreplace
            for (Bcnt = 10; Bcnt <= 16; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 8] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 8].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 8].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = -1;
                if (MyDataHistory.Field >= 7 & MyDataHistory.Field <= 8)
                {
                    MyField = MyDataHistory.Field - 7;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                else if (MyDataHistory.Field >= 10 & MyDataHistory.Field <= 16)
                {
                    MyField = MyDataHistory.Field - 8;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                if (MyField != -1)
                {
                    int divisor = 1;
                    if (MyDataHistory.Field == 11 | MyDataHistory.Field == 12 | (MyDataHistory.Field >= 18 & MyDataHistory.Field <= 22) | (MyDataHistory.Field >= 25 & MyDataHistory.Field <= 26))
                    {
                        divisor = 10;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = (MyDataHistory.Value / divisor);
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatecSNMPUPSGraphs1PhaseInput(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPUPSInVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            int Bcnt = 0;
            for (Bcnt = 17; Bcnt <= 22; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 17] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 17].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 17].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = -1;
                if (MyDataHistory.Field >= 17 & MyDataHistory.Field <= 22)
                {
                    MyField = MyDataHistory.Field - 17;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                if (MyField != -1)
                {
                    int divisor = 1;
                    if (MyDataHistory.Field == 11 | MyDataHistory.Field == 12 | (MyDataHistory.Field >= 18 & MyDataHistory.Field <= 22) | (MyDataHistory.Field >= 25 & MyDataHistory.Field <= 26))
                    {
                        divisor = 10;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = (MyDataHistory.Value / divisor);
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }

        public void DrawMegatecSNMPUPSGraphs1PhaseOutput(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "SNMPUPSOutVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[21];
            int Bcnt = 0;
            for (Bcnt = 23; Bcnt <= 27; Bcnt++)
            {
                numericTimeSeries1[Bcnt - 23]= new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt - 23].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt - 23].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = -1;
                if (MyDataHistory.Field >= 23 & MyDataHistory.Field <= 27)
                {
                    MyField = MyDataHistory.Field - 23;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                }
                if (MyField != -1)
                {
                    int divisor = 1;
                    if (MyDataHistory.Field == 11 | MyDataHistory.Field == 12 | (MyDataHistory.Field >= 18 & MyDataHistory.Field <= 22) | (MyDataHistory.Field >= 25 & MyDataHistory.Field <= 26))
                    {
                        divisor = 10;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = (MyDataHistory.Value / divisor);
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawShutUPSGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            DrawShutUPSGraphs2(SensorDet, MyData);
            DrawShutUPSGraphs1(SensorDet, MyData);
        }

        public void DrawShutUPSGraphs1(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "ShutUPS" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = "UPS STATUS:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];
            string NameField = null;
            for (tmpcntwe1 = 1; tmpcntwe1 <= 8; tmpcntwe1++)
            {
                switch (tmpcntwe1)
                {
                    case 8:
                        NameField = "Power Overload";
                        break;
                    case 7:
                        NameField = "UPS Shutdown";
                        break;
                    case 6:
                        NameField = "Output Status";
                        break;
                    case 5:
                        NameField = "Battery Need Replacing";
                        break;
                    case 4:
                        NameField = "Bellow Remain Capacity";
                        break;
                    case 3:
                        NameField = "Discharging Battery";
                        break;
                    case 2:
                        NameField = "Charging Battery";
                        break;
                    case 1:
                        NameField = "Main AC Status";
                        break;
                }
                string[] Dates = GenerateMegatecUPSGantStartEndData(6, tmpcntwe1, MyData);
                GanttItem task1a = ganttSeries.Items.Add(NameField);
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 400;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);


        }

        public void DrawShutUPSGraphs2(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart MyDateLinechart1 = new Infragistics.WebUI.UltraWebChart.UltraChart();
            //attach event for legent width
            MyDateLinechart1.ChartDrawItem += ultraChart1_ChartDrawItem;
            MyDateLinechart1.ID = "USPVals" + SensorDet.ID.ToString();
            MyDateLinechart1.TitleTop.Extent = 45;
            //sets the font color
            MyDateLinechart1.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            MyDateLinechart1.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            MyDateLinechart1.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            MyDateLinechart1.TitleTop.Margins.Bottom = 2;
            MyDateLinechart1.TitleTop.Margins.Top = 2;
            MyDateLinechart1.TitleTop.Margins.Left = 2;
            MyDateLinechart1.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            MyDateLinechart1.TitleTop.Text = "UPS Val:" + SensorDet.Caption;
            //sets the vertical alignment of the title
            MyDateLinechart1.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            MyDateLinechart1.TitleTop.Visible = true;
            //wrap/don't wrap the text
            MyDateLinechart1.TitleTop.WrapText = true;
            // Set composite charts
            MyDateLinechart1.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myDLChartArea1 = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            MyDateLinechart1.CompositeChart.ChartAreas.Add(myDLChartArea1);
            // Create the ChartLayer
            ChartLayerAppearance DLchartLayer1 = new ChartLayerAppearance();
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Create an X axis
            AxisItem DLxAxis1 = new AxisItem();
            DLxAxis1.axisNumber = AxisNumber.X_Axis;
            DLxAxis1.DataType = AxisDataType.String;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL>";
            DLxAxis1.Labels.Font = new Font("Tahoma", 7);
            DLxAxis1.LineThickness = 1;
            // Create an Y axis
            AxisItem DLyAxis1 = new AxisItem();
            DLyAxis1.axisNumber = AxisNumber.Y_Axis;
            DLyAxis1.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            DLyAxis1.Labels.Font = new Font("Tahoma", 7);
            DLyAxis1.LineThickness = 1;
            myDLChartArea1.Axes.Add(DLxAxis1);
            myDLChartArea1.Axes.Add(DLyAxis1);
            // Set the axes
            DLchartLayer1.AxisX = DLxAxis1;
            DLchartLayer1.AxisY = DLyAxis1;
            // Set the ChartArea
            DLchartLayer1.ChartArea = myDLChartArea1;
            // Add the ChartLayer to the ChartLayers collection
            MyDateLinechart1.CompositeChart.ChartLayers.Add(DLchartLayer1);
            ///''''''''''''''''''
            ISeries DLseries1 = null;
            NumericTimeSeries[] numericTimeSeries1 = new NumericTimeSeries[16];
            int Bcnt = 0;
            for (Bcnt = 0; Bcnt <= 6; Bcnt++)
            {
                numericTimeSeries1[Bcnt] = new NumericTimeSeries();
                if (SensorDet.Fields.Contains((Bcnt + 3).ToString()) == true)
                {
                    numericTimeSeries1[Bcnt].Label = ((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[(Bcnt + 3).ToString()]).FieldName;
                }
                else
                {
                    numericTimeSeries1[Bcnt].Label = "Unknown";
                }
            }
            int tmp1cntwe = 0;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            int MaxFieldCnt = 0;
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                if (MyDataHistory.Field <= 8)
                {
                    int MyField = MyDataHistory.Field;
                    //- 3 'field always starts at 1
                    if (MyField > MaxFieldCnt)
                    {
                        MaxFieldCnt = MyField;
                    }
                    int myret = 0;
                    myret = numericTimeSeries1[MyField].Points.Add(new NumericTimeDataPoint());
                    numericTimeSeries1[MyField].Points[myret].TimeValue = MyDataHistory.DT;
                    numericTimeSeries1[MyField].Points[myret].NumericValue = MyDataHistory.Value;
                }
            }
            int Acnt = 0;
            for (Acnt = 0; Acnt <= MaxFieldCnt; Acnt++)
            {
                DLchartLayer1.Series.Add(numericTimeSeries1[Acnt]);
                DLseries1 = numericTimeSeries1[Acnt];
                MyDateLinechart1.Series.Add(DLseries1);
            }
            ///''''''''''''''''''
            // Set X axis
            DLxAxis1.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLxAxis1.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            // Set the ChartType
            DLchartLayer1.ChartType = ChartType.LineChart;
            // Set Axis Type
            SetAxisTypes(DLchartLayer1);
            //DLchartLayer1.AxisY.Extent = 130
            //Dim atype As New AxisDataType
            DLchartLayer1.AxisX.DataType = AxisDataType.Time;
            DLchartLayer1.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            DLchartLayer1.AxisY.DataType = AxisDataType.Numeric;
            // Add the series to the ChartLayer's Series collection.
            MyDateLinechart1.Width = 700;
            MyDateLinechart1.Height = 500;
            CompositeLegend legend1 = new CompositeLegend();
            legend1.LabelStyle.Font = new Font("Times New Roman", 10);
            MyDateLinechart1.CompositeChart.Legends.Add(legend1);
            legend1.ChartLayers.Add(MyDateLinechart1.CompositeChart.ChartLayers[0]);
            legend1.BoundsMeasureType = MeasureType.Percentage;
            legend1.Bounds = new Rectangle(30, 5, 85, 14);
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.BoundsMeasureType = MeasureType.Percentage;
            MyDateLinechart1.CompositeChart.ChartLayers[0].ChartArea.Bounds = new Rectangle(0, 20, 100, 80);
            this.Charts.Controls.Add(MyDateLinechart1);

        }
        public void DrawDiscreteOnOffGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DiscOnOff" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];

            for (tmpcntwe1 = 1; tmpcntwe1 <= SensorDet.Fields.Count; tmpcntwe1++)
            {
                tmpcntwe = tmpcntwe1;
                ChartColors[tmpcntwe1 - 1] = Color.Green;
                string[] Dates = GenerateDiscreteONOffStartEndData(tmpcntwe, MyData);
                GanttItem task1a = default(GanttItem);
                if (SensorDet.Fields.Contains(tmpcntwe1.ToString()) == true)
                {
                    task1a = ganttSeries.Items.Add(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName);
                }
                else
                {
                    task1a = ganttSeries.Items.Add("Unk");
                }
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }
                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[0].ID = 0;
                            task1a.Times[0].LinkToID = 1;
                            task1a.Times[0].PercentComplete = 1;
                            task1a.Times[0].Owner = "Worker A";
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 150;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);

        }
        public string[] GenerateDiscreteONOffStartEndData(int tmpcntwe, Collection MyData)
        {
            int mytmpcnt = 0;
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == tmpcntwe)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << mytmpcnt;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) == 0)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                        }
                    }
                }
            }
            return Dates;
        }
        public void DrawBiometricOnOffGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "BioMetricOnOff" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;
            //Mychart.Tooltips.Font.Name = "Arial"
            //Mychart.Tooltips.Font.Size = 8
            //Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea
            //Mychart.Tooltips.Display = TooltipDisplay.MouseMove
            //Mychart.Tooltips.Format = TooltipStyle.Custom
            //'Mychart.Tooltips.FormatString = "<ITEM_LABEL>sl<SERIES_LABEL>dv<DATA_VALUE> Entry:<START_TIME:yyyy-MM-dd hh:mm:ss> "
            Mychart.Tooltips.FormatString = "<MY_LABEL>";
            //Hashtable MyLabelHashTable = new Hashtable();
            //MyLabelHashTable.Add("MY_VALUE", new MyLabelRenderer());
            //UltraChart1.LabelHash = MyLabelHashTable;
            Hashtable labelHash = new Hashtable();
            labelHash.Add("MY_LABEL", new global::website2016V2.LabelRenderers(Mychart));
            Mychart.LabelHash = labelHash;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            //Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>"

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];

            for (tmpcntwe1 = 1; tmpcntwe1 <= SensorDet.Fields.Count; tmpcntwe1++)
            {
                tmpcntwe = tmpcntwe1;
                ChartColors[tmpcntwe1 - 1] = Color.Green;
                string[] Dates = GenerateBiometricONOffStartEndData(tmpcntwe, MyData);
                GanttItem task1a = default(GanttItem);
                if (SensorDet.Fields.Contains(tmpcntwe1.ToString()) == true)
                {
                    task1a = ganttSeries.Items.Add(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName);
                }
                else
                {
                    task1a = ganttSeries.Items.Add("Unk");
                }
                int LastEnd = 0;
                string[] StartArray = Strings.Split(Dates[0], ",");
                string[] EndArray = Strings.Split(Dates[1], ",");
                string[] DataArray = Strings.Split(Dates[2], ",");
                int loopcnt = 0;
                if (Information.UBound(StartArray) > -1)
                {
                    for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                    {
                        string endtime = null;
                        if (Information.UBound(EndArray) >= loopcnt)
                        {
                            if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                            {
                                endtime = EndArray[loopcnt];
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                                if (string.IsNullOrEmpty(endtime))
                                {
                                    endtime = DateAndTime.Now.ToString();
                                }
                            }
                        }
                        else
                        {
                            endtime = this.txtEnd.Text;
                        }

                        if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                        {
                            Infragistics.UltraChart.Data.GanttItem MytimeEntry = new Infragistics.UltraChart.Data.GanttItem();
                            int Mytask = task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                            task1a.Times[Mytask].ID = 0;
                            task1a.Times[Mytask].LinkToID = 1;
                            task1a.Times[Mytask].PercentComplete = 100;
                            task1a.Times[Mytask].Owner = DataArray[loopcnt];
                            task1a.Times[Mytask].Label = DataArray[loopcnt];
                            //task1a.Times[Mytask].
                        }
                    }
                }
            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            Mychart.GanttChart.ShowOwners = true;
            //chartLayer.GanttChart.ShowOwners = True
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 150;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);

        }
        public string[] GenerateBiometricONOffStartEndData(int tmpcntwe, Collection MyData)
        {
            int mytmpcnt = 0;
            string[] Dates = new string[3];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == tmpcntwe)
                {
                    Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                    Dates[1] += Convert.ToString(DateAndTime.DateAdd(DateInterval.Minute, 1, MyDataHistory.DT)) + ",";
                    Dates[2] += Convert.ToString(MyDataHistory.OtherData) + ",";
                    //Dim Pattern As Long = 1
                    //Dim myrestmp As Long '= 1 << mytmpcnt
                    //myrestmp = Pattern << mytmpcnt
                    //If (MyDataHistory.Value And myrestmp) = 0 Then 'this bit is off so on disply
                    //    If AMFoutputStateSwitch = False Then 'changed add startdate
                    //        Dates(0) += CStr(MyDataHistory.DT) & ","
                    //        AMFoutputStateSwitch = True
                    //    End If
                    //Else
                    //    If AMFoutputStateSwitch = True Then  'changed add enddate
                    //        Dates(1) += CStr(MyDataHistory.DT) & ","
                    //        AMFoutputStateSwitch = False
                    //    End If
                    //End If
                }
            }
            return Dates;
        }
        public void DrawDryContactOnOffGraphs(LiveMonitoring.IRemoteLib.SensorDetails SensorDet, Collection MyData)
        {
            Infragistics.WebUI.UltraWebChart.UltraChart Mychart = new Infragistics.WebUI.UltraWebChart.UltraChart();
            Mychart.ID = "DryOnOff" + SensorDet.ID.ToString();
            Mychart.TitleTop.Extent = 45;
            //sets the font color
            Mychart.TitleTop.FontColor = Color.Red;
            //sets whether the chart auto-sizes the font for the title
            Mychart.TitleTop.FontSizeBestFit = false;
            //sets the horizontal alignment of the text
            Mychart.TitleTop.HorizontalAlign = StringAlignment.Center;
            //sets the margins for the Top, Bottom, Left and right
            Mychart.TitleTop.Margins.Bottom = 2;
            Mychart.TitleTop.Margins.Top = 2;
            Mychart.TitleTop.Margins.Left = 2;
            Mychart.TitleTop.Margins.Right = 2;
            //sets the text to display for the chart in the title
            Mychart.TitleTop.Text = SensorDet.Caption;
            //sets the vertical alignment of the title
            Mychart.TitleTop.VerticalAlign = StringAlignment.Near;
            //show/hide the referenced title
            Mychart.TitleTop.Visible = true;
            //wrap/don't wrap the text
            Mychart.TitleTop.WrapText = true;
            // Set composite charts
            Mychart.ChartType = ChartType.Composite;
            // Create the ChartArea
            ChartArea myChartArea = new ChartArea();
            // Add the Chart Area to the ChartAreas collection
            Mychart.CompositeChart.ChartAreas.Add(myChartArea);
            // Create the ChartLayer
            ChartLayerAppearance chartLayer = new ChartLayerAppearance();
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Create an X axis
            AxisItem xAxis = new AxisItem();
            xAxis.axisNumber = AxisNumber.X_Axis;
            xAxis.DataType = AxisDataType.String;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            xAxis.Labels.Font = new Font("Tahoma", 7);
            xAxis.LineThickness = 1;
            // Create an Y axis
            AxisItem yAxis = new AxisItem();
            yAxis.axisNumber = AxisNumber.Y_Axis;
            yAxis.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
            yAxis.Labels.Font = new Font("Tahoma", 7);
            yAxis.LineThickness = 1;
            myChartArea.Axes.Add(xAxis);
            myChartArea.Axes.Add(yAxis);
            // Set the axes
            chartLayer.AxisX = xAxis;
            chartLayer.AxisY = yAxis;

            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";
            Mychart.Tooltips.Font.Name = "Arial";
            Mychart.Tooltips.Font.Size = 8;
            Mychart.Tooltips.Overflow = TooltipOverflow.ChartArea;
            Mychart.Tooltips.Display = TooltipDisplay.MouseMove;
            Mychart.Tooltips.Format = TooltipStyle.Custom;
            Mychart.Tooltips.FormatString = "<START_TIME:yyyy-MM-dd hh:mm:ss> - <END_TIME:yyyy-MM-dd hh:mm:ss>";

            // Set the ChartArea
            chartLayer.ChartArea = myChartArea;
            // Add the ChartLayer to the ChartLayers collection
            Mychart.CompositeChart.ChartLayers.Add(chartLayer);
            // Create Series
            ISeries series = null;
            GanttDataSource ganttData = new GanttDataSource();
            GanttSeries ganttSeries = ganttData.Series.Add("Series A");
            ganttSeries.Label = "";

            //roger data
            int tmpcntwe = 0;
            int tmpcntwe1 = 0;
            Color[] ChartColors = new Color[41];

            for (tmpcntwe1 = 1; tmpcntwe1 <= SensorDet.Fields.Count; tmpcntwe1++)
            {
                tmpcntwe = tmpcntwe1;
                ChartColors[tmpcntwe1 - 1] = Color.Green;
                string[] Dates = GenerateDryContactONOffStartEndData(tmpcntwe, MyData);
                GanttItem task1a = default(GanttItem);
                if (SensorDet.Fields.Contains(tmpcntwe1.ToString()) == true)
                {
                    if ((((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName == null) == false)
                    {
                        task1a = ganttSeries.Items.Add(((LiveMonitoring.IRemoteLib.SensorFieldsDef)SensorDet.Fields[tmpcntwe]).FieldName);
                    }
                    else
                    {
                        task1a = ganttSeries.Items.Add("Unk");
                    }
                }
                else
                {
                    task1a = ganttSeries.Items.Add("Unk");
                }
                int LastEnd = 0;
                if ((Dates[0] == null) == false | (Dates[1] == null) == false)
                {
                    string[] StartArray = Strings.Split(Dates[0], ",");
                    string[] EndArray = Strings.Split(Dates[1], ",");
                    int loopcnt = 0;
                    if (Information.UBound(StartArray) > -1)
                    {
                        for (loopcnt = 0; loopcnt <= Information.UBound(StartArray); loopcnt++)
                        {
                            string endtime = null;
                            if (Information.UBound(EndArray) >= loopcnt)
                            {
                                if (!string.IsNullOrEmpty(EndArray[loopcnt]))
                                {
                                    endtime = EndArray[loopcnt];
                                }
                                else
                                {
                                    endtime = this.txtEnd.Text;
                                    if (string.IsNullOrEmpty(endtime))
                                    {
                                        endtime = DateAndTime.Now.ToString();
                                    }
                                }
                            }
                            else
                            {
                                endtime = this.txtEnd.Text;
                            }
                            if (!string.IsNullOrEmpty(StartArray[loopcnt]))
                            {
                                task1a.Times.Add(DateTime.Parse(StartArray[loopcnt]), DateTime.Parse(endtime));
                                task1a.Times[0].ID = 0;
                                task1a.Times[0].LinkToID = 1;
                                task1a.Times[0].PercentComplete = 1;
                                task1a.Times[0].Owner = "Worker A";
                            }
                        }
                    }
                }

            }
            //roger data end
            series = ganttSeries;
            // Set X axis
            xAxis.Labels.Orientation = TextOrientation.VerticalLeftFacing;
            xAxis.Labels.ItemFormatString = "<ITEM_LABEL:MM/dd/yyyy HH:mm>";
            // Set Y axis
            yAxis.Labels.ItemFormatString = "<ITEM_LABEL>";
            // Set the ChartType
            chartLayer.ChartType = ChartType.GanttChart;
            // Set Axis Type
            SetAxisTypes(chartLayer);
            chartLayer.AxisY.Extent = 130;
            // Add the series to the ChartLayer's Series collection.
            chartLayer.Series.Add(series);
            Mychart.Series.Add(series);
            Mychart.Width = 700;
            Mychart.Height = 150;
            Mychart.ColorModel.ModelStyle = ColorModels.CustomLinear;
            Mychart.ColorModel.CustomPalette = ChartColors;
            this.Charts.Controls.Add(Mychart);

        }
        public string[] GenerateDryContactONOffStartEndData(int tmpcntwe, Collection MyData)
        {
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == tmpcntwe)
                {
                    //this bit is off so on disply
                    if (MyDataHistory.Value == 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                        }
                    }
                }
            }
            return Dates;
        }
        public string[] GenerateAMFStartEndData(int FieldNum, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            //field num 12-27 = Field1
            //Field num 28>=Field 2
            int ValueField = 0;
            int mytmpcnt = 0;
            if (FieldNum >= 12 & FieldNum <= 27)
            {
                ValueField = 1;
                mytmpcnt = FieldNum - 12;
            }
            else
            {
                ValueField = 2;
                mytmpcnt = FieldNum - 28;
            }
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == ValueField)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << mytmpcnt;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) == 0)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public string[] GenerateVoltronicUPSGantStartEndData(int FieldNum, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            //field num 12-27 = Field1
            //Field num 28>=Field 2
            int ValueField = FieldNum;
            // Dim mytmpcnt As Integer = BitNo - 1
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            //Dim tmp1cntwe As Integer = 0
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == ValueField)
                {

                    //this bit is off so on disply
                    if (MyDataHistory.Value == 0)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            //FirstSwitch = False
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public string[] GenerateMegatecUPSGantStartEndData(int FieldNum, int BitNo, Collection MyData)
        {
            ///'''''''''''''''''''''''''''''''''''''''''
            //field num 12-27 = Field1
            //Field num 28>=Field 2
            int ValueField = FieldNum;
            int mytmpcnt = BitNo - 1;
            string[] Dates = new string[2];
            //0=Start 1=End seperate with ,
            int tmp1cntwe = 0;
            var AMFoutputStateSwitch = false;
            bool FirstSwitch = true;
            //mycnt1= fields ?
           //LiveMonitoring.IRemoteLib.DataHistory MyDataHistory = default(LiveMonitoring.IRemoteLib.DataHistory);
            foreach (LiveMonitoring.IRemoteLib.DataHistory MyDataHistory in MyData)
            {
                int MyField = MyDataHistory.Field - 1;
                //field always starts at 1
                if (MyDataHistory.Field == ValueField)
                {
                    long Pattern = 1;
                    long myrestmp = 0;
                    //= 1 << mytmpcnt
                    myrestmp = Pattern << mytmpcnt;
                    //this bit is off so on disply
                    if (((long)MyDataHistory.Value & myrestmp) >= 1)
                    {
                        //changed add startdate
                        if (AMFoutputStateSwitch == false)
                        {
                            Dates[0] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = true;
                        }
                    }
                    else
                    {
                        //changed add enddate
                        if (AMFoutputStateSwitch == true)
                        {
                            Dates[1] += Convert.ToString(MyDataHistory.DT) + ",";
                            AMFoutputStateSwitch = false;
                            //FirstSwitch = False
                        }
                    }
                }
            }
            return Dates;
            ///'''''''''''''''''''''''''''''''''''''''''
        }
        public int SelectAmfFields(int mycnt, ref Color[] DrawColor)
        {
            int functionReturnValue = 0;
            //analouge
            switch (mycnt)
            {
                case 1:
                    functionReturnValue = 33;
                    DrawColor[mycnt - 1] = Color.Green;
                    break;
                case 2:
                    DrawColor[mycnt - 1] = Color.Green;
                    functionReturnValue = 32;
                    break;
                case 3:
                    functionReturnValue = 67;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 4:
                    functionReturnValue = 68;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 5:
                    functionReturnValue = 69;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 6:
                    functionReturnValue = 18;
                    DrawColor[mycnt - 1] = Color.Green;
                    break;
                case 7:
                    functionReturnValue = 16;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 8:
                    functionReturnValue = 23;
                    DrawColor[mycnt - 1] = Color.Green;
                    break;
                case 9:
                    functionReturnValue = 31;
                    DrawColor[mycnt - 1] = Color.Green;
                    break;
                case 10:
                    functionReturnValue = 30;
                    DrawColor[mycnt - 1] = Color.Green;
                    break;
                case 11:
                    functionReturnValue = 38;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 12:
                    functionReturnValue = 47;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 13:
                    functionReturnValue = 46;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 14:
                    functionReturnValue = 65;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 15:
                    functionReturnValue = 66;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 16:
                    functionReturnValue = 45;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 17:
                    functionReturnValue = 39;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 18:
                    functionReturnValue = 42;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 19:
                    functionReturnValue = 40;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 20:
                    functionReturnValue = 51;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 21:
                    functionReturnValue = 41;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 22:
                    functionReturnValue = 48;
                    DrawColor[mycnt - 1] = Color.Red;
                    break;
                case 23:
                    functionReturnValue = 49;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 24:
                    functionReturnValue = 53;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 25:
                    functionReturnValue = 52;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 26:
                    functionReturnValue = 50;
                    DrawColor[mycnt - 1] = Color.Yellow;
                    break;
                case 27:
                    functionReturnValue = 19;
                    DrawColor[mycnt - 1] = Color.Green;
                    break;
                default:
                    functionReturnValue = 2;
                    if (mycnt > 0)
                    {
                        DrawColor[mycnt - 1] = Color.Yellow;
                    }
                    else
                    {
                        DrawColor[mycnt] = Color.Yellow;
                    }
                    break;
            }
            return functionReturnValue;
        }
        public string FindAmfFields(int mycnt)
        {
            //analouge
            if (mycnt == 3)
                return "Mains Phase 1 Volts";
            if (mycnt == 4)
                return "Mains Phase 2 Volts";
            if (mycnt == 5)
                return "Mains Phase 3 Volts";
            if (mycnt == 6)
                return "Alternator Phase 1 Volts";
            if (mycnt == 7)
                return "Alternator Phase 2 Volts";
            if (mycnt == 8)
                return "Alternator Phase 3 Volts";
            if (mycnt == 9)
                return "DC input volts";
            if (mycnt == 10)
                return "Speed input in RPM";
            if (mycnt == 11)
                return "Phase Rotation Input";
            //input status
            if (mycnt == 12)
                return "Alternator Charge Input";
            //13
            if (mycnt == 13)
                return "No Fuel Input";
            if (mycnt == 14)
                return "Spare 2 Input";
            if (mycnt == 15)
                return "Test Switch Input";
            if (mycnt == 16)
                return "Load Input";
            if (mycnt == 17)
                return "Auto/Manual Input";
            if (mycnt == 18)
                return "Alarm Mute Input";
            if (mycnt == 19)
                return "Lamp Test Switch Input";
            if (mycnt == 20)
                return "Heater Fault Input";
            if (mycnt == 21)
                return "Low Fuel Input";
            if (mycnt == 22)
                return "Remote Start Input";
            if (mycnt == 23)
                return "Spare 1 Input";
            if (mycnt == 24)
                return "Auxiliary Shutdown Input";
            if (mycnt == 25)
                return "Low Oil Pressure Input";
            if (mycnt == 26)
                return "High Temperature Input";
            //Output status LEDS
            if (mycnt == 27)
                return "Alternator On Load";
            //30
            if (mycnt == 28)
                return "Alternator Available";
            if (mycnt == 29)
                return "Mains On Load";
            if (mycnt == 30)
                return "Mains Available";
            if (mycnt == 31)
                return "Keyboard Scan Line 3";
            if (mycnt == 32)
                return "Keyboard Scan Line 2";
            if (mycnt == 33)
                return "Keyboard Scan Line 1";
            if (mycnt == 34)
                return "Keyboard Scan Line 0";
            if (mycnt == 35)
                return "Fail to Start";
            if (mycnt == 36)
                return "High temperature";
            if (mycnt == 37)
                return "Low Water";
            //spare 1 
            if (mycnt == 38)
                return "Overspeed";
            if (mycnt == 39)
                return "Low Oil Pressure";
            if (mycnt == 40)
                return "Auxilary Shutdown";
            if (mycnt == 41)
                return "Not Auto";
            if (mycnt == 42)
                return "emergency Stop";
            if (mycnt == 43)
                return "Low Alternator Supply";
            if (mycnt == 44)
                return "High Alternator Supply";
            if (mycnt == 45)
                return "Underspeed";
            if (mycnt == 46)
                return "Mains Charge Failed";
            if (mycnt == 47)
                return "Spare 2";
            if (mycnt == 48)
                return "No Fuel";
            if (mycnt == 49)
                return "Heater Fault";
            if (mycnt == 50)
                return "Low Fuel ";
            if (mycnt == 51)
                return "LED Port 1/2";
            if (mycnt == 52)
                return "Auxiliary Start";
            if (mycnt == 53)
                return "Run Relay";
            if (mycnt == 54)
                return "Start Relay";
            if (mycnt == 55)
                return "Pre Heat Relay";
            if (mycnt == 56)
                return "Alarm Relay";
            if (mycnt == 57)
                return "Mains On Load Relay";
            if (mycnt == 58)
                return "Alternator on Load Relay";
            if (mycnt == 59)
                return "I2C TX";
            if (mycnt == 60)
                return "I2C Clock Out";
            if (mycnt == 61)
                return "Remote Start";
            if (mycnt == 62)
                return "Alternator Phase Fault";
            if (mycnt == 63)
                return "Alternator Charging";
            if (mycnt == 64)
                return "High Mains Supply";
            if (mycnt == 65)
                return "Low Mains Supply";
            if (mycnt == 66)
                return "Mains Phase Fault";
            return "Unk";
        }
        private void SetAxisTypes(ChartLayerAppearance layer)
        {
            switch (layer.ChartType)
            {
                case ChartType.ColumnChart:
                case ChartType.StackColumnChart:
                    layer.AxisX.DataType = AxisDataType.String;
                    layer.AxisX.SetLabelAxisType = SetLabelAxisType.GroupBySeries;
                    layer.AxisY.DataType = AxisDataType.Numeric;
                    layer.AxisY.TickmarkStyle = AxisTickStyle.Smart;
                    break;
                case ChartType.BarChart:
                case ChartType.StackBarChart:
                    layer.AxisY.DataType = AxisDataType.String;
                    layer.AxisY.SetLabelAxisType = SetLabelAxisType.GroupBySeries;
                    layer.AxisX.DataType = AxisDataType.Numeric;
                    layer.AxisX.TickmarkStyle = AxisTickStyle.Smart;
                    layer.AxisX.SetLabelAxisType = SetLabelAxisType.ContinuousData;
                    layer.AxisX.Labels.ItemFormatString = "<DATA_VALUE:0.00#>";
                    break;
                case ChartType.LineChart:
                case ChartType.SplineChart:
                case ChartType.AreaChart:
                case ChartType.SplineAreaChart:
                case ChartType.StackLineChart:
                case ChartType.StackSplineChart:
                case ChartType.StackAreaChart:
                case ChartType.StackSplineAreaChart:
                    layer.AxisX.DataType = AxisDataType.String;
                    layer.AxisX.SetLabelAxisType = SetLabelAxisType.ContinuousData;
                    layer.AxisY.DataType = AxisDataType.Numeric;
                    layer.AxisY.TickmarkStyle = AxisTickStyle.Smart;
                    break;
                case ChartType.BubbleChart:
                case ChartType.ScatterChart:
                    layer.AxisX.DataType = AxisDataType.Numeric;
                    layer.AxisY.DataType = AxisDataType.Numeric;
                    layer.AxisX.TickmarkStyle = AxisTickStyle.Smart;
                    layer.AxisY.TickmarkStyle = AxisTickStyle.Smart;
                    break;
                case ChartType.RadarChart:
                case ChartType.PieChart:
                case ChartType.DoughnutChart:
                case ChartType.PolarChart:
                    break;
                case ChartType.CandleChart:
                    layer.AxisX.DataType = AxisDataType.String;
                    layer.AxisX.SetLabelAxisType = SetLabelAxisType.DateData;
                    layer.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
                    layer.AxisY.DataType = AxisDataType.Numeric;
                    layer.AxisY2.DataType = AxisDataType.Numeric;
                    layer.AxisY.TickmarkStyle = AxisTickStyle.Smart;
                    layer.AxisY2.TickmarkStyle = AxisTickStyle.Smart;
                    break;
                case ChartType.ParetoChart:
                    // Create an Y2 axis
                    AxisItem yAxis2 = new AxisItem();
                    yAxis2.axisNumber = AxisNumber.Y2_Axis;
                    yAxis2.Labels.ItemFormatString = "<DATA_VALUE:#0.0#>";
                    yAxis2.RangeType = AxisRangeType.Custom;
                    yAxis2.RangeMax = 1000;

                    // Add the second Y axes to the ChartArea
                    layer.ChartArea.Axes.Add(yAxis2);

                    // Set the second Y axes
                    layer.AxisY2 = yAxis2;

                    layer.AxisX.DataType = AxisDataType.String;
                    layer.AxisX.SetLabelAxisType = SetLabelAxisType.ContinuousData;
                    layer.AxisY.DataType = AxisDataType.Numeric;
                    layer.AxisY.TickmarkStyle = AxisTickStyle.Smart;
                    layer.AxisY2.DataType = AxisDataType.Numeric;
                    layer.AxisY2.TickmarkStyle = AxisTickStyle.Smart;
                    break;
                case ChartType.StepLineChart:
                case ChartType.StepAreaChart:
                    layer.AxisX.DataType = AxisDataType.Time;
                    layer.AxisY.DataType = AxisDataType.Numeric;
                    break;
                case ChartType.GanttChart:
                    layer.AxisX.DataType = AxisDataType.Time;
                    layer.AxisX.Labels.Orientation = TextOrientation.VerticalLeftFacing;
                    layer.AxisY.DataType = AxisDataType.String;
                    break;
            }

        }
        //Protected Sub SensorMenu_MenuItemChecked(ByVal sender As Object, ByVal e As Infragistics.WebUI.UltraWebNavigator.WebMenuItemCheckedEventArgs) Handles SensorMenu.MenuItemChecked
        //    If e.Item.Tag = "Sensor" Then
        //        If e.Item.Checked = True Then 'clear old check
        //            'add to cameras
        //            Dim MyCollection As New Collection
        //            MyCollection = GetServerObjects(IIf(IsNothing(Session["SelectedSite"]), Nothing, Session["SelectedSite"]))'GetServerObjects 'server1.GetAll()
        //            Dim MyObject1 As Object
        //            Dim MyCnt As Integer = 0
        //            For Each MyObject1 In MyCollection
        //                If TypeOf MyObject1 Is LiveMonitoring.IRemoteLib.SensorDetails Then
        //                    Dim MySensor As LiveMonitoring.IRemoteLib.SensorDetails = CType(MyObject1, LiveMonitoring.IRemoteLib.SensorDetails)
        //                    If MyCnt = e.Item.Index Then
        //                        Session["Sensors"] += MySensor.ID.ToString + ","
        //                        Exit For
        //                    Else
        //                        MyCnt += 1
        //                    End If
        //                End If
        //            Next
        //        Else
        //            'remove from cameras
        //            Dim MyCollection As New Collection
        //            MyCollection = GetServerObjects(IIf(IsNothing(Session["SelectedSite"]), Nothing, Session["SelectedSite"]))'GetServerObjects 'server1.GetAll()
        //            Dim MyObject1 As Object
        //            Dim MyCnt As Integer = 0
        //            For Each MyObject1 In MyCollection
        //                If TypeOf MyObject1 Is LiveMonitoring.IRemoteLib.SensorDetails Then
        //                    Dim MySensor As LiveMonitoring.IRemoteLib.SensorDetails = CType(MyObject1, LiveMonitoring.IRemoteLib.SensorDetails)
        //                    If MyCnt = e.Item.Index Then
        //                        Session["Sensors"] = Replace(Session["Sensors"], MySensor.ID.ToString + ",", "")
        //                        Exit For
        //                    Else
        //                        MyCnt += 1
        //                    End If
        //                End If
        //            Next
        //        End If
        //        RegenerateCallbackGraphs()
        //    End If
        //End Sub 'SetAxisTypes
        protected void btnGenerateSetnRangers_Click(object sender, EventArgs e)
        {
            lblError.Visible = false;
            switch (this.ddlDefaultRangers.SelectedValue)
            {
                case "0":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Minute, -30, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "1":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -1, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "2":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -2, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "3":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -3, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "4":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -5, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "5":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -10, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "6":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -12, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "7":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Hour, -24, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "8":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Day, -2, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "9":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Day, -4, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "10":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Day, -7, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
                case "11":
                    Session["StartDate"] = DateAndTime.DateAdd(DateInterval.Month, -1, DateAndTime.Now);
                    Session["EndDate"] = DateAndTime.Now;
                    break;
            }
            RegenerateCallbackGraphs();

        }
        protected void btnGenerateDateRange_Click(object sender, EventArgs e)
        {
            lblError.Visible = false;

            if (string.IsNullOrEmpty(txtStart.Text) | string.IsNullOrEmpty(txtEnd.Text))
            {
                warningMessage.Visible = true;
                lblWarning.Text = "Please select start/end date.";
                return;
            }
            Session["StartDate"] = txtStart.Text;
            Session["EndDate"] = txtEnd.Text;
            RegenerateCallbackGraphs();
        }
        public void FillSessionSensors()
        {
            System.Web.UI.WebControls.ListItem MyItem = new System.Web.UI.WebControls.ListItem();
            Collection MyCollection = new Collection();
            //clear session var
            Session["Sensors"] = "";
            LiveMonitoring.GlobalRemoteVars MyRem = new LiveMonitoring.GlobalRemoteVars();
            foreach (TreeNode Mynode in tvSensors.Nodes)
            {
                foreach (TreeNode subnode in Mynode.ChildNodes)
                {
                    if (subnode.Checked)
                    {
                        Session["Sensors"] += subnode.Value.ToString() + ",";
                    }
                }
            }
            //MyCollection = MyRem.GetServerObjects(IIf(IsNothing(Session["SelectedSite"]), Nothing, Session["SelectedSite"]))'GetServerObjects 'server1.GetAll()
            //For Each MyItem In chkSensors.Items
            //    If MyItem.Selected = True Then 'clear old check
            //        'add to cameras
            //        Dim MyObject1 As Object
            //        Dim MyCnt As Integer = 0
            //        For Each MyObject1 In MyCollection
            //            If TypeOf MyObject1 Is LiveMonitoring.IRemoteLib.SensorDetails Then
            //                Dim MySensor As LiveMonitoring.IRemoteLib.SensorDetails = CType(MyObject1, LiveMonitoring.IRemoteLib.SensorDetails)
            //                If MySensor.ID = MyItem.Value Then
            //                    Session["Sensors"] += MySensor.ID.ToString + ","
            //                    Exit For
            //                Else
            //                    MyCnt += 1
            //                End If
            //            End If
            //        Next
            //    End If
            //Next

        }
        public void FillOldSessionSensors()
        {
            //Dim MyItem As New Web.UI.WebControls.ListItem()
            //Dim MyCollection As New Collection
            //'clear session var
            //Session["Sensors"] = ""
            //Dim MyRem As New LiveMonitoring.GlobalRemoteVars
            //MyCollection = MyRem.GetServerObjects(IIf(IsNothing(Session["SelectedSite"]), Nothing, Session["SelectedSite"]))'GetServerObjects 'server1.GetAll()
            //For Each MyItem In chkSensors.Items
            //    If MyItem.Selected = True Then 'clear old check
            //        'add to cameras
            //        Dim MyObject1 As Object
            //        Dim MyCnt As Integer = 0
            //        For Each MyObject1 In MyCollection
            //            If TypeOf MyObject1 Is LiveMonitoring.IRemoteLib.SensorDetails Then
            //                Dim MySensor As LiveMonitoring.IRemoteLib.SensorDetails = CType(MyObject1, LiveMonitoring.IRemoteLib.SensorDetails)
            //                If MySensor.ID = MyItem.Value Then
            //                    Session["Sensors"] += MySensor.ID.ToString + ","
            //                    Exit For
            //                Else
            //                    MyCnt += 1
            //                End If
            //            End If
            //        Next
            //    End If
            //Next

        }
        public void RegenerateCallbackGraphs()
        {
            this.Charts.Controls.Clear();
            FillSessionSensors();
            string[] mySensors = Strings.Split((string)Session["Sensors"], ",");
            int Acnt = 0;
            LiveMonitoring.GlobalRemoteVars MyRem = new LiveMonitoring.GlobalRemoteVars();
            Collection MyCollection = new Collection();
            MyCollection = MyRem.get_GetServerObjects(((Session["SelectedSite"] == null) ? null : Session["SelectedSite"]));
            //GetServerObjects 'server1.GetAll()
            object MyObject1 = null;
            //last one is empty        
            for (Acnt = 0; Acnt <= Information.UBound(mySensors) - 1; Acnt++)
            {
                int MyCnt = 0;
                foreach (object MyObject1_loopVariable in MyCollection)
                {
                    MyObject1 = MyObject1_loopVariable;
                    if (MyObject1 is LiveMonitoring.IRemoteLib.SensorDetails)
                    {
                        LiveMonitoring.IRemoteLib.SensorDetails MySensor = (LiveMonitoring.IRemoteLib.SensorDetails)MyObject1;
                        if (Convert.ToInt32(mySensors[Acnt]) == MySensor.ID)
                        {
                            AddLayer(MySensor);
                            AddPageBreak();
                            break; // TODO: might not be correct. Was : Exit For
                        }
                        else
                        {
                            MyCnt += 1;
                        }
                    }
                }
                //AddImages(Acnt + 1, CInt(myCameras(Acnt)), 200, 200)
            }
        }

        protected void btnFilterSensorName_Click(object sender, EventArgs e)
        {
            try
            {
                //Session["SearchSensor"] = txtSensorName.Text;
                Load_Sensors(0);

            }
            catch (Exception ex)
            {
            }
        }
        public Graphs()
        {
            Load += Page_Load;
        }

    }

    public class LabelRenderer : IRenderLabel
    {
        Infragistics.WebUI.UltraWebChart.UltraChart MyChartRef = new Infragistics.WebUI.UltraWebChart.UltraChart();
        public string ToString(Hashtable context)
        {

            DateTime startTime = Convert.ToDateTime(context["START_TIME"]);
            DateTime endTime = Convert.ToDateTime(context["END_TIME"]);

            int seriesIndex = Convert.ToInt32(context["DATA_ROW"]);
            int itemIndex = Convert.ToInt32(context["DATA_COLUMN"]);
            int timeEntryIndex = Convert.ToInt32(context["TIME_ENTRY_INDEX"]);
            if ((Convert.ToString(context["ITEM_LABEL"]) == null) == false)
            {
                string itemlabel = Convert.ToString(context["ITEM_LABEL"]);
            }
            else
            {
                string itemlabel = "";
            }
            GanttSeries series = (Infragistics.UltraChart.Data.GanttSeries)MyChartRef.Series[seriesIndex];
            //as GanttSeries
            GanttItem item = series.Items[itemIndex];
            GanttTimeEntry timeEntry = item.Times[timeEntryIndex];

            return "Entry :" + startTime.ToString() + " Details:" + timeEntry.Owner;

        }

        public LabelRenderer(Infragistics.WebUI.UltraWebChart.UltraChart ChartRef)
        {
            MyChartRef = ChartRef;
        }
    }
}